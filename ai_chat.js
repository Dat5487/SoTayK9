// =============================================================================
// AI CHAT SYSTEM - Knowledge Base & Intelligent Assistant
// =============================================================================

class AIChatSystem {
    constructor() {
        this.currentUser = null;
        this.chatHistory = [];
        this.isOpen = false;
        this.knowledgeBase = null;
        this.init();
    }

    init() {
        this.currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
        this.setupKnowledgeBase();
        this.createChatWidget();
    }

    // =============================================================================
    // KNOWLEDGE BASE SETUP
    // =============================================================================

    setupKnowledgeBase() {
        this.knowledgeBase = {
            // DOG CARE KNOWLEDGE
            care: {
                feeding: {
                    keywords: ['cho ƒÉn', 'th·ª©c ƒÉn', 'dinh d∆∞·ª°ng', 'feeding', 'food'],
                    responses: [
                        'üçñ **Ch·∫ø ƒë·ªô cho ƒÉn ch√≥ nghi·ªáp v·ª•:**\n\n‚Ä¢ **T·∫ßn su·∫•t:** 2 l·∫ßn/ng√†y (s√°ng 6-7h, chi·ªÅu 16-17h)\n‚Ä¢ **L∆∞·ª£ng th·ª©c ƒÉn:** 300-500g/b·ªØa t√πy tr·ªçng l∆∞·ª£ng\n‚Ä¢ **Lo·∫°i th·ª©c ƒÉn:** Th·ª©c ƒÉn chuy√™n d·ª•ng cho ch√≥ l√†m vi·ªác\n‚Ä¢ **N∆∞·ªõc u·ªëng:** Lu√¥n c√≥ n∆∞·ªõc s·∫°ch\n‚Ä¢ **B·ªï sung:** Vitamin v√† kho√°ng ch·∫•t theo ch·ªâ ƒë·ªãnh\n\nüí° **L∆∞u √Ω:** Kh√¥ng cho ƒÉn tr∆∞·ªõc hu·∫•n luy·ªán 2 ti·∫øng',
                        'ü•ò **Th·ª±c ƒë∆°n dinh d∆∞·ª°ng theo tu·ªïi:**\n\n**Ch√≥ con (2-6 th√°ng):** 3-4 b·ªØa/ng√†y, th·ª©c ƒÉn m·ªÅm\n**Ch√≥ tr∆∞·ªüng th√†nh (6 th√°ng+):** 2 b·ªØa/ng√†y, th·ª©c ƒÉn kh√¥\n**Ch√≥ gi√† (7+ tu·ªïi):** Th·ª©c ƒÉn d·ªÖ ti√™u, b·ªï sung canxi\n\n‚ö†Ô∏è **Tr√°nh:** Chocolate, nho, h√†nh, t·ªèi, x∆∞∆°ng g√†'
                    ]
                },
                health: {
                    keywords: ['s·ª©c kh·ªèe', 'b·ªánh', 'kh√°m', 'health', 'sick', 'veterinary'],
                    responses: [
                        'üè• **ChƒÉm s√≥c s·ª©c kh·ªèe c∆° b·∫£n:**\n\n‚Ä¢ **Kh√°m ƒë·ªãnh k·ª≥:** M·ªói 3 th√°ng/l·∫ßn\n‚Ä¢ **Ti√™m ph√≤ng:** Theo l·ªãch c·ªßa b√°c sƒ© th√∫ y\n‚Ä¢ **T·∫©y giun:** 3 th√°ng/l·∫ßn\n‚Ä¢ **V·ªá sinh:** T·∫Øm 1-2 l·∫ßn/tu·∫ßn\n‚Ä¢ **Ki·ªÉm tra h√†ng ng√†y:** M·∫Øt, tai, rƒÉng, m√≥ng\n\nüö® **D·∫•u hi·ªáu c·∫ßn kh√°m g·∫•p:** S·ªët, n√¥n, ti√™u ch·∫£y, kh√≥ th·ªü',
                        'üíä **C√°c b·ªánh th∆∞·ªùng g·∫∑p v√† c√°ch ph√≤ng tr√°nh:**\n\n**Vi√™m tai:** V·ªá sinh tai th∆∞·ªùng xuy√™n\n**Gh·∫ª:** T·∫Øm ƒë√∫ng c√°ch, m√¥i tr∆∞·ªùng s·∫°ch\n**R·ªëi lo·∫°n ti√™u h√≥a:** Ch·∫ø ƒë·ªô ƒÉn ƒë·ªÅu ƒë·∫∑n\n**B·ªánh khÔøΩb:** Ti√™m ph√≤ng ƒë·∫ßy ƒë·ªß\n\nüìû **Li√™n h·ªá b√°c sƒ©:** Khi c√≥ bi·ªÉu hi·ªán b·∫•t th∆∞·ªùng'
                    ]
                },
                hygiene: {
                    keywords: ['v·ªá sinh', 't·∫Øm', 'hygiene', 'clean', 'groom'],
                    responses: [
                        'üõÅ **Quy tr√¨nh v·ªá sinh h√†ng ng√†y:**\n\n‚Ä¢ **T·∫Øm:** 1-2 l·∫ßn/tu·∫ßn, n∆∞·ªõc ·∫•m, s·ªØa t·∫Øm chuy√™n d·ª•ng\n‚Ä¢ **Ch·∫£i l√¥ng:** H√†ng ng√†y, ƒë·∫∑c bi·ªát ch√≥ l√¥ng d√†i\n‚Ä¢ **V·ªá sinh tai:** 2-3 l·∫ßn/tu·∫ßn b·∫±ng dung d·ªãch chuy√™n d·ª•ng\n‚Ä¢ **C·∫Øt m√≥ng:** 2-3 tu·∫ßn/l·∫ßn\n‚Ä¢ **V·ªá sinh rƒÉng:** ƒê√°nh rƒÉng 2-3 l·∫ßn/tu·∫ßn\n\nüßº **D·ª•ng c·ª• c·∫ßn thi·∫øt:** B√†n ch·∫£i, s·ªØa t·∫Øm, khƒÉn, k√©o c·∫Øt m√≥ng'
                    ]
                }
            },

            // DOG TRAINING KNOWLEDGE  
            training: {
                basic: {
                    keywords: ['hu·∫•n luy·ªán c∆° b·∫£n', 'basic training', 'nghe l·ªùi', 'tu√¢n l·ªánh'],
                    responses: [
                        'üéØ **5 l·ªánh c∆° b·∫£n quan tr·ªçng:**\n\n1. **"Ng·ªìi" (Sit):** N·ªÅn t·∫£ng c·ªßa m·ªçi b√†i t·∫≠p\n2. **"N·∫±m" (Down):** TƒÉng c∆∞·ªùng k·ª∑ lu·∫≠t\n3. **"ƒê·ª©ng" (Stand):** Chu·∫©n b·ªã cho ki·ªÉm tra\n4. **"L·∫°i ƒë√¢y" (Come):** An to√†n v√† ki·ªÉm so√°t\n5. **"·ªû l·∫°i" (Stay):** Ki√™n nh·∫´n v√† t·∫≠p trung\n\n‚è∞ **Th·ªùi gian:** 15-20 ph√∫t/bu·ªïi, 2 bu·ªïi/ng√†y\nüèÜ **Ph·∫ßn th∆∞·ªüng:** Th·ª©c ƒÉn, khen ng·ª£i, vu·ªët ve',
                        'üìö **Quy tr√¨nh hu·∫•n luy·ªán tu√¢n l·ªánh:**\n\n**B∆∞·ªõc 1:** Th·ªã ph·∫°m ƒë·ªông t√°c + l·ªánh gi·ªçng\n**B∆∞·ªõc 2:** H∆∞·ªõng d·∫´n ch√≥ th·ª±c hi·ªán\n**B∆∞·ªõc 3:** Khen th∆∞·ªüng khi ƒë√∫ng\n**B∆∞·ªõc 4:** L·∫∑p l·∫°i 5-10 l·∫ßn\n**B∆∞·ªõc 5:** Ki·ªÉm tra ƒë·ªô thu·∫ßn th·ª•c\n\nüí° **Nguy√™n t·∫Øc:** Ki√™n nh·∫´n, nh·∫•t qu√°n, t√≠ch c·ª±c'
                    ]
                },
                detection: {
                    keywords: ['ph√°t hi·ªán', 'detection', 'ma t√∫y', 'drug', 'explosive', 'ch·∫•t n·ªï'],
                    responses: [
                        'üíä **Hu·∫•n luy·ªán ph√°t hi·ªán ma t√∫y:**\n\n**Giai ƒëo·∫°n 1 (2-4 tu·∫ßn):** L√†m quen v·ªõi m√πi m·∫´u\n**Giai ƒëo·∫°n 2 (4-8 tu·∫ßn):** T√¨m ki·∫øm c∆° b·∫£n\n**Giai ƒëo·∫°n 3 (8-12 tu·∫ßn):** T√¨m ki·∫øm ph·ª©c t·∫°p\n**Giai ƒëo·∫°n 4 (12+ tu·∫ßn):** Th·ª±c h√†nh th·ª±c t·∫ø\n\nüéØ **K·ªπ thu·∫≠t:** Positive reinforcement, clicker training\n‚ö†Ô∏è **An to√†n:** Kh√¥ng ti·∫øp x√∫c tr·ª±c ti·∫øp v·ªõi ch·∫•t th·∫≠t',
                        'üí£ **Hu·∫•n luy·ªán ph√°t hi·ªán ch·∫•t n·ªï:**\n\n**Chu·∫©n b·ªã:** M·∫´u hu·∫•n luy·ªán an to√†n\n**B∆∞·ªõc 1:** Nh·∫≠n di·ªán m√πi (2-3 tu·∫ßn)\n**B∆∞·ªõc 2:** B√°o hi·ªáu khi ph√°t hi·ªán (3-4 tu·∫ßn)\n**B∆∞·ªõc 3:** T√¨m ki·∫øm trong m√¥i tr∆∞·ªùng kh√°c nhau\n**B∆∞·ªõc 4:** Ki·ªÉm tra ƒë·ªô ch√≠nh x√°c\n\nüìä **Ti√™u chu·∫©n:** ƒê·ªô ch√≠nh x√°c >95%'
                    ]
                },
                advanced: {
                    keywords: ['hu·∫•n luy·ªán n√¢ng cao', 'advanced', 'chuy√™n s√¢u', 'tactical'],
                    responses: [
                        'üöÅ **Hu·∫•n luy·ªán nghi·ªáp v·ª• n√¢ng cao:**\n\n‚Ä¢ **T√¨m ki·∫øm c·ª©u n·∫°n:** Theo d·∫•u v·∫øt, t√¨m ng∆∞·ªùi m·∫•t t√≠ch\n‚Ä¢ **B·∫£o v·ªá:** B·∫£o v·ªá m·ª•c ti√™u, tu·∫ßn tra\n‚Ä¢ **Chi·∫øn thu·∫≠t:** Ph·ªëi h·ª£p v·ªõi l·ª±c l∆∞·ª£ng\n‚Ä¢ **Th√≠ch ·ª©ng m√¥i tr∆∞·ªùng:** ƒê·ªãa h√¨nh kh√≥ khƒÉn\n‚Ä¢ **L√†m vi·ªác ƒë√™m:** Hu·∫•n luy·ªán trong t·ªëi\n\nüèãÔ∏è **R√®n luy·ªán th·ªÉ ch·∫•t:** Ch·∫°y, nh·∫£y, leo tr√®o'
                    ]
                }
            },

            // OPERATIONAL PROCEDURES
            operations: {
                patrol: {
                    keywords: ['tu·∫ßn tra', 'patrol', 'c·ª≠a kh·∫©u', 'border', 'ki·ªÉm tra'],
                    responses: [
                        'üöî **Quy tr√¨nh tu·∫ßn tra c·ª≠a kh·∫©u:**\n\n**Tr∆∞·ªõc tu·∫ßn tra:**\n‚Ä¢ Ki·ªÉm tra s·ª©c kh·ªèe ch√≥\n‚Ä¢ Chu·∫©n b·ªã thi·∫øt b·ªã\n‚Ä¢ Xem l·∫°i khu v·ª±c tu·∫ßn tra\n\n**Trong tu·∫ßn tra:**\n‚Ä¢ Gi·ªØ ch√≥ g·∫ßn b√™n\n‚Ä¢ Quan s√°t ph·∫£n ·ª©ng\n‚Ä¢ B√°o c√°o b·∫•t th∆∞·ªùng\n‚Ä¢ Ghi ch√©p ho·∫°t ƒë·ªông\n\n**Sau tu·∫ßn tra:**\n‚Ä¢ V·ªá sinh ch√≥\n‚Ä¢ B√°o c√°o k·∫øt qu·∫£\n‚Ä¢ Ngh·ªâ ng∆°i cho ch√≥'
                    ]
                },
                inspection: {
                    keywords: ['ki·ªÉm tra h√†ng h√≥a', 'inspection', 'container', 'cargo', 'customs'],
                    responses: [
                        'üì¶ **Quy tr√¨nh ki·ªÉm tra h√†ng h√≥a:**\n\n**B∆∞·ªõc 1:** ƒê√°nh gi√° s∆° b·ªô khu v·ª±c\n**B∆∞·ªõc 2:** Cho ch√≥ l√†m quen m√¥i tr∆∞·ªùng\n**B∆∞·ªõc 3:** Ki·ªÉm tra c√≥ h·ªá th·ªëng\n**B∆∞·ªõc 4:** Quan s√°t ph·∫£n ·ª©ng ch√≥\n**B∆∞·ªõc 5:** B√°o c√°o k·∫øt qu·∫£\n\n‚ö†Ô∏è **An to√†n:** Lu√¥n c√≥ HLV b√™n c·∫°nh, tr√°nh khu v·ª±c nguy hi·ªÉm'
                    ]
                }
            },

            // SYSTEM USAGE
            system: {
                journal: {
                    keywords: ['nh·∫≠t k√Ω', 'journal', 'vi·∫øt nh·∫≠t k√Ω', 'ghi ch√©p'],
                    responses: [
                        'üìù **H∆∞·ªõng d·∫´n vi·∫øt nh·∫≠t k√Ω:**\n\n**ƒê·∫ßy ƒë·ªß th√¥ng tin:**\n‚Ä¢ Ho·∫°t ƒë·ªông hu·∫•n luy·ªán c·ª• th·ªÉ\n‚Ä¢ T√¨nh tr·∫°ng s·ª©c kh·ªèe\n‚Ä¢ Hi·ªáu su·∫•t l√†m vi·ªác\n‚Ä¢ Ghi ch√∫ ƒë·∫∑c bi·ªát\n\n**M·∫πo vi·∫øt t·ªët:**\n‚Ä¢ Ghi ngay sau ho·∫°t ƒë·ªông\n‚Ä¢ S·ª≠ d·ª•ng t·ª´ ng·ªØ r√µ r√†ng\n‚Ä¢ Ghi c·∫£ ƒëi·ªÉm t√≠ch c·ª±c v√† ti√™u c·ª±c\n‚Ä¢ ƒê∆∞a ra ƒë√°nh gi√° kh√°ch quan'
                    ]
                },
                approval: {
                    keywords: ['duy·ªát nh·∫≠t k√Ω', 'approval', 'k√Ω duy·ªát', 'manager'],
                    responses: [
                        '‚úÖ **Quy tr√¨nh duy·ªát nh·∫≠t k√Ω:**\n\n**V·ªõi Manager:**\n1. Xem chi ti·∫øt nh·∫≠t k√Ω\n2. ƒê√°nh gi√° n·ªôi dung\n3. Th√™m √Ω ki·∫øn (n·∫øu c·∫ßn)\n4. K√Ω t√™n + con d·∫•u\n5. Ho√†n t·∫•t duy·ªát\n\n**Ti√™u ch√≠ duy·ªát:**\n‚Ä¢ N·ªôi dung ƒë·∫ßy ƒë·ªß, r√µ r√†ng\n‚Ä¢ ƒê√°nh gi√° kh√°ch quan\n‚Ä¢ Tu√¢n th·ªß quy ƒë·ªãnh'
                    ]
                }
            },

            // EMERGENCY PROCEDURES
            emergency: {
                medical: {
                    keywords: ['c·∫•p c·ª©u', 'emergency', 'tai n·∫°n', 'b·ªã th∆∞∆°ng'],
                    responses: [
                        'üö® **X·ª≠ l√Ω c·∫•p c·ª©u cho ch√≥:**\n\n**B∆∞·ªõc 1:** Gi·ªØ b√¨nh tƒ©nh, ƒë·∫£m b·∫£o an to√†n\n**B∆∞·ªõc 2:** Ki·ªÉm tra t√¨nh tr·∫°ng ch√≥\n**B∆∞·ªõc 3:** S∆° c·ª©u c∆° b·∫£n (n·∫øu bi·∫øt)\n**B∆∞·ªõc 4:** Li√™n h·ªá b√°c sƒ© th√∫ y ngay\n**B∆∞·ªõc 5:** B√°o c√°o l√™n c·∫•p tr√™n\n\nüìû **S·ªë c·∫•p c·ª©u:** [C·∫ßn c·∫≠p nh·∫≠t s·ªë ƒë·ªãa ph∆∞∆°ng]\nüè• **B·ªánh vi·ªán th√∫ y g·∫ßn nh·∫•t:** [C·∫ßn c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ]'
                    ]
                }
            },

            // REGULATIONS & POLICIES
            regulations: {
                general: {
                    keywords: ['quy ƒë·ªãnh', 'regulation', 'ch√≠nh s√°ch', 'policy', 'lu·∫≠t'],
                    responses: [
                        'üìã **Quy ƒë·ªãnh chung v·ªÅ ch√≥ nghi·ªáp v·ª•:**\n\n‚Ä¢ Ch√≥ ph·∫£i ƒë∆∞·ª£c ƒë√†o t·∫°o v√† c·∫•p ph√©p\n‚Ä¢ Hu·∫•n luy·ªán vi√™n ph·∫£i c√≥ ch·ª©ng ch·ªâ\n‚Ä¢ B√°o c√°o ƒë·ªãnh k·ª≥ v·ªÅ t√¨nh tr·∫°ng\n‚Ä¢ Tu√¢n th·ªß quy t·∫Øc an to√†n\n‚Ä¢ B·∫£o m·∫≠t th√¥ng tin nh·∫°y c·∫£m\n\nüìñ **T√†i li·ªáu tham kh·∫£o:** Th√¥ng t∆∞ 15/2020/TT-BCA'
                    ]
                }
            }
        };
    }

    // =============================================================================
    // CHAT WIDGET UI
    // =============================================================================

    createChatWidget() {
        const widgetHtml = `
            <div id="aiChatWidget" class="ai-chat-widget">
                <!-- Chat Toggle Button -->
                <div id="chatToggle" class="chat-toggle" onclick="aiChat.toggleChat()">
                    <div class="chat-icon">ü§ñ</div>
                    <div class="notification-badge" id="chatNotification" style="display: none;">1</div>
                </div>

                <!-- Chat Window -->
                <div id="chatWindow" class="chat-window hidden">
                    <div class="chat-header">
                        <div class="chat-title">
                            <span class="chat-avatar">ü§ñ</span>
                            <div>
                                <div class="chat-name">AI Assistant K9</div>
                                <div class="chat-status">üü¢ S·∫µn s√†ng h·ªó tr·ª£</div>
                            </div>
                        </div>
                        <div class="chat-controls">
                            <button onclick="aiChat.clearChat()" class="chat-btn" title="X√≥a cu·ªôc tr√≤ chuy·ªán">üóëÔ∏è</button>
                            <button onclick="aiChat.toggleChat()" class="chat-btn" title="Thu nh·ªè">‚ûñ</button>
                        </div>
                    </div>

                    <div id="chatMessages" class="chat-messages">
                        <div class="message bot-message">
                            <div class="message-avatar">ü§ñ</div>
                            <div class="message-content">
                                <strong>Xin ch√†o ${this.currentUser.full_name || 'b·∫°n'}!</strong><br>
                                T√¥i l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng qu·∫£n l√Ω ch√≥ nghi·ªáp v·ª•. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:
                                <div class="quick-topics">
                                    <span onclick="aiChat.sendQuickMessage('H∆∞·ªõng d·∫´n chƒÉm s√≥c ch√≥')">üêï ChƒÉm s√≥c ch√≥</span>
                                    <span onclick="aiChat.sendQuickMessage('C√°ch hu·∫•n luy·ªán c∆° b·∫£n')">üéØ Hu·∫•n luy·ªán</span>
                                    <span onclick="aiChat.sendQuickMessage('Quy tr√¨nh tu·∫ßn tra')">üöî Nghi·ªáp v·ª•</span>
                                    <span onclick="aiChat.sendQuickMessage('H∆∞·ªõng d·∫´n vi·∫øt nh·∫≠t k√Ω')">üìù Nh·∫≠t k√Ω</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="chat-input-area">
                        <div class="chat-suggestions" id="chatSuggestions">
                            <!-- Dynamic suggestions will appear here -->
                        </div>
                        <div class="chat-input-container">
                            <input type="text" id="chatInput" placeholder="H·ªèi v·ªÅ chƒÉm s√≥c, hu·∫•n luy·ªán, nghi·ªáp v·ª•..." onkeypress="aiChat.handleInputKeyPress(event)">
                            <button onclick="aiChat.sendMessage()" class="send-btn">üì§</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', widgetHtml);
        this.addChatStyles();
        
        // Show initial notification
        setTimeout(() => {
            this.showNotification();
        }, 3000);
    }

    addChatStyles() {
        const styles = `
            <style>
            .ai-chat-widget {
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 10000;
                font-family: Arial, sans-serif;
            }

            .chat-toggle {
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
                position: relative;
            }

            .chat-toggle:hover {
                transform: scale(1.1);
                box-shadow: 0 6px 20px rgba(0,0,0,0.4);
            }

            .chat-icon {
                font-size: 24px;
                animation: bounce 2s infinite;
            }

            @keyframes bounce {
                0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
                40% { transform: translateY(-5px); }
                60% { transform: translateY(-3px); }
            }

            .notification-badge {
                position: absolute;
                top: -5px;
                right: -5px;
                background: #ff4757;
                color: white;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                font-size: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                animation: pulse 1s infinite;
            }

            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.2); }
                100% { transform: scale(1); }
            }

            .chat-window {
                position: absolute;
                bottom: 80px;
                right: 0;
                width: 380px;
                height: 500px;
                background: white;
                border-radius: 16px;
                box-shadow: 0 8px 30px rgba(0,0,0,0.3);
                display: flex;
                flex-direction: column;
                overflow: hidden;
                animation: slideInUp 0.3s ease;
            }

            @keyframes slideInUp {
                from {
                    opacity: 0;
                    transform: translateY(20px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .chat-header {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                padding: 15px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .chat-title {
                display: flex;
                align-items: center;
                gap: 10px;
            }

            .chat-avatar {
                font-size: 18px;
            }

            .chat-name {
                font-weight: bold;
                font-size: 14px;
            }

            .chat-status {
                font-size: 11px;
                opacity: 0.9;
            }

            .chat-controls {
                display: flex;
                gap: 5px;
            }

            .chat-btn {
                background: rgba(255,255,255,0.2);
                border: none;
                color: white;
                padding: 5px 8px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                transition: background 0.3s;
            }

            .chat-btn:hover {
                background: rgba(255,255,255,0.3);
            }

            .chat-messages {
                flex: 1;
                overflow-y: auto;
                padding: 15px;
                background: #f8f9fa;
            }

            .message {
                display: flex;
                margin-bottom: 15px;
                align-items: flex-start;
                gap: 10px;
            }

            .message-avatar {
                font-size: 16px;
                flex-shrink: 0;
            }

            .message-content {
                max-width: 280px;
                padding: 12px 16px;
                border-radius: 16px;
                font-size: 14px;
                line-height: 1.4;
                word-wrap: break-word;
            }

            .bot-message .message-content {
                background: white;
                color: #2d3748;
                border: 1px solid #e2e8f0;
                border-bottom-left-radius: 6px;
            }

            .user-message {
                flex-direction: row-reverse;
            }

            .user-message .message-content {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                border-bottom-right-radius: 6px;
            }

            .quick-topics {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                margin-top: 10px;
            }

            .quick-topics span {
                background: #e3f2fd;
                color: #1976d2;
                padding: 6px 12px;
                border-radius: 16px;
                font-size: 12px;
                cursor: pointer;
                transition: all 0.3s;
                border: 1px solid #bbdefb;
            }

            .quick-topics span:hover {
                background: #bbdefb;
                transform: translateY(-1px);
            }

            .chat-input-area {
                border-top: 1px solid #e2e8f0;
                background: white;
            }

            .chat-suggestions {
                padding: 8px 15px;
                background: #f8f9fa;
                border-bottom: 1px solid #e2e8f0;
                font-size: 12px;
                color: #718096;
                display: none;
            }

            .chat-suggestions.show {
                display: block;
            }

            .suggestion-item {
                padding: 4px 8px;
                background: white;
                border-radius: 12px;
                margin: 2px 4px 2px 0;
                display: inline-block;
                cursor: pointer;
                border: 1px solid #e2e8f0;
                transition: all 0.2s;
            }

            .suggestion-item:hover {
                background: #e3f2fd;
                border-color: #bbdefb;
            }

            .chat-input-container {
                display: flex;
                padding: 15px;
                gap: 10px;
                align-items: center;
            }

            #chatInput {
                flex: 1;
                border: 2px solid #e2e8f0;
                border-radius: 20px;
                padding: 10px 15px;
                font-size: 14px;
                outline: none;
                transition: border-color 0.3s;
            }

            #chatInput:focus {
                border-color: #667eea;
            }

            .send-btn {
                background: linear-gradient(135deg, #667eea, #764ba2);
                border: none;
                color: white;
                padding: 10px 12px;
                border-radius: 50%;
                cursor: pointer;
                font-size: 14px;
                transition: all 0.3s;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .send-btn:hover {
                transform: scale(1.1);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
            }

            .send-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

            .typing-indicator {
                display: flex;
                align-items: center;
                gap: 4px;
                padding: 12px 16px;
                background: white;
                border-radius: 16px;
                border: 1px solid #e2e8f0;
                margin-bottom: 15px;
            }

            .typing-dot {
                width: 8px;
                height: 8px;
                background: #718096;
                border-radius: 50%;
                animation: typingBounce 1.4s infinite;
            }

            .typing-dot:nth-child(2) { animation-delay: 0.2s; }
            .typing-dot:nth-child(3) { animation-delay: 0.4s; }

            @keyframes typingBounce {
                0%, 60%, 100% { transform: translateY(0); }
                30% { transform: translateY(-10px); }
            }

            /* Mobile Responsive */
            @media (max-width: 480px) {
                .chat-window {
                    width: 340px;
                    height: 450px;
                    bottom: 70px;
                    right: -10px;
                }
                
                .ai-chat-widget {
                    bottom: 15px;
                    right: 15px;
                }
            }

            .hidden { display: none !important; }
            </style>
        `;

        document.head.insertAdjacentHTML('beforeend', styles);
    }

    // =============================================================================
    // CHAT FUNCTIONALITY
    // =============================================================================

    toggleChat() {
        const chatWindow = document.getElementById('chatWindow');
        const notification = document.getElementById('chatNotification');
        
        if (this.isOpen) {
            chatWindow.classList.add('hidden');
            this.isOpen = false;
        } else {
            chatWindow.classList.remove('hidden');
            this.isOpen = true;
            notification.style.display = 'none';
            document.getElementById('chatInput').focus();
        }
    }

    sendMessage(message = null) {
        const input = document.getElementById('chatInput');
        const messageText = message || input.value.trim();
        
        if (!messageText) return;
        
        // Add user message
        this.addMessage(messageText, 'user');
        
        // Clear input
        input.value = '';
        
        // Show typing indicator
        this.showTypingIndicator();
        
        // Process message and respond
        setTimeout(() => {
            this.hideTypingIndicator();
            const response = this.processMessage(messageText);
            this.addMessage(response, 'bot');
        }, 1000 + Math.random() * 1000);
    }

    sendQuickMessage(message) {
        this.sendMessage(message);
    }

    addMessage(content, type) {
        const messagesContainer = document.getElementById('chatMessages');
        const timestamp = new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;
        
        const avatar = type === 'bot' ? 'ü§ñ' : 'üë§';
        
        messageDiv.innerHTML = `
            <div class="message-avatar">${avatar}</div>
            <div class="message-content">
                ${this.formatMessage(content)}
                <div style="font-size: 11px; opacity: 0.7; margin-top: 8px;">${timestamp}</div>
            </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Store in history
        this.chatHistory.push({
            content,
            type,
            timestamp: new Date().toISOString()
        });
    }

    formatMessage(content) {
        // Convert markdown-like formatting
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/\n/g, '<br>')
            .replace(/‚Ä¢ /g, '‚Ä¢ ')
            .replace(/\d+\./g, (match) => `<strong>${match}</strong>`);
    }

    showTypingIndicator() {
        const messagesContainer = document.getElementById('chatMessages');
        const typingDiv = document.createElement('div');
        typingDiv.id = 'typingIndicator';
        typingDiv.className = 'message bot-message';
        typingDiv.innerHTML = `
            <div class="message-avatar">ü§ñ</div>
            <div class="typing-indicator">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        `;
        
        messagesContainer.appendChild(typingDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    hideTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    handleInputKeyPress(event) {
        if (event.key === 'Enter') {
            this.sendMessage();
        }
    }

    // =============================================================================
    // AI MESSAGE PROCESSING
    // =============================================================================

    processMessage(message) {
        const lowerMessage = message.toLowerCase().trim();
        
        // Check for greetings first
        if (this.isGreeting(lowerMessage)) {
            return this.getGreetingResponse();
        }

        // Check for help/commands
        if (this.isHelpRequest(lowerMessage)) {
            return this.getHelpResponse();
        }

        // Search knowledge base
        const response = this.searchKnowledgeBase(lowerMessage);
        if (response) {
            return response;
        }

        // Fallback responses
        return this.getFallbackResponse(lowerMessage);
    }

    isGreeting(message) {
        const greetings = ['xin ch√†o', 'ch√†o', 'hello', 'hi', 'hey', 'halo', 'ch√†o b·∫°n'];
        return greetings.some(greeting => message.includes(greeting));
    }

    getGreetingResponse() {
        const responses = [
            `ü§ñ Xin ch√†o ${this.currentUser.full_name || 'b·∫°n'}! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n g√¨ v·ªÅ ch√≥ nghi·ªáp v·ª• h√¥m nay?`,
            `üëã Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ ch√≥ nghi·ªáp v·ª•. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ kh√¥ng?`,
            `üêï Xin ch√†o! T√¥i s·∫µn s√†ng gi√∫p b·∫°n v·ªÅ chƒÉm s√≥c, hu·∫•n luy·ªán v√† qu·∫£n l√Ω ch√≥ nghi·ªáp v·ª•.`
        ];
        return responses[Math.floor(Math.random() * responses.length)];
    }

    isHelpRequest(message) {
        const helpKeywords = ['help', 'gi√∫p ƒë·ª°', 'h∆∞·ªõng d·∫´n', 'h·ªó tr·ª£', 'gi√∫p t√¥i', 'l√†m sao', 'c·∫ßn gi√∫p'];
        return helpKeywords.some(keyword => message.includes(keyword));
    }

    getHelpResponse() {
        return `ü§ñ **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ c√°c ch·ªß ƒë·ªÅ sau:**

üêï **ChƒÉm s√≥c ch√≥:**
‚Ä¢ Cho ƒÉn v√† dinh d∆∞·ª°ng
‚Ä¢ ChƒÉm s√≥c s·ª©c kh·ªèe
‚Ä¢ V·ªá sinh v√† t·∫Øm r·ª≠a

üéØ **Hu·∫•n luy·ªán:**
‚Ä¢ Hu·∫•n luy·ªán c∆° b·∫£n
‚Ä¢ Ph√°t hi·ªán ma t√∫y/ch·∫•t n·ªï
‚Ä¢ K·ªπ thu·∫≠t n√¢ng cao

üöî **Nghi·ªáp v·ª•:**
‚Ä¢ Quy tr√¨nh tu·∫ßn tra
‚Ä¢ Ki·ªÉm tra h√†ng h√≥a
‚Ä¢ An to√†n trong c√¥ng vi·ªác

üìù **H·ªá th·ªëng:**
‚Ä¢ C√°ch vi·∫øt nh·∫≠t k√Ω
‚Ä¢ Quy tr√¨nh duy·ªát
‚Ä¢ Xu·∫•t b√°o c√°o

üí° **V√≠ d·ª• c√¢u h·ªèi:**
"Ch√≥ ƒÉn m·∫•y l·∫ßn m·ªôt ng√†y?"
"C√°ch hu·∫•n luy·ªán ch√≥ nghe l·ªùi?"
"Quy tr√¨nh tu·∫ßn tra c·ª≠a kh·∫©u?"`;
    }

    searchKnowledgeBase(message) {
        let bestMatch = null;
        let bestScore = 0;

        // Search through all knowledge categories
        for (const category in this.knowledgeBase) {
            for (const topic in this.knowledgeBase[category]) {
                const topicData = this.knowledgeBase[category][topic];
                const score = this.calculateRelevanceScore(message, topicData.keywords);
                
                if (score > bestScore && score > 0.3) {
                    bestScore = score;
                    bestMatch = topicData;
                }
            }
        }

        if (bestMatch) {
            const responses = bestMatch.responses;
            return responses[Math.floor(Math.random() * responses.length)];
        }

        return null;
    }

    calculateRelevanceScore(message, keywords) {
        let matches = 0;
        let totalKeywords = keywords.length;
        
        keywords.forEach(keyword => {
            if (message.includes(keyword.toLowerCase())) {
                matches++;
            }
        });
        
        return matches / totalKeywords;
    }

    getFallbackResponse(message) {
        // Analyze message intent and provide contextual fallback
        if (message.includes('ch√≥') || message.includes('dog')) {
            return `üêï T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ ch√≥ nghi·ªáp v·ª•, nh∆∞ng c·∫ßn th√™m th√¥ng tin chi ti·∫øt. B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ v·ªÅ:

‚Ä¢ **ChƒÉm s√≥c:** "Ch√≥ ƒÉn m·∫•y l·∫ßn m·ªôt ng√†y?"
‚Ä¢ **Hu·∫•n luy·ªán:** "C√°ch d·∫°y ch√≥ nghe l·ªùi?"
‚Ä¢ **S·ª©c kh·ªèe:** "L√†m sao bi·∫øt ch√≥ b·ªã b·ªánh?"
‚Ä¢ **Nghi·ªáp v·ª•:** "Quy tr√¨nh tu·∫ßn tra nh∆∞ th·∫ø n√†o?"`;
        }
        
        if (message.includes('nh·∫≠t k√Ω') || message.includes('journal')) {
            return `üìù **V·ªÅ nh·∫≠t k√Ω hu·∫•n luy·ªán:**

‚Ä¢ Nh·∫≠t k√Ω c·∫ßn ghi ƒë·∫ßy ƒë·ªß c√°c ho·∫°t ƒë·ªông trong ng√†y
‚Ä¢ Bao g·ªìm: hu·∫•n luy·ªán, chƒÉm s√≥c, nghi·ªáp v·ª•, t√¨nh tr·∫°ng s·ª©c kh·ªèe
‚Ä¢ Ghi ch√∫ c·ªßa hu·∫•n luy·ªán vi√™n v·ªÅ hi·ªáu su·∫•t
‚Ä¢ G·ª≠i l√£nh ƒë·∫°o duy·ªát khi ho√†n th√†nh

B·∫°n c·∫ßn h∆∞·ªõng d·∫´n c·ª• th·ªÉ n√†o v·ªÅ nh·∫≠t k√Ω kh√¥ng?`;
        }

        // General fallback
        const fallbackResponses = [
            `ü§î T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ v·ªÅ **chƒÉm s√≥c ch√≥**, **hu·∫•n luy·ªán**, **nghi·ªáp v·ª•**, ho·∫∑c **nh·∫≠t k√Ω** kh√¥ng?`,
            `üí≠ C√¢u h·ªèi n√†y h∆°i kh√≥ hi·ªÉu. Th·ª≠ h·ªèi v·ªÅ:\n‚Ä¢ C√°ch cho ch√≥ ƒÉn\n‚Ä¢ Hu·∫•n luy·ªán c∆° b·∫£n\n‚Ä¢ Quy tr√¨nh tu·∫ßn tra\n‚Ä¢ C√°ch vi·∫øt nh·∫≠t k√Ω`,
            `üîç T√¥i ƒëang h·ªçc h·ªèi th√™m v·ªÅ ch·ªß ƒë·ªÅ n√†y. Hi·ªán t·∫°i t√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ chƒÉm s√≥c, hu·∫•n luy·ªán v√† qu·∫£n l√Ω ch√≥ nghi·ªáp v·ª•. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ?`
        ];
        
        return fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
    }

    // =============================================================================
    // UTILITY FUNCTIONS
    // =============================================================================

    clearChat() {
        if (confirm('üóëÔ∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán?')) {
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.innerHTML = `
                <div class="message bot-message">
                    <div class="message-avatar">ü§ñ</div>
                    <div class="message-content">
                        Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a. T√¥i v·∫´n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n! üòä
                    </div>
                </div>
            `;
            this.chatHistory = [];
        }
    }

    showNotification() {
        if (!this.isOpen) {
            document.getElementById('chatNotification').style.display = 'flex';
        }
    }

    // =============================================================================
    // INTEGRATION WITH MAIN SYSTEM
    // =============================================================================

    async getSystemContext() {
        // Get current user's context for personalized responses
        return {
            role: this.currentUser.role,
            name: this.currentUser.full_name,
            recentActivity: await this.getRecentActivity()
        };
    }

    async getRecentActivity() {
        // Mock recent activity - in real implementation, fetch from API
        return {
            lastLogin: new Date().toLocaleDateString('vi-VN'),
            journalsToday: 0,
            pendingApprovals: 2
        };
    }

    // Public methods for external integration
    openChatWith(message) {
        if (!this.isOpen) {
            this.toggleChat();
        }
        setTimeout(() => {
            document.getElementById('chatInput').value = message;
            document.getElementById('chatInput').focus();
        }, 300);
    }

    sendSystemMessage(message) {
        if (!this.isOpen) {
            this.showNotification();
        }
        this.addMessage(message, 'bot');
    }
}

// =============================================================================
// GLOBAL INSTANCE
// =============================================================================

let aiChat;

document.addEventListener('DOMContentLoaded', function() {
    // Initialize after a short delay to ensure other systems are ready
    setTimeout(() => {
        aiChat = new AIChatSystem();
    }, 1000);
});

// Export for use in other scripts
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIChatSystem;
}