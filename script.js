// Script loaded successfully

// Script loaded successfully

// =============================================================================
// DATE FORMATTING UTILITY FUNCTIONS
// =============================================================================

/**
 * Format date to dd/mm/yyyy format
 * @param {Date|string} date - Date object or ISO string
 * @param {boolean} includeTime - Whether to include time in the format
 * @returns {string} Formatted date string
 */
function formatDateToDDMMYYYY(date, includeTime = false) {
    if (!date) return 'N/A';

    const dateObj = typeof date === 'string' ? new Date(date) : date;

    if (isNaN(dateObj.getTime())) return 'N/A';

    const day = String(dateObj.getDate()).padStart(2, '0');
    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
    const year = dateObj.getFullYear();

    if (includeTime) {
        const hours = String(dateObj.getHours()).padStart(2, '0');
        const minutes = String(dateObj.getMinutes()).padStart(2, '0');
        const seconds = String(dateObj.getSeconds()).padStart(2, '0');
        return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
    }

    return `${day}/${month}/${year}`;
}

/**
 * Get current date in dd/mm/yyyy format
 * @returns {string} Current date formatted as dd/mm/yyyy
 */
function getCurrentDateDDMMYYYY() {
    return formatDateToDDMMYYYY(new Date());
}



// ===== TH√äM PH·∫¶N QU·∫¢N L√ù CH·ªÆ K√ù TH·ª∞C =====



// H·ªá th·ªëng qu·∫£n l√Ω ch·ªØ k√Ω - s·ª≠ d·ª•ng database



// Kh·ªüi t·∫°o database ch·ªØ k√Ω m·∫∑c ƒë·ªãnh




// Function l·∫•y ch·ªØ k√Ω c·ªßa user - S·ª¨A: FIX USER MAPPING HO√ÄNG TR·ªåNG QU·ª≤NH

// Function to get user signature from database
async function getUserSignature(userName, role) {
    // Getting signature for user

    try {
        // Fetch user data to get signature info
        const response = await fetch('/api/users', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            const users = data.data || [];

            // Available users loaded

            // Find user by name or username
            const user = users.find(u => u.name === userName || u.username === userName);

            // User found

            if (user && user.signature) {
                // User has signature file
                return {
                    userId: user.id,
                    userName: user.name,
                    role: user.role,
                    signatureImage: 'signatures/' + user.signature,
                    signatureText: user.name,
                    createdDate: user.updated_at
                };
            } else if (user) {
                // User exists but no signature file - return user data with default signature
                // Using default signature
                return {
                    userId: user.id,
                    userName: user.name,
                    role: user.role,
                    signatureImage: 'signatures/default_signature.png',
                    signatureText: user.name,
                    createdDate: user.updated_at
                };
            } else {
                // User not found
            }
        } else {
        }
    } catch (error) {
    }

    // Return default signature if none found
    // Returning default signature
    return {
        userId: 'default',
        userName: userName,
        role: role,
        signatureImage: 'signatures/default_signature.png',
        signatureText: userName,
        createdDate: new Date().toISOString()
    };
}



// Function ki·ªÉm tra file ch·ªØ k√Ω c√≥ t·ªìn t·∫°i kh√¥ng - S·ª¨A: FORCE HI·ªÇN TH·ªä CH·ªÆ K√ù

function checkSignatureImageExists(imagePath) {

    return new Promise((resolve) => {

        // Checking signature image

        const img = new Image();

        img.onload = () => {

            // Image loaded successfully

            resolve(true);

        };

        img.onerror = () => {

            // Image failed to load, will use text fallback

            resolve(false); // S·ª¨A: Return false ƒë·ªÉ s·ª≠ d·ª•ng text fallback

        };

        // Set timeout ƒë·ªÉ tr√°nh hang

        setTimeout(() => {

            // Image check timeout

            resolve(false); // S·ª¨A: Return false ƒë·ªÉ s·ª≠ d·ª•ng text fallback

        }, 3000);

        img.src = imagePath;

    });

}



// Function t·∫°o HTML hi·ªÉn th·ªã ch·ªØ k√Ω th·ª±c - S·ª¨A: C·∫¢I THI·ªÜN HI·ªÇN TH·ªä CH·ªÆ K√ù

async function generateSignatureHTML(signatureData, timestamp) {

    // Validate signatureData
    if (!signatureData || typeof signatureData !== 'object') {
        return '<div class="signature-error">L·ªói: D·ªØ li·ªáu ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá</div>';
    }

    // Ensure required properties exist
    const userName = signatureData.userName || signatureData.name || 'Unknown User';
    const signatureImage = signatureData.signatureImage || 'signatures/default_signature.png';

    // Generating signature HTML
    // Processing signature data



    // Ki·ªÉm tra xem ·∫£nh ch·ªØ k√Ω c√≥ t·ªìn t·∫°i kh√¥ng

    const imageExists = await checkSignatureImageExists(signatureImage);



    let signatureImageHTML = '';

    if (imageExists) {

        // Hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω

        signatureImageHTML = `<div style="margin: 15px 0; text-align: center; position: relative;">

            <img src="${signatureImage}" alt="Ch·ªØ k√Ω ${userName}" 

                 style="max-width: 300px; max-height: 120px; padding: 10px;

                        background: white; display: block; margin: 0 auto;"

                 onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">

            <div style="display: none; margin-top: 10px; padding: 20px; border: 3px solid #2196F3;

                        background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;

                        font-size: 24px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 8px;

                        box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

                ${signatureData.signatureText}

            </div>

        </div>`;

        // Generated image HTML

    } else {

        // Fallback to text signature

        signatureImageHTML = `<div style="margin: 15px 0; padding: 20px; border: 3px solid #2196F3;

            background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;

            font-size: 24px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 8px;

            box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

            ${signatureData.signatureText}

        </div>`;

        // Generated text fallback

    }



    const signatureId = 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

    const digitalSig = generateDigitalSignature(userName, signatureData.role || 'TRAINER', timestamp);



    return `<div class="signature-display" style="border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; background: #f9f9f9;">

        <div style="display: flex; align-items: center; margin-bottom: 15px;">

            <span style="font-size: 24px; margin-right: 10px;">‚úÖ</span>

            <strong style="font-size: 18px; color: #2e7d32;">${userName}</strong>

        </div>

        ${signatureImageHTML}

        <div style="margin-top: 15px; padding: 12px; background: #e8f5e8; border-left: 4px solid #4caf50; border-radius: 4px;">

            <div style="font-size: 14px; color: #2e7d32; margin-bottom: 8px;">

                <strong>üìÖ K√Ω ng√†y:</strong> ${formatDateToDDMMYYYY(timestamp, true)}

            </div>

            <div style="font-size: 14px; color: #2e7d32; margin-bottom: 8px;">

                <strong>üÜî ID:</strong> ${signatureId}

            </div>

            <div style="font-size: 12px; color: #666; font-family: monospace; word-break: break-all;">

                <strong>üìù Ch·ªØ k√Ω s·ªë:</strong> ${digitalSig}

            </div>

        </div>

    </div>`;

}



// ===== TH√äM PH·∫¶N PH√ÇN QUY·ªÄN V√Ä DASHBOARD CONNECTION =====



let currentUserRole = 'GUEST'; // TRAINER, MANAGER, ADMIN

let currentUserName = '';

let currentUserId = null; // Store current user ID for API calls

let currentUserAssignedDogs = [];

let isDashboardConnected = false;



// S·ª¨A: Kh·ªüi t·∫°o users m·∫∑c ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c√≥ data - FIX HO√ÄNG TR·ªåNG QU·ª≤NH




// X·ª≠ l√Ω URL parameters khi m·ªü t·ª´ Dashboard

function handleURLParameters() {

    const urlParams = new URLSearchParams(window.location.search);

    const user = urlParams.get('user');

    const role = urlParams.get('role');

    const assignedDogs = urlParams.get('dogs');

    const journalKey = urlParams.get('journalKey');

    const viewMode = urlParams.get('view');



    // X·ª¨ L√ù XEM JOURNAL T·ª™ DASHBOARD

    if (journalKey && viewMode === 'journal') {

        // Auto login as admin ƒë·ªÉ xem journal

        currentUserRole = 'ADMIN';

        currentUserName = 'Dashboard Viewer';

        currentUserAssignedDogs = ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'];

        isDashboardConnected = true;

        autoLogin();

        setTimeout(() => {

            showA4JournalViewFromKey(journalKey);

        }, 500);

        return true;

    }



    if (user && role) {

        currentUserName = decodeURIComponent(user);

        currentUserRole = role.toUpperCase();

        currentUserAssignedDogs = assignedDogs ? decodeURIComponent(assignedDogs).split(',') : [];

        isDashboardConnected = true;

        autoLogin();

        return true;

    }



    return false;

}



// Auto login khi ƒë∆∞·ª£c m·ªü t·ª´ Dashboard

async function autoLogin() {

    document.getElementById('loginPage').classList.add('hidden');

    document.getElementById('mainApp').classList.remove('hidden');

    showDashboardBanner();

    applyRoleBasedRestrictions();

    refreshDynamicMenus();

    showDefaultImage();

    await updateUserDisplay();

}



// ===== S·ª¨A L·ªñI LOGOUT - ƒê√ìNG T·∫§T C·∫¢ DROPDOWN V√Ä RESET UI =====

function closeAllDropdowns() {

    // ƒê√≥ng user dropdown

    const userDropdown = document.getElementById('dynamicUserDropdown');

    if (userDropdown) {

        userDropdown.remove();

    }



    // ƒê√≥ng t·∫•t c·∫£ custom dropdowns

    document.querySelectorAll('.custom-dropdown-options').forEach(dropdown => {

        dropdown.classList.add('hidden');

    });



    // ƒê√≥ng food dropdowns

    document.querySelectorAll('.custom-food-select-wrapper .custom-dropdown-options').forEach(dropdown => {

        dropdown.classList.add('hidden');

    });



    // Closed all dropdowns

}



// ===== GI·∫¢I PH√ÅP CU·ªêI C√ôNG - THAY TH·∫æ H√ÄM updateUserDisplay() - S·ª¨A: FIX T√äN HI·ªÇN TH·ªä HO√ÄNG TR·ªåNG QU·ª≤NH =====

async function updateUserDisplay() {
    const userInfoDisplay = document.getElementById('userInfoDisplay');
    const userInitials = document.getElementById('userInitials');

    if (currentUserName && currentUserRole !== 'GUEST') {
        if (!userInfoDisplay || !userInitials) {
            // User display elements not found
            return;
        }

        // Get user information from database (no localStorage)
        let displayName = currentUserName;

        try {
            // Fetch user data from database API
            const response = await fetch('/api/users', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                const users = data.data || [];

                // Find current user by name or username
                const currentUser = users.find(u => u.name === currentUserName || u.username === currentUserName);

                if (currentUser) {
                    displayName = currentUser.name; // S·ª≠ d·ª•ng t√™n t·ª´ database
                    // Updated display name from database
                } else {
                    // User not found in database
                }
            } else {
                // Failed to fetch users from database
            }
        } catch (error) {
            // Using current name as fallback
        }


        // Hi·ªÉn th·ªã t√™n ƒë·∫ßy ƒë·ªß trong khung √¥ m√†u xanh
        userInitials.textContent = displayName;
        userInitials.style.cssText = 'background: #4CAF50; color: white; cursor: pointer; padding: 8px 15px; border-radius: 5px; font-size: 14px; font-weight: bold; border: none; outline: none; white-space: nowrap; min-width: 150px; text-align: center; display: block;';

        // X√ìA dropdown c≈© n·∫øu c√≥
        const oldDropdown = document.getElementById('userDropdown');
        if (oldDropdown) {
            oldDropdown.remove();
        }

        // T√çNH TO√ÅN V·ªä TR√ç CH√çNH X√ÅC C·ª¶A N√öT USER
        userInitials.onclick = function (e) {
            e.stopPropagation();

            // X√≥a dropdown c≈©
            const existingDropdown = document.getElementById('dynamicUserDropdown');
            if (existingDropdown) {
                existingDropdown.remove();
                return;
            }

            // T√çNH TO√ÅN V·ªä TR√ç TH·ª∞C C·ª¶A N√öT USER BUTTON
            const rect = userInitials.getBoundingClientRect();
            const dropdownTop = rect.bottom + 8; // Ngay d∆∞·ªõi n√∫t user + 8px
            const dropdownRight = window.innerWidth - rect.right; // CƒÉn ph·∫£i theo n√∫t user

            // T·∫°o dropdown m·ªõi v·ªõi v·ªã tr√≠ ch√≠nh x√°c v√† z-index cao
            const dropdown = document.createElement('div');
            dropdown.id = 'dynamicUserDropdown';
            dropdown.style.cssText = 'position: fixed; top: ' + dropdownTop + 'px; right: ' + dropdownRight + 'px; background: white; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 8px 25px rgba(0,0,0,0.3); padding: 0; min-width: 280px; z-index: 999999; font-family: Arial, sans-serif;';

            dropdown.innerHTML = '<div style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;"><div style="font-weight: bold; font-size: 16px; margin-bottom: 5px;">' + displayName + '</div><div style="font-size: 14px; opacity: 0.9;">HLV - H·∫£i quan c·ª≠a kh·∫©u qu·ªëc t·∫ø M√≥ng C√°i</div></div><div style="padding: 15px;"><div class="dropdown-item" onclick="showDashboardConnection()" style="display: flex; align-items: center; gap: 10px; padding: 12px; cursor: pointer; border-radius: 6px; transition: background 0.2s;"><span>üìä</span><span>Dashboard</span></div><div class="dropdown-item" onclick="logout()" style="display: flex; align-items: center; gap: 10px; padding: 12px; cursor: pointer; border-radius: 6px; transition: background 0.2s; color: #f44336; border-top: 1px solid #eee; margin-top: 10px;"><span>üö™</span><span>ƒêƒÉng xu·∫•t</span></div></div>';

            // Th√™m hover effects
            const items = dropdown.querySelectorAll('.dropdown-item');
            items.forEach(item => {
                item.addEventListener('mouseenter', () => {
                    item.style.background = '#f8f9fa';
                });
                item.addEventListener('mouseleave', () => {
                    item.style.background = 'transparent';
                });
            });

            // Th√™m v√†o body
            document.body.appendChild(dropdown);

            // ƒê√≥ng dropdown khi click b√™n ngo√†i
            setTimeout(() => {
                document.addEventListener('click', function closeDropdown(e) {
                    if (!dropdown.contains(e.target)) {
                        dropdown.remove();
                        document.removeEventListener('click', closeDropdown);
                    }
                });
            }, 100);
        };

        userInfoDisplay.style.display = 'inline-block';
        userInfoDisplay.style.position = 'relative';

        // S·ª¨A: C·∫≠p nh·∫≠t currentUserName v·ªõi t√™n ch√≠nh x√°c - HO√ÄNG TR·ªåNG QU·ª≤NH
        currentUserName = displayName;

        // Updated user display
    } else {
        if (userInfoDisplay) {
            userInfoDisplay.style.display = 'none';
        }
    }
}

// ===== END OF updateUserDisplay FUNCTION =====


// Hi·ªÉn th·ªã banner k·∫øt n·ªëi Dashboard

function showDashboardBanner() {
    const banner = document.getElementById('dashboardBanner');
    const connectedUser = document.getElementById('connectedUser');
    const userRole = document.getElementById('userRole');

    if (banner && connectedUser && userRole) {
        connectedUser.textContent = currentUserName || 'Unknown User';
        userRole.textContent = currentUserRole || 'GUEST';
        banner.style.display = 'block';
    }
}

// Function refresh dashboard data

function refreshDashboardData() {
    if (confirm('C·∫≠p nh·∫≠t d·ªØ li·ªáu v·ªõi Dashboard?')) {
        if (window.opener) {
            window.opener.postMessage({
                type: 'K9_DATA_UPDATE',
                data: {
                    currentUser: currentUserName,
                    role: currentUserRole,
                    assignedDogs: currentUserAssignedDogs
                }
            }, '*');
        }

        refreshDynamicMenus();
        alert('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!');
    }
}

// √Åp d·ª•ng ph√¢n quy·ªÅn theo role v·ªõi ƒë·ªìng b·ªô dashboard

// This function is replaced by the more comprehensive version below

// Manager access restrictions



// S·ª¨A: Function toggle user dropdown

function toggleUserDropdown(e) {
    // Toggle user dropdown
    e.stopPropagation();

    const dropdown = document.getElementById('userDropdown');
    // Dropdown element found

    if (dropdown) {
        // Current dropdown classes
        dropdown.classList.toggle('hidden');
        // After toggle, dropdown classes

        // Temporary fix: force visibility with inline styles
        if (!dropdown.classList.contains('hidden')) {
            dropdown.style.display = 'block';
            dropdown.style.visibility = 'visible';
            dropdown.style.opacity = '1';
            dropdown.style.zIndex = '99999';
            dropdown.style.position = 'absolute';
            dropdown.style.top = '100%';
            dropdown.style.right = '0';
            dropdown.style.backgroundColor = 'white';
            dropdown.style.border = '2px solid red'; // Temporary visual indicator
            // Applied temporary visibility fix
        }

        // Debug positioning and visibility
        const rect = dropdown.getBoundingClientRect();
        // Dropdown position debug info available

        // Check computed styles
        const computedStyle = window.getComputedStyle(dropdown);
        // Computed styles debug info available
    } else {
    }
}



// Close dropdown khi click outside - S·ª¨A: Th√™m cleanup cho t·∫•t c·∫£ dropdowns

document.addEventListener('click', (e) => {

    // Close user dropdown

    const dropdown = document.getElementById('userDropdown');

    if (dropdown && !e.target.closest('#userInfoDisplay')) {

        dropdown.classList.add('hidden');

    }



    // Close dynamic user dropdown

    const dynamicDropdown = document.getElementById('dynamicUserDropdown');

    if (dynamicDropdown && !e.target.closest('#userInitials')) {

        dynamicDropdown.remove();

    }



    // Close all custom dropdowns

    if (!e.target.closest('.custom-dropdown-trigger')) {

        document.querySelectorAll('.custom-dropdown-options').forEach(dropdown => {

            dropdown.classList.add('hidden');

        });

    }

});



// Hi·ªÉn th·ªã banner k·∫øt n·ªëi Dashboard

function showDashboardBanner() {

    const banner = document.getElementById('dashboardBanner');

    const connectedUser = document.getElementById('connectedUser');

    const userRole = document.getElementById('userRole');

    const mainApp = document.getElementById('mainApp');



    if (banner && connectedUser && userRole) {

        banner.style.display = 'block';

        connectedUser.textContent = currentUserName;

        userRole.textContent = currentUserRole;

        userRole.className = 'role-indicator role-' + currentUserRole.toLowerCase();

        mainApp.classList.add('with-banner');



        // Th√™m n√∫t refresh dashboard

        if (!document.getElementById('refreshDashboardBtn')) {

            const refreshBtn = document.createElement('button');

            refreshBtn.id = 'refreshDashboardBtn';

            refreshBtn.innerHTML = 'üîÑ C·∫≠p nh·∫≠t Dashboard';

            refreshBtn.style.cssText = 'background: #2196F3; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; margin-left: 10px;';

            refreshBtn.onclick = refreshDashboardData;

            banner.appendChild(refreshBtn);

        }

    }

}



// Function refresh dashboard data

function refreshDashboardData() {

    if (confirm('C·∫≠p nh·∫≠t d·ªØ li·ªáu v·ªõi Dashboard?')) {

        if (window.opener) {

            window.opener.postMessage({

                type: 'REFRESH_DASHBOARD'

            }, '*');

        }

        refreshDynamicMenus();
        alert('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!');

    }

}



// √Åp d·ª•ng ph√¢n quy·ªÅn theo role v·ªõi ƒë·ªìng b·ªô dashboard

function applyRoleBasedRestrictions() {

    if (currentUserRole === 'TRAINER') {

        filterDogMenuForTrainer();

        restrictTrainerAccess();

    } else if (currentUserRole === 'MANAGER') {

        setupManagerView();

        restrictManagerAccess();

        // Show care plan menu for Manager
        const carePlanMenu = document.getElementById('care-plan-menu');
        if (carePlanMenu) {
            carePlanMenu.style.display = 'block';
        }

    } else if (currentUserRole === 'ADMIN') {

        // Show care plan menu for Admin as well
        const carePlanMenu = document.getElementById('care-plan-menu');
        if (carePlanMenu) {
            carePlanMenu.style.display = 'block';
        }

    } else if (currentUserRole === 'TRAINER') {

        // Show care plan menu for Trainer (read-only access)
        const carePlanMenu = document.getElementById('care-plan-menu');
        if (carePlanMenu) {
            carePlanMenu.style.display = 'block';
        }

    } else {

        // Hide care plan menu for other roles (Guest, etc.)
        const carePlanMenu = document.getElementById('care-plan-menu');
        if (carePlanMenu) {
            carePlanMenu.style.display = 'none';
        }
    }

    refreshDynamicMenus();

}

// Fallback function to ensure care plan menu is shown for authorized roles
function ensureCarePlanMenuVisibility() {

    if (currentUserRole === 'TRAINER' || currentUserRole === 'MANAGER' || currentUserRole === 'ADMIN') {
        const carePlanMenu = document.getElementById('care-plan-menu');
        if (carePlanMenu) {
            carePlanMenu.style.display = 'block';
        }
    }
}

// H·∫°n ch·∫ø Manager - ch·ªâ duy·ªát nh·∫≠t k√Ω

function restrictManagerAccess() {

    const createJournalButtons = document.querySelectorAll('.btn-create-new-journal');

    createJournalButtons.forEach(btn => {

        btn.style.display = 'none';

    });



    const journalSubMenu = document.getElementById('journal-sub-menu');

    if (journalSubMenu) {

        journalSubMenu.innerHTML = '<li class="sub-item manager-notice" style="color: orange; font-style: italic; padding: 10px;">üëÅÔ∏è Ch·∫ø ƒë·ªô duy·ªát - B·∫°n ch·ªâ c√≥ th·ªÉ xem v√† duy·ªát nh·∫≠t k√Ω</li>';

    }



    // Manager access restricted

}



// Function refreshDynamicMenus ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi dashboard

async function refreshDynamicMenus() {
    let userDogs = [];

    // Try to fetch assigned dogs from database if user ID is available
    if (currentUserId) {
        try {
            const response = await fetch(`/api/users/${currentUserId}/dogs`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    // Convert database dogs to expected format
                    userDogs = data.data.map(dog => ({ name: dog.name, id: dog.id }));
                } else {
                    userDogs = currentUserAssignedDogs.map(dogName => ({ name: dogName }));
                }
            } else {
                userDogs = currentUserAssignedDogs.map(dogName => ({ name: dogName }));
            }
        } catch (error) {
            // Fallback to currentUserAssignedDogs
            userDogs = currentUserAssignedDogs.map(dogName => ({ name: dogName }));
        }
    } else {
        // Fallback to currentUserAssignedDogs if no user ID
        userDogs = currentUserAssignedDogs.map(dogName => ({ name: dogName }));
    }

    // Refreshing dynamic menus

    updateDogSubMenu(userDogs);

    if (currentUserRole !== 'MANAGER') {
        updateJournalSubMenu(userDogs);
    }

}



// Function c·∫≠p nh·∫≠t dog sub-menu ƒë·ªông THEO DASHBOARD DATA

function updateDogSubMenu(dashboardDogs) {

    const dogMenu = document.getElementById('dog-sub-menu');

    if (!dogMenu) return;



    // Clear existing menu items (except any add button)
    dogMenu.querySelectorAll('li').forEach(item => {

        if (!item.textContent.includes('‚ûï')) {

            item.remove();

        }

    });



    // Find the add new button if it exists
    const addNewButton = dogMenu.querySelector('li:last-child');



    dashboardDogs.forEach(dog => {

        // Since dashboardDogs now comes from database assignment, 
        // we don't need to check currentUserAssignedDogs anymore
        const li = document.createElement('li');

        li.innerHTML = 'üê∂' + dog.name;

        li.onclick = () => showDogProfileForm(dog.name);

        if (addNewButton) {

            dogMenu.insertBefore(li, addNewButton);

        } else {

            dogMenu.appendChild(li);

        }

    });



    // Updated dog sub-menu

}



// Function c·∫≠p nh·∫≠t journal sub-menu ƒë·ªông THEO DASHBOARD DATA - S·ª¨A: MANAGER WORKFLOW

async function updateJournalSubMenu(dashboardDogs) {

    const journalMenu = document.getElementById('journal-sub-menu');

    if (!journalMenu) return;



    // Updating journal sub-menu

    // Current user name



    if (currentUserRole === 'MANAGER') {

        // S·ª¨A: Manager menu v·ªõi ki·ªÉm tra pending journals

        let actualPendingCount = 0;

        try {
            // Get pending journals from database
            const response = await fetch('/api/journals/pending');
            if (response.ok) {
                const data = await response.json();
                actualPendingCount = data.data ? data.data.length : 0;
            } else {
                throw new Error('Database request failed');
            }
        } catch (error) {
            actualPendingCount = 0;
        }



        // Pending journals count



        journalMenu.innerHTML = `<li class="sub-item manager-approval" onclick="showAllPendingJournalsForManager()" style="color: #ff9800; font-weight: bold; cursor: pointer; padding: 12px; border-radius: 5px; background: linear-gradient(135deg, #fff3e0, #ffe0b2); border: 1px solid #ff9800; margin: 5px 0;">üìã Duy·ªát nh·∫≠t k√Ω ch·ªù ph√™ duy·ªát (${actualPendingCount})</li><li class="sub-item manager-journal-view" onclick="showManagerJournalView()" style="color: #2196F3; cursor: pointer; padding: 10px; border-radius: 5px; background: #e3f2fd; border: 1px solid #2196F3; margin: 5px 0;">üìñ S·ªï nh·∫≠t k√Ω hu·∫•n luy·ªán</li><li class="sub-item manager-stats" onclick="showManagerStatistics()" style="color: #9c27b0; cursor: pointer; padding: 10px; border-radius: 5px; background: #f3e5f5; border: 1px solid #9c27b0; margin: 5px 0;">üìä Th·ªëng k√™ t·ªïng quan</li>`;



        // Set manager-specific journal menu

        return;

    }



    // Cho TRAINER v√† ADMIN: hi·ªÉn th·ªã menu t·∫°o nh·∫≠t k√Ω theo ch√≥

    journalMenu.innerHTML = '';



    dashboardDogs.forEach(dog => {

        // Since dashboardDogs now comes from database assignment, 
        // we don't need to check currentUserAssignedDogs anymore
        const li = document.createElement('li');

        li.className = 'sub-item';

        li.textContent = dog.name;

        li.onclick = () => showJournalEditForm(dog.name);

        journalMenu.appendChild(li);

    });



    // Updated journal sub-menu

}



// L·ªçc menu ch√≥ cho Trainer

function filterDogMenuForTrainer() {

    const dogMenu = document.getElementById('dog-sub-menu');

    const journalMenu = document.getElementById('journal-sub-menu');



    if (currentUserAssignedDogs.length > 0) {

        if (dogMenu) {

            dogMenu.querySelectorAll('.sub-item').forEach(item => {

                const dogName = item.textContent.replace('üê∂', '').replace('‚ûï Th√™m ch√≥ m·ªõi', '').trim();

                if (!currentUserAssignedDogs.includes(dogName) && !item.textContent.includes('‚ûï')) {

                    item.style.display = 'none';

                }

            });

        }



        if (journalMenu) {

            journalMenu.querySelectorAll('.sub-item').forEach(item => {

                const dogName = item.textContent.trim();

                if (!currentUserAssignedDogs.includes(dogName)) {

                    item.style.display = 'none';

                }

            });

        }

    }

}



// H·∫°n ch·∫ø quy·ªÅn truy c·∫≠p cho Trainer

function restrictTrainerAccess() {

    const restrictedSections = document.querySelectorAll('[onclick*="Th√™m ch√≥ m·ªõi"]');

    restrictedSections.forEach(section => {

        section.classList.add('trainer-restricted');

    });

}



// Thi·∫øt l·∫≠p view cho Manager

function setupManagerView() {

    // Manager t·∫≠p trung v√†o vi·ªác duy·ªát nh·∫≠t k√Ω

}



// H√†m m·ªü Dashboard connection

function showDashboardConnection() {

    if (isDashboardConnected) {

        returnToDashboard();

    } else {

        window.open('dashboard_complete.html', '_blank');

    }

}



// Tr·ªü v·ªÅ Dashboard

function returnToDashboard() {

    if (confirm('B·∫°n c√≥ mu·ªën quay v·ªÅ Dashboard kh√¥ng?')) {

        if (window.opener) {

            window.close();

        } else {

            window.location.href = 'dashboard_complete.html';

        }

    }

}



// Global variable to track the currently selected dog for the journal

let currentDogForJournal = '';

let blockCounter = 0;

let trainingSessionCounter = 0;

let operationSessionCounter = 0;



// Dummy data for Trainer (HLV) and Dogs

// HLV info now managed through current user session
let hlvInfo = {
    name: 'Unknown User',
    id: 'HLV001',
    image: 'images/hlv_tran_duc_kien.jpg'
};



// Dog profiles data - will be fetched from database
let dogProfiles = {};



// Define drug types, food types, health manifestations, operation locations

const DRUG_TYPES = ['C·∫ßn sa', 'Heroin', 'Cocain', 'MDMA', 'Methamfetamin', 'Kh√°c'];

const HEALTH_MANIFESTATIONS = ['C√†o', 'S·ªßa', 'N·∫Øm', 'Ng·ªìi', 'Kh√°c'];

const FOOD_TYPES = ['C∆°m', 'Th·ªãt', 'Rau', 'Tr·ª©ng', 'S·ªØa', 'H·∫°t', 'Kh√°c'];

const OPERATION_LOCATIONS = ['C·ª¨A KH·∫®U B·∫ÆC LU√ÇN I', 'B√ÉI KI·ªÇM TRA H√ÄNG H√ìA B·∫ÆC LU√ÇN II', 'C·∫¢NG ICD TH√ÄNH ƒê·∫†T KM 3+4'];



// Function to hide all main content sections

function hideAllContentSections() {

    document.getElementById('content').style.display = 'none';

    document.getElementById('searchResults').style.display = 'none';

}



// Function to show the login page

function showLoginPage() {

    document.getElementById('loginPage').classList.remove('hidden');

    document.getElementById('mainApp').classList.add('hidden');



    const userInfoDisplay = document.getElementById('userInfoDisplay');

    if (userInfoDisplay) {

        userInfoDisplay.style.display = 'none';

    }

}



// S·ª¨A QUAN TR·ªåNG: Function to handle login - FIX AUTHENTICATION HO√ÄN TO√ÄN - HO√ÄNG TR·ªåNG QU·ª≤NH

async function login() {

    const username = document.getElementById('username').value;

    const password = document.getElementById('password').value;



    // Attempting login

    // Authenticate user via API
    try {
        // Making API request
        const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                username: username,
                password: password,
                remember_me: false
            })
        });

        // Response received

        if (response.ok) {
            const data = await response.json();
            if (data.success && data.data) {
                const user = data.data;
                // Authentication successful
                // Full user data from API

                currentUserRole = user.role;
                currentUserName = user.name;
                currentUserId = user.id; // Store user ID for API calls
                currentUserAssignedDogs = user.assignedDogs || [];

                // Set currentUserName
                // Set currentUserRole

                // Assigned dogs for user

                // Update HLV info
                hlvInfo.name = user.name;
                // Updated hlvInfo.name

                showMainApp();
                return;
            } else {
                // Authentication failed
                alert('T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.');
                return;
            }
        } else {
            const errorData = await response.json();
            // Authentication failed
            alert('T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.');
            return;
        }
    } catch (error) {
        // Error during authentication
        // Error type
        // Error message
        // Error stack
        alert('L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau. Chi ti·∫øt: ' + error.message);
        return;
    }

}



// Function to toggle password visibility

function togglePasswordVisibility() {

    const passwordInput = document.getElementById('password');

    const toggleSpan = document.querySelector('.password-toggle');



    if (passwordInput.type === 'password') {

        passwordInput.type = 'text';

        toggleSpan.innerText = 'üôà';

    } else {

        passwordInput.type = 'password';

        toggleSpan.innerText = 'üëÅÔ∏è';

    }

}



// Function to show the main application

async function showMainApp() {

    document.getElementById('loginPage').classList.add('hidden');

    document.getElementById('mainApp').classList.remove('hidden');



    setTimeout(async () => {

        applyRoleBasedRestrictions();

        refreshDynamicMenus();

        await updateUserDisplay();

        // Ensure care plan menu visibility as fallback
        ensureCarePlanMenuVisibility();



        // S·ª¨A: Force update journal menu cho Manager

        if (currentUserRole === 'MANAGER') {

            updateJournalSubMenuForManager();

        }

    }, 100);



    showDefaultImage();

}



// S·ª¨A L·ªñI LOGOUT: Function to handle logout - ƒê√ìNG T·∫§T C·∫¢ DROPDOWN V√Ä RESET HO√ÄN TO√ÄN

function logout() {

    // Logout initiated



    // S·ª¨A: ƒê√≥ng t·∫•t c·∫£ dropdown tr∆∞·ªõc khi logout

    closeAllDropdowns();



    const banner = document.getElementById('dashboardBanner');

    if (banner && banner.style.display !== 'none') {

        if (confirm('B·∫°n c√≥ mu·ªën tr·ªü v·ªÅ Dashboard kh√¥ng?')) {

            returnToDashboard();

            return;

        }

    }



    // S·ª¨A: Reset t·∫•t c·∫£ bi·∫øn global

    currentUserRole = 'GUEST';

    currentUserName = '';

    currentUserId = null;

    currentUserAssignedDogs = [];

    isDashboardConnected = false;



    // S·ª¨A: ·∫®n banner dashboard

    if (document.getElementById('dashboardBanner')) {

        document.getElementById('dashboardBanner').style.display = 'none';

    }



    // S·ª¨A: Reset CSS class c·ªßa mainApp

    const mainApp = document.getElementById('mainApp');

    if (mainApp) {

        mainApp.classList.remove('with-banner');

    }



    // S·ª¨A: ·∫®n ho√†n to√†n user info display

    const userInfoDisplay = document.getElementById('userInfoDisplay');

    if (userInfoDisplay) {

        userInfoDisplay.style.display = 'none';

    }



    // S·ª¨A: Reset user initials

    const userInitials = document.getElementById('userInitials');

    if (userInitials) {

        userInitials.textContent = '';

        userInitials.onclick = null; // Remove click handler

        userInitials.style.display = 'none';

    }



    // S·ª¨A: Clear input fields

    const usernameField = document.getElementById('username');

    const passwordField = document.getElementById('password');

    if (usernameField) usernameField.value = '';

    if (passwordField) passwordField.value = '';



    // Logout completed

    showLoginPage();

    // Reload the page to ensure complete reset
    location.reload();

}



// Function to display a default image

function showDefaultImage() {

    hideAllContentSections();

    document.getElementById('toggleReadButton').style.display = 'none';



    const title = document.getElementById('title');

    const content = document.getElementById('content');



    title.innerText = 'PH·∫¶N M·ªÄM QU·∫¢N L√ù, THEO D√ïI CH√ì NGHI·ªÜP V·ª§';

    content.style.display = 'flex';

    content.style.justifyContent = 'center';

    content.style.alignItems = 'center';

    content.style.height = 'calc(100vh - 100px)';



    content.innerHTML = '<img src="images/my_welcome_image.jpg" alt="Ch√†o m·ª´ng ƒë·∫øn v·ªõi ph·∫ßn m·ªÅm qu·∫£n l√Ω, theo d√µi ch√≥ nhi·ªáp v·ª•v·ª•" style="max-width: 100%; max-height: 100%; object-fit: fill;">';

}



// Function showA4JournalViewFromKey ƒë·ªÉ xem journal t·ª´ Dashboard - S·ª¨A: FORCE PDF VIEW

async function showA4JournalViewFromKey(journalKey) {

    try {
        // Extract dog name, date, and ID from journal key
        const keyParts = journalKey.replace('journal_', '').split('_');
        const dogName = keyParts[0];

        // Handle both old format (dogName_date) and new format (dogName_date_id)
        let date, journalId = null;
        if (keyParts.length >= 3) {
            // New format: dogName_date_id
            journalId = keyParts[keyParts.length - 1];
            date = keyParts.slice(1, -1).join('_');
        } else {
            // Old format: dogName_date
            date = keyParts.slice(1).join('_');
        }


        // Try to get journal by ID first if available, otherwise by dog+date
        let journalData = null;

        if (journalId) {
            // Try to get journal by ID first - this should be the specific journal
            try {
                const response = await fetch(`/api/journals/${journalId}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.data) {
                        journalData = convertDatabaseToFrontendFormat(data.data);
                    }
                } else {
                }
            } catch (error) {
            }
        }

        // Only try by dog+date if we couldn't get the specific journal by ID
        if (!journalData) {
            const response = await fetch(`/api/journals/by-dog-date/${encodeURIComponent(dogName)}/${date}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    journalData = convertDatabaseToFrontendFormat(data.data);
                }
            } else {
            }
        }

        if (journalData) {
            const dogName = journalData.generalInfo.dogName;
            const date = journalData.generalInfo.date;
            currentDogForJournal = dogName;


            // S·ª¨A: FORCE chuy·ªÉn sang pure PDF view ngay l·∫≠p t·ª©c
            showPureA4JournalView(dogName, date);

        } else {
            alert('Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω!');
        }

    } catch (error) {
        alert('C√≥ l·ªói khi t·∫£i nh·∫≠t k√Ω!');
    }
}



// S·ª¨A: Kh·ªüi t·∫°o khi DOM load xong v·ªõi enhanced debugging

document.addEventListener('DOMContentLoaded', () => {




    // S·ª¨A: ·∫®n n√∫t Dashboard b√™n ngo√†i navigation n·∫øu c√≥

    hideDashboardButtonFromNavigation();



    // Ki·ªÉm tra URL parameters tr∆∞·ªõc

    if (!handleURLParameters()) {

        showLoginPage();

    }



    // Add event listeners for "Enter" key press

    document.getElementById('username').addEventListener('keypress', function (event) {

        if (event.key === 'Enter') {

            login();

        }

    });



    document.getElementById('password').addEventListener('keypress', function (event) {

        if (event.key === 'Enter') {

            login();

        }

    });



    // Refresh menu khi focus window

    window.addEventListener('focus', () => {

        if (currentUserRole !== 'GUEST') {

            refreshDynamicMenus();

            // Refreshed menus on window focus

        }

    });



    // Listen cho dashboard refresh trigger

    window.addEventListener('storage', (e) => {

        if (e.key === 'dashboard_refresh_trigger') {

            if (currentUserRole !== 'GUEST') {

                refreshDynamicMenus();

                // Refreshed menus from dashboard trigger

            }

        }

    });



    // K9 Management System initialized

    // Ensure care plan menu visibility on page load
    setTimeout(() => {
        ensureCarePlanMenuVisibility();
    }, 1000);

});



// Function ƒë·ªÉ ·∫©n n√∫t Dashboard b√™n ngo√†i navigation

function hideDashboardButtonFromNavigation() {

    // T√¨m v√† ·∫©n n√∫t Dashboard standalone n·∫øu c√≥

    const dashboardButton = document.querySelector('button[onclick*="showDashboardConnection"], .dashboard-btn, #dashboardButton');

    if (dashboardButton && !dashboardButton.closest('#userDropdown')) {

        dashboardButton.style.display = 'none';

    }



    // ·∫®n t·∫•t c·∫£ c√°c n√∫t c√≥ text "Dashboard" kh√¥ng n·∫±m trong dropdown

    const allButtons = document.querySelectorAll('button');

    allButtons.forEach(btn => {

        if (btn.textContent.includes('Dashboard') && !btn.closest('#userDropdown')) {

            btn.style.display = 'none';

        }

    });

}



// S·ª¨A Z-INDEX: Function to display main content v·ªõi z-index th·∫•p h∆°n navigation

function showContent(type) {

    hideAllContentSections();

    document.getElementById('toggleReadButton').style.display = 'block';



    const content = document.getElementById('content');

    content.style.display = "block";

    content.style.justifyContent = 'flex-start';

    content.style.alignItems = 'flex-start';

    content.style.height = 'auto';

    // S·ª¨A: ƒê·∫£m b·∫£o content kh√¥ng ƒë√® l√™n navigation

    content.style.position = 'relative';

    content.style.zIndex = '1';



    const title = document.getElementById('title');



    // Hide submenus when navigating to other sections

    document.getElementById('dog-sub-menu').classList.remove('open');

    document.getElementById('journal-sub-menu').classList.remove('open');



    // Remove dynamic dog sub-items if any

    document.querySelectorAll('.sub-item-dynamic').forEach(el => el.remove());



    if (type === 'T·ªîNG QUAN') {

        title.innerText = 'T·ªîNG QUAN';

        content.innerHTML = '<p>Trong b·ªëi c·∫£nh t√¨nh h√¨nh bu√¥n l·∫≠u, v·∫≠n chuy·ªÉn tr√°i ph√©p h√†ng h√≥a, ma t√∫y v√† c√°c h√†nh vi vi ph·∫°m ph√°p lu·∫≠t qua bi√™n gi·ªõi ng√†y c√†ng di·ªÖn bi·∫øn ph·ª©c t·∫°p, tinh vi v√† c√≥ t·ªï ch·ª©c, c√¥ng t√°c ki·ªÉm so√°t, ph√°t hi·ªán, ƒë·∫•u tranh ph√≤ng ch·ªëng t·ªôi ph·∫°m ƒë·∫∑t ra nhi·ªÅu y√™u c·∫ßu, th√°ch th·ª©c m·ªõi ƒë·ªëi v·ªõi l·ª±c l∆∞·ª£ng H·∫£i quan Vi·ªát Nam. M·ªôt trong nh·ªØng bi·ªán ph√°p nghi·ªáp v·ª• quan tr·ªçng, c√≥ t√≠nh ƒë·∫∑c th√π v√† hi·ªáu qu·∫£ cao l√† s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• trong c√¥ng t√°c ki·ªÉm tra, gi√°m s√°t h·∫£i quan, ƒë·∫∑c bi·ªát trong ph√°t hi·ªán ch·∫•t ma t√∫y, h√†ng c·∫•m, v≈© kh√≠, v√† v·∫≠t ph·∫©m nguy hi·ªÉm.</p><p>Ch√≥ nghi·ªáp v·ª• kh√¥ng ch·ªâ l√† m·ªôt ph∆∞∆°ng ti·ªán k·ªπ thu·∫≠t ƒë·∫∑c bi·ªát m√† c√≤n l√† m·ªôt l·ª±c l∆∞·ª£ng h·ªó tr·ª£ tr·ª±c ti·∫øp cho c√°n b·ªô c√¥ng ch·ª©c H·∫£i quan t·∫°i c√°c c·ª≠a kh·∫©u, s√¢n bay, b·∫øn c·∫£ng, n∆°i c√≥ nguy c∆° cao v·ªÅ bu√¥n l·∫≠u v√† v·∫≠n chuy·ªÉn tr√°i ph√©p h√†ng h√≥a, ma t√∫y. Vi·ªác hu·∫•n luy·ªán, nu√¥i d∆∞·ª°ng, s·ª≠ d·ª•ng hi·ªáu qu·∫£ ch√≥ nghi·ªáp v·ª• ƒë√≤i h·ªèi s·ª± ƒë·∫ßu t∆∞ b√†i b·∫£n, khoa h·ªçc, v√† ƒë·ªôi ng≈© c√°n b·ªô hu·∫•n luy·ªán vi√™n chuy√™n tr√°ch c√≥ chuy√™n m√¥n s√¢u v√† t√¢m huy·∫øt.</p><p>Nh·∫±m h·ªá th·ªëng h√≥a c√°c quy ƒë·ªãnh, quy tr√¨nh, nghi·ªáp v·ª• li√™n quan ƒë·∫øn c√¥ng t√°c qu·∫£n l√Ω, theo d√µi ch√≥ nghi·ªáp v·ª• trong ng√†nh H·∫£i quan, H·∫£i quan c·ª≠a kh·∫©u qu·ªëc t·∫ø M√≥ng c√°i x√¢y d·ª±ng ph·∫ßn m·ªÅm qu·∫£n l√Ω, theo d√µi ch√≥ nghi·ªáp v·ª•. Ph·∫ßn m·ªÅm n√†y g·ªìm c√°c n·ªôi dung: T·ªïng quan; H·ªì s∆° qu·∫£n l√Ω ch√≥ nghi·ªáp v·ª•; Quy tr√¨nh chƒÉm s√≥c; Quy tr√¨nh s·ª≠ d·ª•ng; Quy tr√¨nh hu·∫•n luy·ªán; S·ªï nh·∫≠t k√Ω hu·∫•n luy·ªán; K·∫ø ho·∫°ch chƒÉm s√≥c, hu·∫•n luy·ªán, s·ª≠ d·ª•ng v√† c√°c video h∆∞·ªõng d·∫´n.</p><p>Ph·∫ßn m·ªÅm qu·∫£n l√Ω, theo d√µi ch√≥ nghi·ªáp v·ª• l√† t√†i li·ªáu nghi·ªáp v·ª• n·ªôi b·ªô, ph·ª•c v·ª• cho c√°n b·ªô qu·∫£n l√Ω, hu·∫•n luy·ªán vi√™n v√† c√°c ƒë∆°n v·ªã li√™n quan trong ng√†nh H·∫£i quan. Trong tr∆∞·ªùng h·ª£p c√°c vƒÉn b·∫£n ph√°p l√Ω c√≥ thay ƒë·ªïi, c√°c n·ªôi dung trong Ph·∫ßn m·ªÅm qu·∫£n l√Ω, theo d√µi ch√≥ nghi·ªáp v·ª• s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† ƒëi·ªÅu ch·ªânh cho ph√π h·ª£p.</p><p>H·∫£i quan c·ª≠a kh·∫©u qu·ªëc t·∫ø M√≥ng C√°i mong mu·ªën ti·∫øp t·ª•c nh·∫≠n ƒë∆∞·ª£c c√°c √Ω ki·∫øn ƒë√≥ng g√≥p t·ª´ c√°c chuy√™n gia, c√°n b·ªô trong v√† ngo√†i ng√†nh nh·∫±m ho√†n thi·ªán h∆°n n·ªØa h·ªá th·ªëng t√†i li·ªáu ph·ª•c v·ª• c√¥ng t√°c n√†y.</p><p><strong>Xin tr√¢n tr·ªçng c·∫£m ∆°n!</strong></p>';

    } else if (type === 'H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§') {

        title.innerText = 'H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§';

        content.innerHTML = `
            <p>Vui l√≤ng ch·ªçn t·ª´ng ch√≥ nghi·ªáp v·ª• ·ªü menu b√™n tr√°i.</p>
            <p>ƒê√¢y l√† H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§ t·ª´ c∆° s·ªü d·ªØ li·ªáu:</p>
            <div id="dogProfilesList">
                <div class="loading">ƒêang t·∫£i danh s√°ch ch√≥ nghi·ªáp v·ª•...</div>
            </div>
        `;

        // Load dogs from database only
        loadDogProfilesFromDatabase();

    } else if (type === 'QUY TR√åNH CHƒÇM S√ìC') {

        title.innerText = 'QUY TR√åNH CHƒÇM S√ìC';

        content.innerHTML = `
            <main>
            <h2>ƒêi·ªÅu 12. Nguy√™n t·∫Øc chƒÉm s√≥c, hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª•</h2>
            <ol>
                <li>Vi·ªác chƒÉm s√≥c, hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª• l√† c√¥ng vi·ªác ph·∫£i th·ª±c hi·ªán h·∫±ng ng√†y. Hu·∫•n luy·ªán vi√™n ch·ªãu tr√°ch nhi·ªám ho√†n to√†n vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe v√† hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª• do m√¨nh qu·∫£n l√Ω.</li>
                <li>Hu·∫•n luy·ªán th∆∞·ªùng xuy√™n, li√™n t·ª•c trong su·ªët qu√° tr√¨nh s·ª≠ d·ª•ng CNV.</li>
                <li>Coi tr·ªçng c·∫£ ba n·ªôi dung: hu·∫•n luy·ªán th·ªÉ l·ª±c - k·ª∑ lu·∫≠t, hu·∫•n luy·ªán c·ªßng c·ªë v√† hu·∫•n luy·ªán n√¢ng cao nƒÉng l·ª±c.</li>
                <li>Hu·∫•n luy·ªán s√°t th·ª±c t·∫ø ƒë·ªãa b√†n n∆°i c√¥ng t√°c c·ªßa hu·∫•n luy·ªán vi√™n v√† m√¥i tr∆∞·ªùng t√°c nghi·ªáp c·ªßa CNV.</li>
                <li>Quy ƒë·ªãnh n√†y kh√¥ng √°p d·ª•ng ƒë·ªëi v·ªõi hu·∫•n luy·ªán vi√™n, CNV ƒëang t·∫≠p hu·∫•n t·∫°i c√°c c∆° s·ªü hu·∫•n luy·ªán CNV.</li>
                <li>M·ªçi tr∆∞·ªùng h·ª£p CNV b·ªã b·ªánh, suy gi·∫£m s·ª©c kh·ªèe, ho·∫∑c b·ªã ch·∫øt b·ªüi y·∫øu t·ªë ch·ªß quan, thi·∫øu tr√°ch nhi·ªám; CNV b·ªã suy gi·∫£m nƒÉng l·ª±c t√°c nghi·ªáp, ho·∫∑c kh√¥ng ƒë∆∞·ª£c hu·∫•n luy·ªán v√† s·ª≠ d·ª•ng theo quy ƒë·ªãnh ƒë·ªÅu ph·∫£i ki·ªÉm ƒëi·ªÉm, xem x√©t tr√°ch nhi·ªám hu·∫•n luy·ªán vi√™n, c√°c ƒë∆°n v·ªã li√™n quan v√† ƒë∆°n v·ªã qu·∫£n l√Ω. N·∫øu c√≥ vi ph·∫°m c√°c quy ƒë·ªãnh do l·ªói ch·ªß quan th√¨ h·∫° b·∫≠c thi ƒëua, xem x√©t k·ª∑ lu·∫≠t.</li>
            </ol>

            <h2>ƒêi·ªÅu 13. Quy tr√¨nh c√¥ng t√°c chƒÉm s√≥c, hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª• h·∫±ng ng√†y c·ªßa hu·∫•n luy·ªán vi√™n v√† nh√¢n vi√™n chƒÉn nu√¥i, nh√¢n gi·ªëng</h2>

            <h3>N·ªôi dung c√¥ng vi·ªác</h3>

            <p><strong>1.1.</strong> T·ª´ khi nh·∫≠n ch√≥ nghi·ªáp v·ª• ƒë·∫øn khi th·∫£i lo·∫°i, hu·∫•n luy·ªán vi√™n, nh√¢n vi√™n nh√¢n gi·ªëng, chƒÉn nu√¥i ƒë·∫£m nhi·ªám ho√†n to√†n v√† c√≥ tr√°ch nhi·ªám th·ª±c hi·ªán ƒë√∫ng, ƒë·ªß m·ªçi quy ƒë·ªãnh v·ªÅ chƒÉm s√≥c, nu√¥i d∆∞·ª°ng, hu·∫•n luy·ªán, s·ª≠ d·ª•ng CNV. N·∫øu c√≥ vi ph·∫°m c√°c quy ƒë·ªãnh do l·ªói ch·ªß quan th√¨ ph·∫£i b·ªã h·∫° b·∫≠c thi ƒëua v√† xem x√©t k·ª∑ lu·∫≠t. K·∫øt qu·∫£ nu√¥i d∆∞·ª°ng, hu·∫•n luy·ªán, s·ª≠ d·ª•ng CNV l√† cƒÉn c·ª© quan tr·ªçng nh·∫•t ƒë√°nh gi√° k·∫øt qu·∫£ c√¥ng t√°c, b√¨nh x√©t thi ƒëua khen th∆∞·ªüng v√† k·ª∑ lu·∫≠t ƒë·ªëi v·ªõi hu·∫•n luy·ªán vi√™n.</p>

            <p>Hu·∫•n luy·ªán vi√™n v√† nh√¢n vi√™n chƒÉn nu√¥i, nh√¢n gi·ªëng c√≥ nhi·ªám v·ª• ƒë·∫£m b·∫£o kh·∫©u ph·∫ßn ƒÉn v√† ƒë·ªß n∆∞·ªõc s·∫°ch cho ch√≥ u·ªëng; ƒë·ªß thu·ªëc ph√≤ng ch·ªØa b·ªánh th√¥ng th∆∞·ªùng. D·ªçn d·∫πp v·ªá sinh chu·ªìng tr·∫°i v√† m√¥i tr∆∞·ªùng xung quanh, ƒë·∫£m b·∫£o kh√¥, tho√°ng, s·∫°ch. M√¥i tr∆∞·ªùng xung quanh ƒë·∫£m b·∫£o v·ªá sinh. ƒê·∫£m b·∫£o CNV lu√¥n kh·ªèe m·∫°nh ƒë·ªÉ hu·∫•n luy·ªán, t√°c nghi·ªáp ho·∫∑c sinh s·∫£n l√†m gi·ªëng, c·ª• th·ªÉ:</p>

            <ul>
                <li><strong>a. V·ªá sinh chu·ªìng nu√¥i:</strong>
                <ul>
                    <li>D·ªçn v·ªá sinh n·ªÅn chu·ªìng, t∆∞·ªùng, h√†ng r√†o b√™n trong chu·ªìng nu√¥i CNV;</li>
                    <li>Ki·ªÉm tra, di·ªát ve, b·ªç, k√Ω sinh tr√πng trong chu·ªìng (n·∫øu c√≥);</li>
                    <li>Qu√©t d·ªçn v·ªá sinh khu v·ª±c xung quanh chu·ªìng ch√≥;</li>
                </ul>
                </li>

                <li><strong>b. Cho ch√≥ d·∫°o ch∆°i, v·∫≠n ƒë·ªông:</strong>
                <ul>
                    <li>Th·∫£ ch√≥ ƒëi v·ªá sinh;</li>
                    <li>Cho ch√≥ v·∫≠n ƒë·ªông: ƒëi l·∫°i, ch·∫°y.</li>
                </ul>
                </li>

                <li><strong>c. Ki·ªÉm tra s·ª©c kh·ªèe:</strong>
                <ul>
                    <li>Ki·ªÉm tra kh·∫£ nƒÉng v·∫≠n ƒë·ªông c·ªßa ch√≥;</li>
                    <li>Ch·∫£i l√¥ng, ki·ªÉm tra da, l√¥ng, m·∫Øt, m≈©i, rƒÉng, mi·ªáng c·ªßa ch√≥;</li>
                    <li>Ki·ªÉm tra c√°c gi√°c quan v√† th·∫ßn kinh ch√≥: kh·ª©u gi√°c, th√≠nh gi√°c, th·ªã gi√°c; ph·∫£n x·∫°, kh·∫£ nƒÉng nh·∫≠n bi·∫øt;</li>
                    <li>Ph√°t hi·ªán k·ªãp th·ªùi c√°c bi·ªÉu hi·ªán ch√≥ b·ªã ·ªëm, suy gi·∫£m s·ª©c kh·ªèe.</li>
                </ul>
                </li>

                <li><strong>d. Cho ch√≥ ƒÉn:</strong>
                <ul>
                    <li>Quan s√°t - ki·ªÉm tra s·ª©c ƒÉn.</li>
                    <li>V·ªá sinh ch·∫≠u ƒÉn, n·ªÅn chu·ªìng v√† b·ªï sung n∆∞·ªõc u·ªëng khi ch√≥ ƒÉn xong.</li>
                </ul>
                </li>
            </ul>

            <p><strong>1.2.</strong> Hu·∫•n luy·ªán vi√™n ph·∫£i ch·∫•p h√†nh nghi√™m ch·ªânh quy ƒë·ªãnh v·ªÅ hu·∫•n luy·ªán, s·ª≠ d·ª•ng CNV bao g·ªìm:</p>

            <ul>
                <li>L·∫≠p k·∫ø ho·∫°ch hu·∫•n luy·ªán: C·ª• th·ªÉ n·ªôi dung hu·∫•n luy·ªán v·ªÅ th·ªÉ l·ª±c, k·ª∑ lu·∫≠t v√† nghi·ªáp v·ª•; th·ªùi gian v√† ƒë·ªãa ƒëi·ªÉm hu·∫•n luy·ªán. T·ªïng th·ªùi gian hu·∫•n luy·ªán h·∫±ng ng√†y kh√¥ng d∆∞·ªõi 90 ph√∫t. Ghi ch√©p ti·∫øn ƒë·ªô, n·ªôi dung v√† k·∫øt qu·∫£, ƒë·ªÅ xu·∫•t ki·∫øn ngh·ªã.</li>
                <li>X√¢y d·ª±ng v√† th·ª±c hi·ªán k·∫ø ho·∫°ch hu·∫•n luy·ªán c·ªßng c·ªë nƒÉng l·ª±c cho CNV khi ki·ªÉm tra kh√¥ng ƒë·∫°t y√™u c·∫ßu.</li>
                <li>Th·ª±c hi·ªán k·∫ø ho·∫°ch hu·∫•n luy·ªán: do hu·∫•n luy·ªán vi√™n ch·ªß ƒë·ªông th·ª±c hi·ªán ph√π h·ª£p v·ªõi th·ªùi ti·∫øt, s·ª©c kh·ªèe v√† m√¥i tr∆∞·ªùng luy·ªán t·∫≠p.</li>
                <li>Hu·∫•n luy·ªán th∆∞·ªùng xuy√™n, c·ªßng c·ªë nƒÉng l·ª±c cho CNV. Y√™u c·∫ßu CNV kh√¥ng suy gi·∫£m th·ªÉ l·ª±c, c√≥ ti·∫øn b·ªô v·ªÅ nƒÉng l·ª±c so v·ªõi khi t·ªët nghi·ªáp.</li>
                <li>Hu·∫•n luy·ªán n√¢ng cao t·∫°i m√¥i tr∆∞·ªùng c√¥ng t√°c. Y√™u c·∫ßu CNV th√≠ch nghi m√¥i tr∆∞·ªùng t√°c nghi·ªáp, h∆∞ng ph·∫•n khi ho·∫°t ƒë·ªông, ph√°t hi·ªán c√°c m·∫´u ma t√∫y gi·∫•u ch·ªó kh√≥ t√¨m, c√≥ m√πi ng·ª•y trang, c√≥ ƒë·ªô khuy·∫øch t√°n th·∫•p.</li>
                <li>Hu·∫•n luy·ªán ch√≥ ph√°t hi·ªán ma t√∫y (hu·∫•n luy·ªán c·ªßng c·ªë v√† hu·∫•n luy·ªán n√¢ng cao): m·ªói CNV ph·∫£i ƒë∆∞·ª£c t·∫≠p luy·ªán t·ªëi thi·ªÉu 03 l·∫ßn, m·ªói l·∫ßn t·ªëi thi·ªÉu 10 ph√∫t trong m·ªôt bu·ªïi t·∫≠p.</li>
                <li>Hu·∫•n luy·ªán c√°c ƒë·ªông t√°c c∆° b·∫£n: th·ª±c hi·ªán 02 l∆∞·ª£t c√°c ƒë·ªông t√°c c∆° b·∫£n v√† th·ªÉ l·ª±c nh∆∞: ƒëi, ƒë·ª©ng, n·∫±m, ng·ªìi, v·ªÅ ch·ªó, c·∫Øp v·∫≠t...</li>
                <li>C·∫≠p nh·∫≠t, ghi ch√©p ƒë·∫ßy ƒë·ªß v√†o S·ªï nh·∫≠t k√Ω, c·∫•m h·ªìi k√Ω. (c√≥ x√°c nh·∫≠n c·ªßa l√£nh ƒë·∫°o ph·ª• tr√°ch).</li>
                <li>ƒê·ªëi v·ªõi CNV kh√¥ng ƒë·∫°t y√™u c·∫ßu hu·∫•n luy·ªán vi√™n kh√¥ng ƒë·∫°t danh hi·ªáu ho√†n th√†nh nhi·ªám v·ª• ƒë∆∞·ª£c ph√¢n c√¥ng.</li>
                <li>Khi s·ª≠ d·ª•ng CNV: Hu·∫•n luy·ªán vi√™n v√† CNV c√≥ m·∫∑t ƒë√∫ng gi·ªù, v·ªõi trang b·ªã ƒë·∫ßy ƒë·ªß, s·∫µn s√†ng th·ª±c hi·ªán theo m·ªánh l·ªánh c·ªßa c√°n b·ªô l√£nh ƒë·∫°o t·∫°i hi·ªán tr∆∞·ªùng, s·ª≠ d·ª•ng CNV theo c√°c quy tr√¨nh do T·ªïng c·ª•c ban h√†nh.</li>
                <li>Chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß d·ª•ng c·ª•, trang thi·∫øt b·ªã hu·∫•n luy·ªán: M·∫´u t·∫≠p; Trang thi·∫øt b·ªã chuy√™n d·ª•ng: panh t·∫≠p, gƒÉng tay, d√¢y c∆∞∆°ng, r·ªç m√µm, c·ªï d·ªÅ, v·∫≠t th∆∞·ªüng; C√°c v·∫≠t d·ª•ng kh√°c t√πy theo n·ªôi dung t·∫≠p luy·ªán: va ly, th√πng carton...</li>
            </ul>

            <p><strong>1.3.</strong> Hu·∫•n luy·ªán vi√™n ph·∫£i l·∫≠p v√† th·ª±c hi·ªán th·ªùi gian bi·ªÉu c√¥ng vi·ªác h·∫±ng ng√†y, ghi ch√©p n·ªôi dung, k·∫øt qu·∫£ c√¥ng t√°c v√† ki·∫øn ngh·ªã n·∫øu c√≥ v√†o S·ªï nh·∫≠t k√Ω:</p>
            <ul>
                <li>C√¥ng vi·ªác chƒÉm s√≥c nu√¥i d∆∞·ª°ng.</li>
                <li>N·ªôi dung, ph∆∞∆°ng ph√°p, th·ªùi gian, ƒë·ªãa ƒëi·ªÉm hu·∫•n luy·ªán v·ªÅ th·ªÉ l·ª±c v√† nghi·ªáp v·ª• cho CNV.</li>
                <li>Di·ªÖn bi·∫øn v√† k·∫øt qu·∫£ s·ª≠ d·ª•ng CNV t√°c nghi·ªáp.</li>
            </ul>

            <h3>2. Th·ªùi gian bi·ªÉu th·ª±c hi·ªán:</h3>
            <ul>
                <li>V·ªá sinh chu·ªìng tr·∫°i: v√†o ƒë·∫ßu gi·ªù s√°ng tr∆∞·ªõc khi l√†m vi·ªác v√† cu·ªëi bu·ªïi chi·ªÅu khi k·∫øt th√∫c ng√†y l√†m vi·ªác, c·ª• th·ªÉ: 07h00‚Äô - 07h20‚Äô v√† 16h45‚Äô - 17h00‚Äô;</li>
                <li>Cho ch√≥ d·∫°o ch∆°i, v·∫≠n ƒë·ªông v√† ki·ªÉm tra s·ª©c kh·ªèe ch√≥: 07h20‚Äô - 07h45‚Äô;</li>
                <li>Chu·∫©n b·ªã d·ª•ng c·ª•, trang b·ªã hu·∫•n luy·ªán: 07h45‚Äô - 08h00‚Äô, 13h45‚Äô - 14h00‚Äô;</li>
                <li>Hu·∫•n luy·ªán CNV: t·ª´ 08h00‚Äô ƒë·∫øn 09h00‚Äô; 14h00‚Äô - 15h00‚Äô;</li>
                <li>Cho ch√≥ ƒÉn: 10h30‚Äô - 11h00‚Äô v√† 16h30‚Äô - 17h00‚Äô.</li>
            </ul>

            <p>N·∫øu do c√¥ng vi·ªác ho·∫∑c th·ªùi ti·∫øt b·∫•t th∆∞·ªùng kh√¥ng th·ªÉ th·ª±c hi·ªán c√°c c√¥ng vi·ªác theo ƒë√∫ng l·ªãch tr√™n th√¨ hu·∫•n luy·ªán vi√™n b√°o c√°o v·ªõi l√£nh ƒë·∫°o ƒë·ªÉ ƒëi·ªÅu ch·ªânh l·ªãch cho ph√π h·ª£p v√†o th·ªùi gian kh√°c trong c√πng ng√†y l√†m vi·ªác; tuy nhi√™n, ph·∫£i ƒë·∫£m b·∫£o ƒë√∫ng, ƒë·ªß n·ªôi dung v√† th·ªùi l∆∞·ª£ng c·ªßa t·ª´ng c√¥ng vi·ªác n√™u tr√™n.</p>

            <p><strong>3.</strong> ƒê·ªëi v·ªõi nh√¢n vi√™n chƒÉn nu√¥i, nh√¢n gi·ªëng kh√¥ng th·ª±c hi·ªán c√°c n·ªôi dung li√™n quan ƒë·∫øn c√¥ng t√°c hu·∫•n luy·ªán v√† s·ª≠ d·ª•ng CNV.</p>

            <h2>ƒêi·ªÅu 14. ƒê√°nh gi√° k·∫øt qu·∫£ nu√¥i d∆∞·ª°ng v√† ph√≤ng ch·ªØa b·ªánh</h2>
            <ul>
                <li><strong>C√¥ng t√°c nu√¥i d∆∞·ª°ng, chƒÉm s√≥c ƒë·∫°t lo·∫°i Gi·ªèi:</strong> L√† hu·∫•n luy·ªán vi√™n th·ª±c hi·ªán ƒë√∫ng m·ªçi c√¥ng vi·ªác trong quy tr√¨nh v√† tr√°ch nhi·ªám chƒÉm s√≥c nu√¥i d∆∞·ª°ng; CNV kh·ªèe m·∫°nh ƒë√°p ·ª©ng y√™u c·∫ßu hu·∫•n luy·ªán v√† s·ª≠ d·ª•ng.</li>

                <li><strong>C√¥ng t√°c nu√¥i d∆∞·ª°ng, chƒÉm s√≥c ƒë·∫°t lo·∫°i Kh√°:</strong> L√† hu·∫•n luy·ªán vi√™n th·ª±c hi·ªán ƒë√∫ng theo quy ƒë·ªãnh v·ªÅ tr√°ch nhi·ªám c·ªßa hu·∫•n luy·ªán vi√™n, kh√¥ng ƒë·ªÉ CNV b·ªã b·ªánh nh∆∞ng th·ªÉ l·ª±c CNV c√≤n h·∫°n ch·∫ø (v√≠ d·ª•: s·ª©c b·ªÅn l√†m vi·ªác c·ªßa CNV ng·∫Øn d∆∞·ªõi 10 ph√∫t, ch√≥ qu√° b√©o ho·∫∑c g·∫ßy y·∫øu thi·∫øu c√¢n) ho·∫∑c do m·ªôt s·ªë ƒëi·ªÅu ki·ªán kh√°ch quan ch∆∞a kh·∫Øc ph·ª•c ƒë∆∞·ª£c (chu·ªìng nu√¥i, m√¥i tr∆∞·ªùng kh√¥ng ƒë·∫£m b·∫£o).</li>

                <li><strong>C√¥ng t√°c nu√¥i d∆∞·ª°ng, chƒÉm s√≥c ƒë·∫°t lo·∫°i Trung b√¨nh:</strong> L√† hu·∫•n luy·ªán vi√™n th·ª±c hi·ªán kh√¥ng ƒë·∫ßy ƒë·ªß theo quy ƒë·ªãnh ho·∫∑c ƒë·ªÉ CNV b·ªã b·ªánh.</li>

                <li><strong>C√¥ng t√°c nu√¥i d∆∞·ª°ng, chƒÉm s√≥c kh√¥ng ƒë·∫°t y√™u c·∫ßu:</strong> L√† hu·∫•n luy·ªán vi√™n th·ª±c hi·ªán kh√¥ng theo quy ƒë·ªãnh v√† ƒë·ªÉ CNV b·ªã ·ªëm b·ªánh, ph√°t hi·ªán mu·ªôn ph·∫£i th·∫£i lo·∫°i ho·∫∑c CNV b·ªã ch·∫øt.</li>
            </ul>
            </main>
            `;



    } else if (type === 'QUY TR√åNH HU·∫§N LUY·ªÜN') {

        title.innerText = 'QUY TR√åNH HU·∫§N LUY·ªÜN';

        content.innerHTML = `
            <main>
            <h2>ƒêi·ªÅu 15. Hu·∫•n luy·ªán th·ªÉ l·ª±c v√† k·ª∑ lu·∫≠t</h2>

            <p><strong>1. N·ªôi dung ƒë·ªông t√°c c∆° b·∫£n v√† k·ª∑ lu·∫≠t:</strong></p>
            <p>Hu·∫•n luy·ªán CNV th·ª±c hi·ªán c√°c ƒë·ªông t√°c: ƒêi, ƒë·ª©ng, n·∫±m, ng·ªìi b√™n c·∫°nh ch·ªß; ƒëi·ªÅu khi·ªÉn ng·ª≠i, s·ªßa, g·ªçi l·∫°i, c·∫Øp v·∫≠t, v∆∞·ª£t ch∆∞·ªõng ng·∫°i v·∫≠t.</p>

            <p><strong>2. N·ªôi dung t·∫≠p th·ªÉ l·ª±c:</strong></p>
            <ul>
                <li>H·∫±ng ng√†y hu·∫•n luy·ªán vi√™n t·∫≠p th·ªÉ l·ª±c cho CNV: b∆°i, chui ·ªëng, ch·∫°y tr√™n c·∫ßu ƒë·ªôc m·ªôc, nh·∫£y v∆∞·ª£t ch∆∞·ªõng ng·∫°i v·∫≠t, nh·∫£y qua v√≤ng.</li>
                <li>H·∫±ng tu·∫ßn hu·∫•n luy·ªán vi√™n ph·∫£i cho CNV d√£ ngo·∫°i v·∫≠n ƒë·ªông hai l·∫ßn, m·ªói l·∫ßn (h√†nh qu√¢n v√† ch·∫°y b·ªô) t·ª´ 2km ƒë·∫øn 5km.</li>
                <li>Vi·ªác t·∫≠p c∆° b·∫£n, th·ªÉ l·ª±c ph·∫£i th·ª±c hi·ªán sau khi ƒë√£ t·∫≠p chuy√™n khoa. Sau khi ho√†n th√†nh hu·∫•n luy·ªán th·ªÉ l·ª±c, hu·∫•n luy·ªán vi√™n ki·ªÉm tra h·ªá v·∫≠n ƒë·ªông, cho CNV u·ªëng n∆∞·ªõc, ch·∫£i l√¥ng v√† cho CNV ngh·ªâ ng∆°i xong m·ªõi chu·∫©n b·ªã c√¥ng t√°c t√°c nghi·ªáp.</li>
            </ul>

            <p><strong>3. Y√™u c·∫ßu ƒë·ªëi v·ªõi ch√≥ nghi·ªáp v·ª•:</strong></p>
            <p>Ho√†n th√†nh c√°c n·ªôi dung, kh·ªëi l∆∞·ª£ng hu·∫•n luy·ªán; CNV duy tr√¨ v·ªØng ch·∫Øc c√°c ph·∫£n x·∫° c√≥ ƒëi·ªÅu ki·ªán v√† th·ª±c hi·ªán ch√≠nh x√°c, thu·∫ßn th·ª•c t·ª´ng ƒë·ªông t√°c d·ª±a tr√™n kh·∫©u l·ªánh, ƒëi·ªáu b·ªô c·ªßa hu·∫•n luy·ªán vi√™n; c√≥ s·ª©c b·ªÅn, s·ª± d·∫ªo dai trong qu√° tr√¨nh t√°c nghi·ªáp li√™n t·ª•c t·ªëi thi·ªÉu 5 ph√∫t ngo√†i tr·ªùi m√πa n√≥ng, 10-15 ph√∫t tr√™n ph∆∞∆°ng ti·ªán, 15-20 ph√∫t trong b√≥ng r√¢m.</p>

            <p><strong>4. Y√™u c·∫ßu ƒë·ªëi v·ªõi hu·∫•n luy·ªán vi√™n:</strong></p>
            <ul>
                <li>Th·ª±c hi·ªán h·∫øt kh·ªëi l∆∞·ª£ng hu·∫•n luy·ªán, c√≥ ƒë·ªông t√°c, c·ª≠ ch·ªâ d·ª©t kho√°t, kh·∫©u l·ªánh to r√µ r√†ng, t√°c phong nhanh nh·∫πn.</li>
                <li>ƒêi·ªÅu khi·ªÉn ƒë∆∞·ª£c CNV ho·∫°t ƒë·ªông theo kh·∫©u l·ªánh; CNV h∆∞ng ph·∫•n, qu·∫•n ch·ªß kh√¥ng c√≥ bi·ªÉu hi·ªán t·ª± do hay s·ª£ h√£i.</li>
                <li>X·ª≠ l√Ω k·ªãp th·ªùi nh·ªØng t√¨nh hu·ªëng ph√°t sinh trong qu√° tr√¨nh hu·∫•n luy·ªán.</li>
            </ul>

            <h2>ƒêi·ªÅu 16. Hu·∫•n luy·ªán c·ªßng c·ªë ph·∫£n x·∫° v·ªõi c√°c m·∫´u t·∫≠p</h2>

            <p><strong>1. Hu·∫•n luy·ªán vi√™n:</strong></p>
            <p>C√≥ nhi·ªám v·ª• th·ª±c hi·ªán hu·∫•n luy·ªán c·ªßng c·ªë h·∫±ng ng√†y duy tr√¨ kh·∫£ nƒÉng t√¨m ki·∫øm, l√πng s·ª•c v√† ph√°t hi·ªán c√°c ngu·ªìn h∆°i, m·∫´u t·∫≠p. Y√™u c·∫ßu hu·∫•n luy·ªán vi√™n ph·∫£i th∆∞·ªùng xuy√™n thay ƒë·ªïi ƒëa d·∫°ng c√°c m·∫´u ngu·ªìn h∆°i, c√°c t√¨nh hu·ªëng hu·∫•n luy·ªán nh∆∞ sau:</p>
            <ul>
                <li>Gi·∫•u m·∫´u t·∫≠p trong va ly, h√†nh l√Ω, bƒÉng chuy·ªÅn.</li>
                <li>Gi·∫•u m·∫´u t·∫°i s√¢n b√£i, kho h√†ng, trong container.</li>
                <li>Gi·∫•u tr√™n ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i, tr√™n t√†u thuy·ªÅn, tr√™n m√°y bay.</li>
                <li>Gi·∫•u m·∫´u tr√™n v√°ch t∆∞·ªùng, ƒë·ªô cao t·ªëi thi·ªÉu t·ª´ 01 m√©t tr·ªü l√™n.</li>
                <li>Gi·∫•u m·∫´u ngu·ªìn h∆°i tr√™n ng∆∞·ªùi: trong gi√†y, t·∫•t, t√∫i qu·∫ßn, l√™n th·∫Øt l∆∞ng v√† t√∫i √°o ng·ª±c ho·∫∑c k·∫πp v√†o n√°ch.</li>
            </ul>

            <p><strong>2. Ch√≥ nghi·ªáp v·ª•:</strong></p>
            <p>C√≥ kh·∫£ nƒÉng t√¨m ki·∫øm, ng·ª≠i th·ªùi gian ƒë·∫°t 20 ph√∫t, ph√°t hi·ªán ch√≠nh x√°c c√°c m·∫´u t·∫≠p ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán. C√≥ bi·ªÉu hi·ªán ph·∫£n ·ª©ng (c√†o, s·ªßa, ng·ªìi, n·∫±m) r√µ r√†ng v·ªõi t·∫•t c·∫£ c√°c m·∫´u t·∫≠p ƒë∆∞·ª£c c·∫•t gi·∫•u.</p>

            <h2>ƒêi·ªÅu 17. Hu·∫•n luy·ªán n√¢ng cao nƒÉng l·ª±c cho ch√≥ nghi·ªáp v·ª•</h2>

            <p>Hu·∫•n luy·ªán n√¢ng cao nƒÉng l·ª±c c·ªßa CNV th·ª±c hi·ªán theo ph∆∞∆°ng ch√¢m hu·∫•n luy·ªán c·ªßng c·ªë r·ªìi n√¢ng cao v√† c·ªßng c·ªë r·ªìi ti·∫øp t·ª•c n√¢ng cao. Hu·∫•n luy·ªán theo c√°c t√¨nh hu·ªëng t·∫°i c·ª≠a kh·∫©u nh∆∞ sau:</p>
            <ul>
                <li>Tr·ª±c ti·∫øp gi·∫•u m·∫´u t·∫≠p v√†o kho h√†ng, h√†ng h√≥a, h√†nh l√Ω, ph∆∞∆°ng ti·ªán v·∫≠n chuy·ªÉn qua l·∫°i t·∫°i khu c·ª≠a kh·∫©u. H∆∞·ªõng d·∫´n CNV t√¨m t·ª´ th·∫•p l√™n cao, t·ª´ ngo√†i v√†o trong.</li>
                <li>Khi CNV th√†nh th·ª•c ph·∫£n x·∫° t√¨m ki·∫øm, h∆∞·ªõng t·ªõi kh√¥ng c·∫ßn ph·∫£i ƒëi·ªÅu khi·ªÉn, ch·ªâ d·∫´n CNV t√¨m ki·∫øm v√†o khu v·ª±c c·∫ßn ki·ªÉm tra, ƒë·ªÉ CNV s·∫Ω t·ª± t√¨m ki·∫øm theo ph·∫£n x·∫° ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán.</li>
                <li>Tr·ª±c ti·∫øp gi·∫•u m·∫´u t·∫≠p tr√™n ng∆∞·ªùi theo d√µi ƒë√°nh gi√° kh·∫£ nƒÉng ph√°t hi·ªán ngu·ªìn h∆°i c·ªßa CNV. T·ª´ bi·ªÉu hi·ªán t√¨m ki·∫øm ng·ª≠i ƒë·∫øn kh·∫£ nƒÉng ph√°t hi·ªán ngu·ªìn h∆°i v√† ph·∫£n ·ª©ng c·ªßa CNV v·ªõi m·∫´u t·∫≠p c·ª• th·ªÉ.</li>
                <li>Y√™u c·∫ßu: CNV h∆∞ng ph·∫•n khi t√°c nghi·ªáp ph√°t hi·ªán ra c√°c m·∫´u ma t√∫y ƒë∆∞·ª£c c·∫•t gi·∫•u tinh vi, ƒë·ªô khuy·∫øch t√°n th·∫•p ho·∫∑c c√≥ m√πi ng·ª•y trang; ch√≥ c√≥ bi·ªÉu hi·ªán ch√≠nh x√°c (c√†o, s·ªßa, ng·ªìi), ph·∫£n ·ª©ng r√µ r√†ng v·ªõi c√°c ngu·ªìn h∆°i ma t√∫y.</li>
                <li>ƒê·ªëi v·ªõi CNV ƒë∆∞·ª£c giao t·∫°i c·ª≠a kh·∫©u s√¢n bay qu·ªëc t·∫ø CNV ph·∫£i c√≥ kh·∫£ nƒÉng l√πng s·ª•c t√¨m ki·∫øm th·ªùi gian k√©o d√†i tr√™n bƒÉng chuy·ªÅn, c√≥ kh·∫£ nƒÉng ng·ª≠i ng∆∞·ªùi t·ªët.</li>
                <li>ƒê·ªëi v·ªõi CNV ƒë∆∞·ª£c giao t·∫°i c√°c c·∫£ng bi·ªÉn, c·∫£ng s√¥ng qu·ªëc t·∫ø th·ªùi gian t√°c nghi·ªáp ƒë·∫°t t·ªëi thi·ªÉu 10 ph√∫t ngo√†i tr·ªùi m√πa n√≥ng, t·ª´ 10‚Äì15 ph√∫t tr√™n ph∆∞∆°ng ti·ªán, t·ª´ 15‚Äì20 ph√∫t trong b√≥ng r√¢m. CNV c√≥ kh·∫£ nƒÉng nh·∫£y cao, s·ª•c t√¨m trong t√†u thuy·ªÅn, ca n√¥, container, ph∆∞∆°ng ti·ªán xe √¥ t√¥, ch·ªãu kh√≥ ng·ª≠i trong ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt n√≥ng.</li>
            </ul>

            <h2>ƒêi·ªÅu 18. ƒê√°nh gi√° k·∫øt qu·∫£ hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª•</h2>

            <p><strong>1. Ph∆∞∆°ng ph√°p ƒë√°nh gi√°:</strong></p>
            <ul>
                <li>ƒê√°nh gi√° b·∫±ng ki·ªÉm tra tr·ª±c ti·∫øp vi·ªác th·ª±c hi·ªán c√°c ƒë·ªông t√°c c∆° b·∫£n v√† ho·∫°t ƒë·ªông th·ªÉ l·ª±c c·ªßa CNV.</li>
                <li>ƒê√°nh gi√° k·∫øt qu·∫£ hu·∫•n luy·ªán b·∫±ng s·ªë l∆∞·ª£ng m·∫´u t·∫≠p do CNV l√πng s·ª•c, ph√°t hi·ªán ngay t·∫°i khu v·ª±c hu·∫•n luy·ªán, l√†m vi·ªác h·∫±ng ng√†y (khi ki·ªÉm tra kh√¥ng gi·∫•u qu√° 3 m·∫´u).</li>
                <li>ƒê√°nh gi√° ƒë·ªãnh t√≠nh v·ªÅ t√≠nh ƒë·ªôc l·∫≠p, s·ª± t·∫≠p trung v√† h∆∞ng ph·∫•n, d·∫ªo dai v√† tu√¢n l·ªánh hu·∫•n luy·ªán vi√™n trong qu√° tr√¨nh l√†m vi·ªác c·ªßa CNV.</li>
            </ul>

            <p><strong>2. Ti√™u chu·∫©n ƒë√°nh gi√°:</strong></p>

            <h3>2.1. Ch√≥ nghi·ªáp v·ª• gi·ªèi</h3>
            <ul>
                <li>Ph·∫£n x·∫° t√¨m ki·∫øm v·ªØng ch·∫Øc, ƒë·∫£m b·∫£o s·ª©c b·ªÅn, s·ª± d·∫ªo dai, t·∫≠p trung v√† h∆∞ng ph·∫•n trong qu√° tr√¨nh ki·ªÉm tra.</li>
                <li>Ch√≥ nghi·ªáp v·ª• kh√¥ng b·ªè s√≥t khu v·ª±c, ph∆∞∆°ng ti·ªán... ƒë∆∞·ª£c y√™u c·∫ßu ki·ªÉm tra.</li>
                <li>Ch√≥ nghi·ªáp v·ª• ph√°t hi·ªán ƒë∆∞·ª£c t·∫•t c·∫£ c√°c m·∫´u.</li>
                <li>Bi·ªÉu hi·ªán r√µ r√†ng: c√†o ho·∫∑c s·ªßa ho·∫∑c ng·ªìi.</li>
            </ul>

            <h3>2.2. Ch√≥ nghi·ªáp v·ª• kh√°</h3>
            <ul>
                <li>Ph·∫£n x·∫° t√¨m ki·∫øm v·ªØng ch·∫Øc, ƒë·∫£m b·∫£o s·ª©c b·ªÅn, s·ª± d·∫ªo dai, t·∫≠p trung v√† h∆∞ng ph·∫•n trong qu√° tr√¨nh ki·ªÉm tra.</li>
                <li>Ch√≥ nghi·ªáp v·ª• kh√¥ng b·ªè s√≥t khu v·ª±c, ph∆∞∆°ng ti·ªán... ƒë∆∞·ª£c y√™u c·∫ßu ki·ªÉm tra.</li>
                <li>Ch√≥ nghi·ªáp v·ª• ph√°t hi·ªán ƒë∆∞·ª£c 02/03 m·∫´u.</li>
                <li>Ch√≥ nghi·ªáp v·ª• bi·ªÉu hi·ªán r√µ r√†ng: c√†o, s·ªßa ho·∫∑c ng·ªìi.</li>
            </ul>

            <h3>2.3. Ch√≥ nghi·ªáp v·ª• trung b√¨nh</h3>
            <p>Ch√≥ nghi·ªáp v·ª• c√≥ ph·∫£n x·∫° t√¨m ki·∫øm v·ªØng ch·∫Øc, ƒë·∫£m b·∫£o s·ª©c b·ªÅn, s·ª± d·∫ªo dai, t·∫≠p trung v√† h∆∞ng ph·∫•n trong qu√° tr√¨nh ki·ªÉm tra, CNV ph√°t hi·ªán t·ª´ 02 m·∫´u tr·ªü l√™n v√† m·∫Øc m·ªôt trong c√°c l·ªói d∆∞·ªõi ƒë√¢y:</p>
            <ul>
                <li>Ch√≥ nghi·ªáp v·ª• b·ªè s√≥t m·ªôt s·ªë khu v·ª±c, ph∆∞∆°ng ti·ªán... ƒë∆∞·ª£c y√™u c·∫ßu ki·ªÉm tra nh∆∞ng khi ƒë∆∞·ª£c ƒë·ªãnh h∆∞·ªõng CNV ki·ªÉm tra l·∫°i ƒë·∫ßy ƒë·ªß.</li>
                <li>Ch√≥ nghi·ªáp v·ª• c√≥ bi·ªÉu hi·ªán khi ph√°t hi·ªán v·∫≠t nh∆∞ng kh√¥ng r√µ r√†ng.</li>
            </ul>

            <h3>2.4. Ch√≥ nghi·ªáp v·ª• kh√¥ng ƒë·∫°t y√™u c·∫ßu</h3>
            <p><strong>a.</strong> Ch√≥ nghi·ªáp v·ª• c√≥ ph·∫£n x·∫° t√¨m ki·∫øm, ƒë·∫£m b·∫£o s·ª©c b·ªÅn, s·ª± d·∫ªo dai, t·∫≠p trung v√† h∆∞ng ph·∫•n trong qu√° tr√¨nh ki·ªÉm tra nh∆∞ng m·∫Øc 02/03 l·ªói d∆∞·ªõi ƒë√¢y:</p>
            <ul>
                <li>Ch√≥ nghi·ªáp v·ª• b·ªè s√≥t m·ªôt s·ªë khu v·ª±c, ph∆∞∆°ng ti·ªán... ƒë∆∞·ª£c y√™u c·∫ßu ki·ªÉm tra. Nh∆∞ng khi ƒë∆∞·ª£c ƒë·ªãnh h∆∞·ªõng CNV ki·ªÉm tra l·∫°i ƒë·∫ßy ƒë·ªß.</li>
                <li>Ch√≥ nghi·ªáp v·ª• ph√°t hi·ªán d∆∞·ªõi 02 m·∫´u.</li>
                <li>Ch√≥ nghi·ªáp v·ª• c√≥ bi·ªÉu hi·ªán khi ph√°t hi·ªán v·∫≠t nh∆∞ng kh√¥ng r√µ r√†ng.</li>
            </ul>

            <p><strong>b.</strong> Ch√≥ nghi·ªáp v·ª• m·∫Øc 03 l·ªói tr·ªü l√™n d∆∞·ªõi ƒë√¢y:</p>
            <ul>
                <li>Ph·∫£n x·∫° t√¨m ki·∫øm kh√¥ng v·ªØng ch·∫Øc, ch√≥ng ch√°n, kh√¥ng t·∫≠p trung, c√≥ bi·ªÉu hi·ªán ·ª©c ch·∫ø, kh√¥ng ch·ªãu ng·ª≠i.</li>
                <li>Ch√≥ nghi·ªáp v·ª• b·ªè s√≥t m·ªôt s·ªë khu v·ª±c, ph∆∞∆°ng ti·ªán... ƒë∆∞·ª£c y√™u c·∫ßu ki·ªÉm tra, khi ƒë∆∞·ª£c ƒë·ªãnh h∆∞·ªõng CNV kh√¥ng ki·ªÉm tra l·∫°i ƒë·∫ßy ƒë·ªß.</li>
                <li>Ch√≥ nghi·ªáp v·ª• ph√°t hi·ªán d∆∞·ªõi 02 m·∫´u.</li>
                <li>Ch√≥ nghi·ªáp v·ª• c√≥ bi·ªÉu hi·ªán khi ph√°t hi·ªán v·∫≠t nh∆∞ng kh√¥ng r√µ r√†ng.</li>
            </ul>
            </main>
            `;

    } else if (type === 'QUY TR√åNH S·ª¨ D·ª§NG') {

        title.innerText = 'QUY TR√åNH S·ª¨ D·ª§NG';

        content.innerHTML = `
            <main>
            <h2>ƒêi·ªÅu 22. Nhi·ªám v·ª• c·ªßa ƒë∆°n v·ªã ƒë∆∞·ª£c giao tr·ª±c ti·∫øp qu·∫£n l√Ω s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•</h2>

            <p><strong>1.</strong> ƒê·ªëi v·ªõi C·ª•c ƒêi·ªÅu tra ch·ªëng bu√¥n l·∫≠u: Th·ª±c hi·ªán theo ƒëi·ªÅu ƒë·ªông c·ªßa c·∫•p c√≥ th·∫©m quy·ªÅn, theo chuy√™n √°n ho·∫∑c tƒÉng c∆∞·ªùng ƒë·ªôt xu·∫•t, c√≥ th·ªùi h·∫°n cho c√°c ƒë∆°n v·ªã khi c√≥ y√™u c·∫ßu.</p>

            <p><strong>2.</strong> ƒê·ªëi v·ªõi c√°c C·ª•c H·∫£i quan t·ªânh, th√†nh ph·ªë ƒë∆∞·ª£c giao CNV:</p>
            <ol>
                <li>
                <p><strong>2.1.</strong> T·ªï ch·ª©c n·∫Øm t√¨nh h√¨nh v·ªÅ ho·∫°t ƒë·ªông bu√¥n b√°n, v·∫≠n chuy·ªÉn tr√°i ph√©p c√°c ch·∫•t ma t√∫y, ch·∫•t n·ªï qua bi√™n gi·ªõi; x√°c ƒë·ªãnh m·ª©c ƒë·ªô r·ªßi ro, kh·∫£ nƒÉng t·ªôi ph·∫°m l·ª£i d·ª•ng ho·∫°t ƒë·ªông xu·∫•t nh·∫≠p kh·∫©u, xu·∫•t nh·∫≠p c·∫£nh ƒë·ªÉ bu√¥n b√°n, v·∫≠n chuy·ªÉn tr√°i ph√©p c√°c lo·∫°i h√†ng c·∫•m qua ƒë·ªãa b√†n ƒë∆°n v·ªã qu·∫£n l√Ω.</p>
                </li>

                <li>
                <p><strong>2.2.</strong> Ch·ªâ ƒë·∫°o x√¢y d·ª±ng, ph√™ duy·ªát v√† t·ªï ch·ª©c th·ª±c hi·ªán k·∫ø ho·∫°ch s·ª≠ d·ª•ng CNV v√†o c√¥ng t√°c ki·ªÉm tra ph√°t hi·ªán. N·ªôi dung k·∫ø ho·∫°ch ph·∫£i c·ª• th·ªÉ v·ªÅ:</p>
                <ul>
                    <li>Lo·∫°i m·ª•c ti√™u, ƒë·ªëi t∆∞·ª£ng l·ª±a ch·ªçn ki·ªÉm tra;</li>
                    <li>N·ªôi dung ki·ªÉm tra, vi·ªác ph·ªëi h·ª£p gi·ªØa s·ª≠ d·ª•ng CNV v·ªõi c√°c bi·ªán ph√°p nghi·ªáp v·ª• h·∫£i quan kh√°c;</li>
                    <li>Th·ªùi gian, ƒë·ªãa ƒëi·ªÉm, s·ªë l∆∞·ª£ng CNV ƒë∆∞·ª£c s·ª≠ d·ª•ng;</li>
                    <li>C√¥ng t√°c ƒë·∫£m b·∫£o v√† ph∆∞∆°ng √°n x·ª≠ l√Ω khi ph√°t hi·ªán ra ma t√∫y, ch·∫•t n·ªï;</li>
                    <li>ƒê·∫£m b·∫£o m·ªói CNV ph·∫£i ƒë∆∞·ª£c t√°c nghi·ªáp t·∫°i hi·ªán tr∆∞·ªùng t·ªëi thi·ªÉu 2 l·∫ßn (30-40 ph√∫t/l·∫ßn) trong m·ªôt ng√†y l√†m vi·ªác.</li>
                </ul>
                </li>

                <li>
                <p><strong>2.3.</strong> S·ª≠ d·ª•ng CNV theo quy·∫øt ƒë·ªãnh c·ªßa c·∫•p c√≥ th·∫©m quy·ªÅn.</p>
                </li>

                <li>
                <p><strong>2.4.</strong> Ch·∫•p h√†nh ch·ªâ ƒë·∫°o v·ªÅ nghi·ªáp v·ª• qu·∫£n l√Ω, s·ª≠ d·ª•ng v√† ƒëi·ªÅu ƒë·ªông CNV c·ªßa C·ª•c tr∆∞·ªüng C·ª•c ƒêi·ªÅu tra ch·ªëng bu√¥n l·∫≠u, C·ª•c tr∆∞·ªüng C·ª•c H·∫£i quan t·ªânh, li√™n t·ªânh, th√†nh ph·ªë tr·ª±c ti·∫øp qu·∫£n l√Ω.</p>
                </li>
            </ol>

            <h2>ƒêi·ªÅu 23. Nhi·ªám v·ª• c·ªßa hu·∫•n luy·ªán vi√™n trong qu√° tr√¨nh s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•</h2>

            <p>C√≥ m·∫∑t ƒë√∫ng gi·ªù c√πng CNV v·ªõi trang b·ªã ƒë·∫ßy ƒë·ªß, s·∫µn s√†ng th·ª±c hi·ªán theo m·ªánh l·ªánh c·ªßa c√°n b·ªô l√£nh ƒë·∫°o t·∫°i hi·ªán tr∆∞·ªùng. Hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV theo c√°c quy tr√¨nh do T·ªïng c·ª•c H·∫£i quan ban h√†nh; s·ª≠ d·ª•ng CNV ƒë√∫ng vi·ªác, ƒë√∫ng ch·ªó, ƒë√∫ng th·ªùi ƒëi·ªÉm, ph√°t huy nƒÉng l·ª±c ph√≤ng ng·ª´a t·ªôi ph·∫°m v√† ph√°t hi·ªán h√†ng c·∫•m c·ªßa CNV.</p>

            <ol>
                <li>
                <p> S·ª≠ d·ª•ng CNV ƒë·ªÉ tu·∫ßn tra, ki·ªÉm tra, kh√°m x√©t theo k·∫ø ho·∫°ch, quy·∫øt ƒë·ªãnh c·ªßa c·∫•p c√≥ th·∫©m quy·ªÅn quy ƒë·ªãnh t·∫°i ƒêi·ªÅu 24 c·ªßa quy ƒë·ªãnh n√†y.</p>
                </li>
                <li>
                <p> Th·ª±c hi·ªán ƒë√∫ng quy tr√¨nh, thao t√°c nghi·ªáp v·ª• ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán; c√≥ th√°i ƒë·ªô vƒÉn minh l·ªãch s·ª±, t√¥n tr·ªçng v√† c√≥ √Ω th·ª©c b·∫£o v·ªá t√†i s·∫£n c·ªßa kh√°ch h√†ng.</p>
                </li>
                <li>
                <p> Khi CNV ph√°t hi·ªán c√≥ ngu·ªìn h∆°i c√°c lo·∫°i h√†ng c·∫•m ph·∫£i th√¥ng b√°o ngay cho c√¥ng ch·ª©c h·∫£i quan ph·ªëi h·ª£p ki·ªÉm tra bi·∫øt v√† th·ª±c hi·ªán c√°c bi·ªán ph√°p b·∫£o v·ªá, kh·∫©n tr∆∞∆°ng l·ª•c so√°t thu gi·ªØ tang v·∫≠t, truy b·∫Øt ƒë·ªëi t∆∞·ª£ng. B√°o c√°o ngay cho l√£nh ƒë·∫°o ƒë·ªÉ xin √Ω ki·∫øn ch·ªâ ƒë·∫°o.</p>
                </li>
            </ol>

            <h2>ƒêi·ªÅu 24. Th·∫©m quy·ªÅn quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•</h2>

            <p><strong>1.</strong> Nh·ªØng ng∆∞·ªùi sau ƒë√¢y c√≥ quy·ªÅn quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•:</p>
            <ul>
                <li>T·ªïng c·ª•c tr∆∞·ªüng T·ªïng c·ª•c H·∫£i quan.</li>
                <li>C·ª•c tr∆∞·ªüng C·ª•c ƒêi·ªÅu tra ch·ªëng bu√¥n l·∫≠u; C·ª•c tr∆∞·ªüng C·ª•c H·∫£i quan t·ªânh, li√™n t·ªânh, th√†nh ph·ªë.</li>
                <li>ƒê·ªôi tr∆∞·ªüng ƒê·ªôi Qu·∫£n l√Ω, hu·∫•n luy·ªán v√† s·ª≠ d·ª•ng CNV, ƒê·ªôi tr∆∞·ªüng ƒê·ªôi Ki·ªÉm so√°t ma t√∫y thu·ªôc C·ª•c ƒêi·ªÅu tra ch·ªëng bu√¥n l·∫≠u, Chi c·ª•c tr∆∞·ªüng Chi c·ª•c H·∫£i quan, ƒê·ªôi tr∆∞·ªüng ƒê·ªôi Ki·ªÉm so√°t ph√≤ng, ch·ªëng ma t√∫y, ƒê·ªôi ki·ªÉm so√°t H·∫£i quan thu·ªôc C·ª•c H·∫£i quan t·ªânh, th√†nh ph·ªë.</li>
                <li>Ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c u·ª∑ quy·ªÅn theo quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t.</li>
            </ul>

            <p><strong>2.</strong> Th·∫©m quy·ªÅn ƒëi·ªÅu ƒë·ªông CNV:</p>
            <ul>
                <li>T·ªïng c·ª•c tr∆∞·ªüng T·ªïng c·ª•c H·∫£i quan c√≥ quy·ªÅn ƒëi·ªÅu ƒë·ªông CNV k√®m hu·∫•n luy·ªán vi√™n trong to√†n ng√†nh.</li>
                <li>C·ª•c tr∆∞·ªüng C·ª•c ƒêi·ªÅu tra ch·ªëng bu√¥n l·∫≠u c√≥ quy·ªÅn ƒëi·ªÅu ƒë·ªông CNV k√®m hu·∫•n luy·ªán vi√™n trong to√†n ng√†nh ƒë·ªÉ s·ª≠ d·ª•ng trong nh·ªØng tr∆∞·ªùng h·ª£p c·∫•p thi·∫øt (theo v·ª• vi·ªác/ chuy√™n √°n).</li>
                <li>C·ª•c tr∆∞·ªüng C·ª•c H·∫£i quan c√°c t·ªânh, li√™n t·ªânh, th√†nh ph·ªë c√≥ quy·ªÅn ƒëi·ªÅu ƒë·ªông CNV trong ƒë∆°n v·ªã tr·ª±c thu·ªôc.</li>
            </ul>

            <p><strong>3.</strong> Khi quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng CNV, nh·ªØng ng∆∞·ªùi ƒë∆∞·ª£c quy ƒë·ªãnh t·∫°i kho·∫£n 1 ƒêi·ªÅu n√†y th√¥ng b√°o cho ƒë∆°n v·ªã qu·∫£n l√Ω CNV ƒë·ªÉ k·ªãp th·ªùi ƒë∆∞a CNV ƒë·∫øn ƒë·ªãa ƒëi·ªÉm ki·ªÉm tra theo y√™u c·∫ßu. Trong tr∆∞·ªùng h·ª£p b·∫•t kh·∫£ kh√°ng kh√¥ng th·ªÉ ƒëi·ªÅu ƒë·ªông ph·∫£i b√°o c√°o ngay cho ng∆∞·ªùi quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng CNV bi·∫øt.</p>

            <p><strong>4.</strong> Vi·ªác quy·∫øt ƒë·ªãnh, ƒë·ªÅ xu·∫•t s·ª≠ d·ª•ng CNV ƒë∆∞·ª£c th·ª±c hi·ªán b·∫±ng vƒÉn b·∫£n. Tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p th√¨ b√°o c√°o b·∫±ng ƒëi·ªán tho·∫°i tr∆∞·ªõc v√† g·ª≠i vƒÉn b·∫£n sau.</p>

            <p><strong>5.</strong> M·ªçi tr∆∞·ªùng h·ª£p quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng CNV t·∫°i c√°c Chi c·ª•c H·∫£i quan ƒë·ªÅu ph·∫£i th√¥ng b√°o cho Chi c·ª•c tr∆∞·ªüng bi·∫øt ƒë·ªÉ ph·ªëi h·ª£p th·ª±c hi·ªán.</p>

            <h2>ƒêi·ªÅu 25. Tr√°ch nhi·ªám ph·ªëi h·ª£p s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• trong ng√†nh H·∫£i quan</h2>

            <ol>
                <li>
                <p> Chi c·ª•c tr∆∞·ªüng, ƒê·ªôi tr∆∞·ªüng ƒê·ªôi Ki·ªÉm so√°t, ƒê·ªôi tr∆∞·ªüng ƒê·ªôi ma tu√Ω thu·ªôc Chi c·ª•c H·∫£i quan c·ª≠a kh·∫©u ph·∫£i th∆∞·ªùng xuy√™n c√≥ k·∫ø ho·∫°ch ch·ªâ ƒë·∫°o hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng c∆° s·ªü, ph∆∞∆°ng ti·ªán s·∫µn c√≥ ph·ª•c v·ª• vi·ªác chƒÉm s√≥c, s·ª≠ d·ª•ng CNV; c·ª≠ c√°n b·ªô l√†m vi·ªác v·ªõi ch·ªß h√†ng, ƒë∆°n v·ªã qu·∫£n l√Ω kho b√£i xu·∫•t tr√¨nh h√†ng h√≥a, t·∫°o hi·ªán tr∆∞·ªùng cho CNV t√°c nghi·ªáp v√† ph·ªëi h·ª£p v·ªõi hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV th·ª±c hi·ªán vi·ªác ki·ªÉm tra ph√°t hi·ªán ma t√∫y, ch·∫•t n·ªï, h√†ng c·∫•m t·∫°i ƒë·ªãa ho·∫°t ƒë·ªông h·∫£i quan.</p>
                </li>

                <li>
                <p> C√¥ng ch·ª©c l√†m nhi·ªám v·ª• thu nh·∫≠p th√¥ng tin nghi·ªáp v·ª• h·∫£i quan, ti·∫øp nh·∫≠n ƒëƒÉng k√Ω t·ªù khai, ki·ªÉm tra th·ª±c t·∫ø h√†ng h√≥a, gi√°m s√°t, ki·ªÉm so√°t h·∫£i quan, ki·ªÉm so√°t ma t√∫y khi c√≥ th√¥ng tin nghi v·∫•n v·ªÅ c√°c lo·∫°i h√†ng c·∫•m ƒë∆∞·ª£c c·∫•t gi·∫•u trong h√†ng h√≥a xu·∫•t nh·∫≠p kh·∫©u, ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i v√† trong ƒë·ªëi t∆∞·ª£ng xu·∫•t nh·∫≠p c·∫£nh ph·∫£i b√°o c√°o ngay l√£nh ƒë·∫°o ph·ª• tr√°ch tr·ª±c ti·∫øp v√† ƒë·ªÅ ngh·ªã s·ª≠ d·ª•ng CNV ƒë·ªÉ ki·ªÉm tra ph√°t hi·ªán.</p>
                </li>

                <li>
                <p> C√¥ng ch·ª©c ƒë∆∞·ª£c ph√¢n c√¥ng ki·ªÉm tra c·∫ßn trao ƒë·ªïi nh·ªØng th√¥ng tin nghi v·∫•n v·ªÅ v·ªã tr√≠ c·∫•t gi·∫•u c√°c lo·∫°i h√†ng c·∫•m v·ªõi hu·∫•n luy·ªán vi√™n CNV; y√™u c·∫ßu ch·ªß h√†ng ho·∫∑c ng∆∞·ªùi ƒë·∫°i di·ªán h·ª£p ph√°p c·ªßa ch·ªß h√†ng x·∫øp d·ª° h√†ng h√≥a ƒë·ªÉ CNV t√°c nghi·ªáp thu·∫≠n l·ª£i.</p>
                </li>
            </ol>

            <h2>ƒêi·ªÅu 26. Quy tr√¨nh s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•</h2>

            <p>Ch√≥ nghi·ªáp v·ª• ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th·ª±c hi·ªán ki·ªÉm tra nh·ªØng ƒë·ªëi t∆∞·ª£ng (h√†nh kh√°ch, h√†ng h√≥a, ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i) do h·ªá th·ªëng qu·∫£n l√Ω r·ªßi ro ph√¢n lu·ªìng (ki·ªÉm tra th·ª±c t·∫ø h√†ng h√≥a) khi th·ª±c hi·ªán th·ªß t·ª•c h·∫£i quan ho·∫∑c khi c∆° quan h·∫£i quan c√≥ th√¥ng tin nghi v·∫•n ƒë·ªëi t∆∞·ª£ng c·∫•t gi·∫•u, v·∫≠n chuy·ªÉn h√†ng h√≥a b·ªã c·∫•m xu·∫•t kh·∫©u, nh·∫≠p kh·∫©u qua ƒë·ªãa b√†n ho·∫°t ƒë·ªông h·∫£i quan.</p>

            <p><strong>C√°c tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•:</strong></p>
            <ol>
                <li><p><strong>1.1.</strong> S·ª≠ d·ª•ng CNV ƒë·ªÉ ki·ªÉm tra h·∫£i quan ƒë·ªëi v·ªõi: h√†ng h√≥a, h√†nh l√Ω xu·∫•t nh·∫≠p c·∫£nh, ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i xu·∫•t c·∫£nh ‚Äì nh·∫≠p c·∫£nh ‚Äì qu√° c·∫£nh nghi v·∫•n c√≥ c·∫•t gi·∫•u ma t√∫y ho·∫∑c c√°c m·∫∑t h√†ng c·∫•m kh√°c theo ph√¢n lu·ªìng c·ªßa h·ªá th·ªëng qu·∫£n l√Ω r·ªßi ro.</p></li>
                <li><p><strong>1.2.</strong> S·ª≠ d·ª•ng CNV th∆∞·ªùng xuy√™n theo k·∫ø ho·∫°ch ƒë∆∞·ª£c ph√™ duy·ªát ƒë·ªÉ rƒÉn ƒëe ph√≤ng ng·ª´a v√† ph√°t hi·ªán t·ªôi ph·∫°m t·∫°i c√°c ƒë·ªãa b√†n tr·ªçng ƒëi·ªÉm.</p></li>
                <li><p><strong>1.3.</strong> S·ª≠ d·ª•ng CNV ƒë·ªôt xu·∫•t theo quy·∫øt ƒë·ªãnh c·ªßa c·∫•p c√≥ th·∫©m quy·ªÅn ph·ª•c v·ª• ƒë·∫•u tranh chuy√™n √°n ho·∫∑c ki·ªÉm tra, kh√°m x√©t c√°c ƒë·ªëi t∆∞·ª£ng tr·ªçng ƒëi·ªÉm.</p></li>
                <li><p><strong>1.4.</strong> S·ª≠ d·ª•ng CNV theo quy·∫øt ƒë·ªãnh c·ªßa c·∫•p c√≥ th·∫©m quy·ªÅn ƒë·ªÉ ph·ªëi h·ª£p v·ªõi c√°c l·ª±c l∆∞·ª£ng ch·ª©c nƒÉng ngo√†i ƒë·ªãa b√†n ho·∫°t ƒë·ªông h·∫£i quan.</p></li>
            </ol>

            <p><strong>2. CƒÉn c·ª© x√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• ki·ªÉm tra:</strong></p>
            <ul>
                <li>Th√¥ng qua H·ªá th·ªëng qu·∫£n l√Ω r·ªßi ro (Phi·∫øu x√°c ƒë·ªãnh th√¥ng tin tr·ªçng ƒëi·ªÉm ƒë·ªëi v·ªõi chuy·∫øn bay, ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i, l√¥ h√†ng, ƒë·ªëi t∆∞·ª£ng tr·ªçng ƒëi·ªÉm);</li>
                <li>CƒÉn c·ª© th√¥ng tin nghi·ªáp v·ª• tr√™n c√°c H·ªá th·ªëng Emanifest, H·ªá th·ªëng th√¥ng tin nghi·ªáp v·ª• h·∫£i quan, H·ªá th·ªëng VNACCS/VCIS‚Ä¶ƒë·ªÉ ƒë∆∞a ra danh s√°ch l√¥ h√†ng ƒë·ªÅ ngh·ªã s·ª≠ d·ª•ng CNV ki·ªÉm tra.</li>
                <li>Th√¥ng tin t·ª´ c√°c l·ª±c l∆∞·ª£ng ch·ª©c nƒÉng li√™n quan cung c·∫•p;</li>
                <li>Qua th·ª±c t·∫ø gi√°m s√°t c·ªßa c√¥ng ch·ª©c;</li>
                <li>Ng∆∞·ªùi xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh c√≥ h√†nh l√Ω ph·∫£i khai b√°o theo quy ƒë·ªãnh;</li>
                <li>Ki·ªÉm tra ƒë·ªëi t∆∞·ª£ng ng·∫´u nhi√™n;</li>
                <li>Ngu·ªìn th√¥ng tin kh√°c (n·∫øu c√≥).</li>
            </ul>

            <p><strong>2.1. Th·ªùi gian, ƒë·ªãa ƒëi·ªÉm s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•:</strong></p>
            <p>Trong m·ªói ca l√†m vi·ªác c·∫ßn c√≥ t·ªëi thi·ªÉu 02 hu·∫•n luy·ªán vi√™n v√† 02 CNV ƒë·ªÉ ki·ªÉm tra ch√©o, ƒë·∫£m b·∫£o k·∫øt qu·∫£ kh√°ch quan (tr·ª´ tr∆∞·ªùng h·ª£p b·∫•t kh·∫£ kh√°ng ch·ªâ c√≤n 01 CNV do CNV b·ªã ch·∫øt ho·∫∑c th·∫£i lo·∫°i ho·∫∑c hu·∫•n luy·ªán vi√™n v·∫Øng m·∫∑t v√¨ l√Ω do kh√°ch quan).</p>

            <p><strong>2.2. S·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• ki·ªÉm tra h√†nh l√Ω, h√†nh kh√°ch, ph∆∞∆°ng ti·ªán t·∫°i c·ª≠a kh·∫©u s√¢n bay qu·ªëc t·∫ø:</strong></p>
            <p><strong>a. ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra:</strong></p>
            <ul>
                <li>Khu v·ª±c ·ªëng l·ªìng v√† h√†nh lang ƒëi ra t√†u bay ho·∫∑c v√†o nh√† ga l√†m th·ªß t·ª•c;</li>
                <li>Khu v·ª±c l√†m th·ªß t·ª•c h·∫£i quan;</li>
                <li>Khu v·ª±c c√°ch ly; khu v·ª±c h·∫°n ch·∫ø;</li>
                <li>Khu v·ª±c ƒë·∫≠u t·∫°i s√¢n ƒë·ªó ƒë·ªëi v·ªõi t√†u bay tr·ªçng ƒëi·ªÉm;</li>
            </ul>

            <p><strong>b. Th·ªùi ƒëi·ªÉm ki·ªÉm tra.</strong></p>
            <ul>
                <li>ƒê·ªëi v·ªõi ph∆∞∆°ng ti·ªán: T·ª´ khi nh·∫≠p c·∫£nh, l∆∞u ƒë·ªó t·∫°i v·ªã tr√≠ ƒë·∫≠u t·∫°i khu v·ª±c s√¢n ƒë·ªó ƒë·∫øn khi xu·∫•t c·∫£nh;</li>
                <li>Ng∆∞·ªùi xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh, qu√° c·∫£nh v√† h√†nh l√Ω x√°ch tay: T·ª´ khi r·ªùi ph∆∞∆°ng ti·ªán nh·∫≠p c·∫£nh v√†o ƒë·∫øn khu v·ª±c nh√† ga nh·∫≠p c·∫£nh; t·ª´ nh√† ga xu·∫•t c·∫£nh l√™n ph∆∞∆°ng ti·ªán xu·∫•t c·∫£nh;</li>
                <li>H√†nh l√Ω k√Ω g·ª≠i c·ªßa ng∆∞·ªùi xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh, qu√° c·∫£nh: T·ª´ khi x·∫øp d·ª° t·ª´ t√†u bay ƒë·∫øn ƒë·∫£o tr·∫£ h√†nh l√Ω c·ªßa nh√† ga nh·∫≠p; t·ª´ ƒë·∫£o h√†nh l√Ω xu·∫•t ƒë∆∞a l√™n t√†u bay xu·∫•t c·∫£nh;</li>
            </ul>

            <p><strong>2.3. S·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• ki·ªÉm tra h√†nh l√Ω, h√†nh kh√°ch, ph∆∞∆°ng ti·ªán t·∫°i c√°c c·ª≠a kh·∫©u ƒë∆∞·ªùng b·ªô, ƒë∆∞·ªùng s·∫Øt v√† ƒë∆∞·ªùng bi·ªÉn:</strong></p>

            <p><strong>a. ƒê·ªãa ƒëi·ªÉm s·ª≠ d·ª•ng ch√≥ ki·ªÉm tra:</strong></p>
            <ul>
                <li>Khu v·ª±c ki·ªÉm tra h·∫£i quan t·∫°i c·ª≠a kh·∫©u.</li>
                <li>Khu v·ª±c tu·∫ßn tra t·∫°i ƒë·ªãa b√†n ki·ªÉm so√°t h·∫£i quan theo ph√¢n c√¥ng c·ªßa Chi c·ª•c tr∆∞·ªüng Chi c·ª•c H·∫£i quan c·ª≠a kh·∫©u.</li>
                <li>Khu v·ª±c kh√°c theo quy·∫øt ƒë·ªãnh c·ªßa Chi c·ª•c tr∆∞·ªüng t√πy theo t·ª´ng th·ªùi ƒëi·ªÉm v√† t√¨nh h√¨nh th·ª±c t·∫ø;</li>
            </ul>

            <p><strong>b. Th·ªùi ƒëi·ªÉm ki·ªÉm tra:</strong></p>
            <ul>
                <li>ƒê·ªëi v·ªõi ph∆∞∆°ng ti·ªán: t·ª´ khi nh·∫≠p c·∫£nh, l∆∞u ƒë·ªó t·∫°i v·ªã tr√≠ d·ª´ng ph∆∞∆°ng ti·ªán ƒë·∫øn khi xu·∫•t c·∫£nh;</li>
                <li>Ng∆∞·ªùi xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh, qu√° c·∫£nh v√† h√†nh l√Ω x√°ch tay: T·ª´ khi r·ªùi ph∆∞∆°ng ti·ªán nh·∫≠p c·∫£nh v√†o ƒë·∫øn khu v·ª±c ki·ªÉm tra h·∫£i quan nh·∫≠p c·∫£nh; t·ª´ nh√† ga xu·∫•t c·∫£nh l√™n ph∆∞∆°ng ti·ªán xu·∫•t c·∫£nh;</li>
                <li>H√†nh l√Ω k√Ω g·ª≠i c·ªßa ng∆∞·ªùi xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh, qu√° c·∫£nh: T·ª´ khi x·∫øp d·ª° h√†nh l√Ω kh·ªèi ph∆∞∆°ng ti·ªán qua khu v·ª±c ki·ªÉm tra h·∫£i quan ƒë·∫øn khi l√™n ph∆∞∆°ng ti·ªán xu·∫•t nh·∫≠p c·∫£nh.</li>
            </ul>

            <p><strong>2.4. S·ª≠ d·ª•ng ch√≥ ki·ªÉm tra h√†ng h√≥a xu·∫•t nh·∫≠p kh·∫©u:</strong></p>

            <p><strong>a. ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra:</strong></p>
            <ul>
                <li>Ki·ªÉm tra t·∫°i khu v·ª±c c·ª≠a kh·∫©u ƒë∆∞·ªùng b·ªô, ga ƒë∆∞·ªùng s·∫Øt li√™n v·∫≠n qu·ªëc t·∫ø, c·∫£ng h√†ng kh√¥ng d√¢n d·ª•ng qu·ªëc t·∫ø; b∆∞u ƒëi·ªán qu·ªëc t·∫ø; c·∫£ng bi·ªÉn, c·∫£ng th·ªßy n·ªôi ƒë·ªãa c√≥ ho·∫°t ƒë·ªông xu·∫•t kh·∫©u, nh·∫≠p kh·∫©u, xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh, qu√° c·∫£nh; c·∫£ng xu·∫•t kh·∫©u, nh·∫≠p kh·∫©u h√†ng h√≥a ƒë∆∞·ª£c th√†nh l·∫≠p trong n·ªôi ƒë·ªãa;</li>
                <li>ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra t·∫≠p trung theo quy·∫øt ƒë·ªãnh c·ªßa T·ªïng c·ª•c tr∆∞·ªüng T·ªïng c·ª•c H·∫£i quan;</li>
                <li>Ki·ªÉm tra t·∫°i khu v·ª±c kho ngo·∫°i quan, kho b·∫£o thu·∫ø, ƒë·ªãa ƒëi·ªÉm rac hu h√†ng l·∫ª;</li>
                <li>ƒê·ªãa ƒëi·ªÉm ki·ªÉm rac hung gi·ªØa H·∫£i quan Vi·ªát Nam v·ªõi H·∫£i quan n∆∞·ªõc l√°ng gi·ªÅng t·∫°i khu v·ª±c c·ª≠a kh·∫©u ƒë∆∞·ªùng b·ªô;</li>
                <li>ƒê·ªãa ƒëi·ªÉm kh√°c do T·ªïng c·ª•c tr∆∞·ªüng T·ªïng c·ª•c H·∫£i quan quy·∫øt ƒë·ªãnh trong tr∆∞·ªùng h·ª£p c·∫ßn thi·∫øt.</li>
            </ul>

            <p><strong>b. Th·ªùi ƒëi·ªÉm ki·ªÉm tra:</strong></p>
            <p><em>ƒê·ªëi v·ªõi h√†ng h√≥a nh·∫≠p kh·∫©u:</em></p>
            <ul>
                <li>H√†ng h√≥a nh·∫≠p kh·∫©u trong qu√° tr√¨nh d·ª° t·ª´ ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i nh·∫≠p c·∫£nh xu·ªëng kho, b√£i, c·∫£ng; h√†ng h√≥a nh·∫≠p kh·∫©u t·∫≠p k·∫øt t·∫°i kho, b√£i, c·∫£ng;</li>
                <li>H√†ng h√≥a nh·∫≠p kh·∫©u trong qu√° tr√¨nh l√†m th·ªß t·ª•c h·∫£i quan;</li>
                <li>H√†ng nh·∫≠p kh·∫©u ƒë√£ th√¥ng quan nh∆∞ng ch∆∞a ƒë∆∞a ra khu v·ª±c gi√°m s√°t h·∫£i quan.</li>
            </ul>

            <p><em>ƒê·ªëi v·ªõi h√†ng h√≥a xu·∫•t kh·∫©u:</em></p>
            <ul>
                <li>H√†ng h√≥a xu·∫•t kh·∫©u trong qu√° tr√¨nh l√†m th·ªß t·ª•c h·∫£i quan;</li>
                <li>H√†ng h√≥a xu·∫•t kh·∫©u ƒë√£ th√¥ng quan nh∆∞ng ch∆∞a ƒë∆∞a ra khu v·ª±c gi√°m s√°t h·∫£i quan.</li>
            </ul>

            <h3>Quy tr√¨nh s·ª≠ d·ª•ng:</h3>

            <p><strong>Tr∆∞·ªùng h·ª£p 1:</strong> Ki·ªÉm tra ph√°t hi·ªán c√°c lo·∫°i h√†ng c·∫•m c·∫•t gi·∫•u trong h√†nh l√Ω, h√†ng h√≥a, ph∆∞∆°ng ti·ªán ƒëang ch·ªãu s·ª± gi√°m s√°t h·∫£i quan.</p>
            <ol>
                <li>
                <p>Hu·∫•n luy·ªán vi√™n ph·ªëi h·ª£p v·ªõi c√°n b·ªô gi√°m s√°t, ki·ªÉm so√°t h·∫£i quan ƒë∆∞a CNV v√†o khu v·ª±c t·∫≠p k·∫øt h√†ng h√≥a xu·∫•t nh·∫≠p kh·∫©u, ph∆∞∆°ng ti·ªán xu·∫•t c·∫£nh, nh·∫≠p c·∫£nh ch∆∞a l√†m th·ªß t·ª•c h·∫£i quan ho·∫∑c h√†ng h√≥a ph∆∞∆°ng ti·ªán ƒë√£ ho√†n th√†nh th·ªß t·ª•c h·∫£i quan nh∆∞ng ch∆∞a xu·∫•t kh·∫©u, xu·∫•t c·∫£nh ƒëang ƒë·ªÉ trong kho, b·∫øn, b√£i, tr√™n bƒÉng chuy·ªÅn t·∫°i c√°c c·∫£ng bi·ªÉn, ga h√†ng kh√¥ng, ga xe l·ª≠a li√™n v·∫≠n qu·ªëc t·∫ø v√† c√°c ƒëi·ªÉm th√¥ng quan trong n·ªôi ƒë·ªãa ƒë·ªÉ ng·ª≠i ph√°t hi·ªán ma t√∫y, ch·∫•t n·ªï v√† c√°c h√†ng c·∫•m kh√°c.</p>
                </li>

                <li>
                <p>Hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV ƒë·ªÉ ki·ªÉm tra h√†ng h√≥a, ph∆∞∆°ng ti·ªán theo chi·∫øn thu·∫≠t chia khu v·ª±c ƒë·ªÉ ki·ªÉm tra tr·ªçng ƒëi·ªÉm. C√¥ng ch·ª©c h·∫£i quan l√†m nhi·ªám v·ª• gi√°m s√°t kho, b√£i y√™u c·∫ßu ch·ªß kho m·ªü c·ª≠a kho, h·ªó tr·ª£ ƒë·∫£m b·∫£o an to√†n cho hu·∫•n luy·ªán vi√™n trong su·ªët qu√° tr√¨nh l√†m vi·ªác c·ªßa CNV. Trong qu√° tr√¨nh ki·ªÉm tra, hu·∫•n luy·ªán vi√™n g·∫∑p kh√≥ khƒÉn c·∫ßn h·ªó tr·ª£ ƒë·ªÉ b·ªëc d·ª° h√†ng h√≥a nh·∫±m t·∫°o ƒëi·ªÅu ki·ªán thu·∫≠n l·ª£i cho CNV t√°c nghi·ªáp th√¨ y√™u c·∫ßu c√¥ng ch·ª©c h·∫£i quan trao ƒë·ªïi v·ªõi ƒë∆°n v·ªã qu·∫£n l√Ω kho, b√£i b·ªë tr√≠ ph∆∞∆°ng ti·ªán, nh√¢n l·ª±c b·ªëc d·ª° ƒë·ªÉ t·∫°o ƒëi·ªÅu ki·ªán cho CNV l√†m vi·ªác. N·∫øu CNV ph√°t hi·ªán c√≥ h∆°i ma t√∫y, ch·∫•t n·ªï h√†ng c·∫•m kh√°c trong h√†ng h√≥a th√¨ ƒë√°nh gi·∫•u v·ªã tr√≠ ph√°t hi·ªán, th√¥ng b√°o ngay cho c√¥ng ch·ª©c h·∫£i quan ph·ªëi h·ª£p b√≠ m·∫≠t gi√°m s√°t v√† b√°o c√°o l√£nh ƒë·∫°o ƒë·ªÉ ki·ªÉm tra chi ti·∫øt theo h∆∞·ªõng d·∫´n t·∫°i tr∆∞·ªùng h·ª£p 2.</p>

                <p>Vi·ªác ki·ªÉm tra h√†ng h√≥a trong kho, b√£i ch·ªâ th·ª±c hi·ªán trong gi·ªù l√†m vi·ªác c·ªßa doanh nghi·ªáp kinh doanh kho b√£i.</p>
                </li>

                <li>
                <p>Tr∆∞·ªùng h·ª£p CNV ph√°t hi·ªán c√≥ h∆°i ma t√∫y, ch·∫•t n·ªï, h√†ng c·∫•m kh√°c trong h√†nh l√Ω nh·∫≠p kh·∫©u c·ªßa kh√°ch nh·∫≠p c·∫£nh ƒëang ch·ªù nh·∫≠n th√¨ b√≠ m·∫≠t theo d√µi x√°c ƒë·ªãnh ch·ªß h√†nh l√Ω, √°p gi·∫£i ƒë·ªëi t∆∞·ª£ng v√† h√†nh l√Ω v√†o ph√≤ng l√†m vi·ªác ƒë·ªÉ ki·ªÉm tra chi ti·∫øt theo h∆∞·ªõng d·∫´n t·∫°i Tr∆∞·ªùng h·ª£p 2.</p>
                </li>

                <li>
                <p>Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng CNV ki·ªÉm tra h√†ng h√≥a, b∆∞u ph·∫©m, b∆∞u ki·ªán t·∫°i ƒë·ªãa b√†n chuy·ªÉn ph√°t nhanh, CNV s·∫Ω ki·ªÉm tra t·∫°i khu v·ª±c khai th√°c h√†ng h√≥a, ph√¢n lo·∫°i h√†ng h√≥a, khu v·ª±c m√°y soi. Ngo√†i ra CNV s·∫Ω ƒë∆∞·ª£c t√°c nghi·ªáp trong kho, k·ªá t·∫°m gi·ªØ (tr√¨nh t·ª± nh∆∞ ki·ªÉm tra trong kho h√†ng h√≥a th√¥ng th∆∞·ªùng).</p>
                </li>
            </ol>

            <p><strong>Tr∆∞·ªùng h·ª£p 2:</strong> Ki·ªÉm tra ph√°t hi·ªán c√°c lo·∫°i h√†ng c·∫•m c·∫•t gi·∫•u trong h√†ng h√≥a xu·∫•t nh·∫≠p kh·∫©u, ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i, h√†nh kh√°ch xu·∫•t nh·∫≠p c·∫£nh trong qu√° tr√¨nh ki·ªÉm tra h·∫£i quan.</p>

            <ol>
                <li>
                <p>Hu·∫•n luy·ªán vi√™n, c√¥ng ch·ª©c h·∫£i quan tham gia ki·ªÉm tra ph·∫£i th·ª±c hi·ªán c√°c b∆∞·ªõc sau:</p>
                <ul>
                    <li>B·ªë tr√≠ ƒë·ªß c√°n b·ªô, nh√¢n vi√™n ƒë·ªÉ ch·ªß ƒë·ªông th·ª±c hi·ªán c√°c bi·ªán ph√°p ƒë·ªÅ ph√≤ng ƒë·ªëi t∆∞·ª£ng ch·ªëng c·ª±, c∆∞·ªõp, t·∫©u t√°n tang v·∫≠t, ch·∫°y tr·ªën.</li>
                    <li>Tr·ª±c ti·∫øp th√¥ng b√°o cho ch·ªß h√†ng, ng∆∞·ªùi ƒë·∫°i di·ªán h·ª£p ph√°p c·ªßa ch·ªß h√†ng ho·∫∑c ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn ph∆∞∆°ng ti·ªán bi·∫øt m·ª•c ƒë√≠ch, n·ªôi dung v√† y√™u c·∫ßu h·ªç, ch·ª©ng ki·∫øn qu√° tr√¨nh ki·ªÉm tra.</li>
                    <li>Quan s√°t to√†n di·ªán b√™n ngo√†i, b√™n trong ph∆∞∆°ng ti·ªán v√† h√†ng h√≥a s·∫Ω ki·ªÉm tra, ph·ªèng v·∫•n v√† quan s√°t h√†nh vi, th√°i ƒë·ªô c·ªßa ch·ªß h√†ng ho·∫∑c ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn ph∆∞∆°ng ti·ªán ƒë·ªÉ ph√°t hi·ªán c√°c v·ªã tr√≠ nghi v·∫•n gi·∫•u ma t√∫y, ch·∫•t n·ªï...</li>
                    <li>Y√™u c·∫ßu ch·ªß h√†ng xu·∫•t tr√¨nh to√†n b·ªô h√†ng h√≥a ƒë·ªÉ CNV t√°c nghi·ªáp ƒë∆∞·ª£c thu·∫≠n l·ª£i.</li>
                    <li>S·ª≠ d·ª•ng CNV ki·ªÉm tra l·∫ßn l∆∞·ª£t b√™n ngo√†i, b√™n trong ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i, h√†ng h√≥a; t·∫≠p trung ki·ªÉm tra k·ªπ l∆∞·ª°ng nh·ªØng v·ªã tr√≠ nghi v·∫•n.</li>
                    <li>Ngo√†i h√†ng h√≥a, hu·∫•n luy·ªán vi√™n ph·∫£i s·ª≠ d·ª•ng CNV ng·ª≠i c√°c lo·∫°i bao b√¨ ƒë√≥ng g√≥i, c√°c lo·∫°i container, pallet (k·ªá, gi√° ƒë·ª°) c√°c v·∫≠t d·ª•ng kh√°c ƒë√£ v√† ƒëang ch·ª©a h√†ng h√≥a ƒë∆∞·ª£c ki·ªÉm tra.</li>
                    <li>Khi CNV ph√°t hi·ªán c√≥ h∆°i ma t√∫y, ch·∫•t n·ªï h√†ng c·∫•m tr√™n ph∆∞∆°ng ti·ªán, h√†ng h√≥a, h√†nh l√Ω ph·∫£i m·ªü v√† ki·ªÉm tra chi ti·∫øt, x√°c ƒë·ªãnh c√≥ hay kh√¥ng c√≥ ma t√∫y, ch·∫•t n·ªï.</li>
                    <li>N·∫øu ph√°t hi·ªán c√≥ h√†ng c·∫•m ƒë∆∞·ª£c c·∫•t gi·∫•u th√¨ th·ª±c hi·ªán theo quy ƒë·ªãnh c·ªßa T·ªïng c·ª•c v·ªÅ quy tr√¨nh ph√°t hi·ªán ngƒÉn ch·∫∑n, x·ª≠ l√Ω c√°c v·ª• vi·ªác mua b√°n, v·∫≠n chuy·ªÉn tr√°i ph√©p c√°c ch·∫•t ma tu√Ω c·ªßa ng√†nh H·∫£i quan v√† theo ƒêi·ªÅu 27 c·ªßa quy ƒë·ªãnh n√†y.</li>
                    <li>N·∫øu kh√¥ng ph√°t hi·ªán ra h√†ng c·∫•m th√¨ l√†m th·ªß t·ª•c th√¥ng quan theo quy ƒë·ªãnh.</li>
                </ul>
                </li>
            </ol>

            <p><strong>Tr∆∞·ªùng h·ª£p 3:</strong> Ki·ªÉm tra ph√°t hi·ªán c√°c lo·∫°i h√†ng c·∫•m trong ho·∫°t ƒë·ªông tu·∫ßn tra h·∫£i quan.</p>
            <ol>
                <li>Hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV ki·ªÉm tra c√°c ƒë·ªãa ƒëi·ªÉm, ƒë·ªëi t∆∞·ª£ng theo m·ªánh l·ªánh c·ªßa t·ªï tr∆∞·ªüng t·ªï tu·∫ßn tra.</li>
                <li>Tr∆∞·ªùng h·ª£p ph√°t hi·ªán c√≥ h∆°i ma t√∫y, ch·∫•t n·ªï th√¨ b√°o c√°o t·ªï tr∆∞·ªüng t·ªï tu·∫ßn tra, t·ªï ch·ª©c b·∫£o v·ªá khu v·ª±c, v·ªã tr√≠ ph√°t hi·ªán ma t√∫y v√† l·ª•c so√°t ƒë·ªÉ x√°c ƒë·ªãnh v√† thu gi·ªØ tang v·∫≠t.</li>
                <li>Tr∆∞·ªùng h·ª£p ki·ªÉm tra ph√°t hi·ªán c√≥ h∆°i ma t√∫y, ch·∫•t n·ªï tr√™n ng∆∞·ªùi, h√†nh l√Ω c·ªßa ƒë·ªëi t∆∞·ª£ng th√¨ √°p t·∫£i ƒë·ªëi t∆∞·ª£ng v·ªÅ tr·ª• s·ªü c∆° quan ƒë·ªÉ ki·ªÉm tra l√†m r√µ.</li>
                <li>K·∫øt th√∫c tu·∫ßn tra, t·ªï tr∆∞·ªüng tu·∫ßn tra x√°c nh·∫≠n k·∫øt qu·∫£ l√†m vi·ªác c·ªßa hu·∫•n luy·ªán vi√™n v√† CNV. B√°o c√°o c·∫•p c√≥ th·∫©m quy·ªÅn, ƒë·ªÅ xu·∫•t bi·ªán ph√°p x·ª≠ l√Ω v·ª• vi·ªác, tang v·∫≠t v√† ƒë·ªëi t∆∞·ª£ng ƒë√£ ph√°t hi·ªán, c·∫•t gi·ªØ.</li>
            </ol>

            <p><strong>Tr∆∞·ªùng h·ª£p 4:</strong> S·ª≠ d·ª•ng CNV trong kh√°m x√©t theo th·ªß t·ª•c h√†nh ch√≠nh, t·ªë t·ª•ng h√¨nh s·ª±.</p>
            <ol>
                <li>Khi c√≥ l·ªánh kh√°m x√©t c·ªßa c·∫•p c√≥ th·∫©m quy·ªÅn v√† ph√¢n c√¥ng c·ªßa th·ªß tr∆∞·ªüng ƒë∆°n v·ªã, hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV tham gia kh√°m x√©t.</li>
                <li>Ng∆∞·ªùi ch·ªâ huy kh√°m x√©t ph·∫£i ƒë·∫£m b·∫£o an to√†n v√† t·∫°o ƒëi·ªÅu ki·ªán ƒë·ªÉ hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV ho·∫°t ƒë·ªông thu·∫≠n l·ª£i.</li>
                <li>Trong qu√° tr√¨nh kh√°m x√©t hu·∫•n luy·ªán vi√™n s·ª≠ d·ª•ng CNV theo tr√¨nh t·ª±, thao t√°c nghi·ªáp v·ª• ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán (chia khu v·ª±c v√† ki·ªÉm tra l·∫ßn l∆∞·ª£t h·∫øt c√°c khu v·ª±c c·∫ßn kh√°m x√©t) v√† theo l·ªánh c·ªßa ng∆∞·ªùi ch·ªâ huy kh√°m x√©t.</li>
                <li>Khi CNV ph√°t hi·ªán c√≥ h∆°i ma t√∫y, ch·∫•t n·ªï, h√†ng c·∫•m hu·∫•n luy·ªán vi√™n ph·∫£i b√°o c√°o ngay v·ªõi ng∆∞·ªùi ch·ªâ huy kh√°m x√©t ƒë·ªÉ l·ª•c so√°t, t√¨m ki·∫øm v√† thu gi·ªØ tang v·∫≠t.</li>
            </ol>

            <h2>ƒêi·ªÅu 27. X·ª≠ l√Ω t√¨nh hu·ªëng</h2>

            <ol>
                <li>
                <p>Trong khi ki·ªÉm tra n·∫øu CNV ph√°t hi·ªán ngu·ªìn h∆°i c√°c lo·∫°i h√†ng c·∫•m trong h√†ng h√≥a, h√†nh l√Ω, ph∆∞∆°ng ti·ªán v·∫≠n t·∫£i c·ªßa ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c h∆∞·ªüng ch·∫ø ƒë·ªô ∆∞u ƒë√£i mi·ªÖn tr·ª´ th√¨ T·ªïng c·ª•c tr∆∞·ªüng T·ªïng c·ª•c H·∫£i quan quy·∫øt ƒë·ªãnh vi·ªác x·ª≠ l√Ω theo quy ƒë·ªãnh.</p>
                </li>

                <li>
                <p>Tr∆∞·ªùng h·ª£p ch·ªß h√†ng h√≥a, ng∆∞·ªùi ƒë·∫°i di·ªán h·ª£p ph√°p c·ªßa ch·ªß h√†ng, ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn ph∆∞∆°ng ti·ªán b·ªè tr·ªën ho·∫∑c kh√¥ng ch·∫•p h√†nh th√¨ b√°o c√°o l√£nh ƒë·∫°o tr·ª±c ti·∫øp ƒë·ªÉ t·ªï ch·ª©c gi√°m s√°t, b·∫£o v·ªá ƒë·ªìng th·ªùi m·ªùi ng∆∞·ªùi ch·ª©ng ki·∫øn r·ªìi m·ªõi ti·∫øp t·ª•c th·ª±c hi·ªán ki·ªÉm tra h√†ng h√≥a, ph∆∞∆°ng ti·ªán. K·∫øt th√∫c qu√° tr√¨nh ki·ªÉm tra ph·∫£i l·∫≠p bi√™n b·∫£n ki·ªÉm tra h√†ng ho√°, ph∆∞∆°ng ti·ªán, k√Ω v√† ghi r√µ h·ªç t√™n c·ªßa ng∆∞·ªùi ch·ª©ng ki·∫øn.</p>
                </li>

                <li>
                <p>Tr∆∞·ªùng h·ª£p ƒë·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng v≈© l·ª±c, v≈© kh√≠ ch·ªëng ng∆∞·ªùi thi h√†nh c√¥ng v·ª•, ch·∫°y tr·ªën khi b·ªã ki·ªÉm tra th√¨ s·ª≠ d·ª•ng c√°c bi·ªán ph√°p tr·∫•n √°p, truy ƒëu·ªïi ƒë·ªÉ b·∫Øt gi·ªØ ƒë·ªëi t∆∞·ª£ng v√† b√°o c√°o l√£nh ƒë·∫°o gi·∫£i quy·∫øt ti·∫øp.</p>
                </li>

                <li>
                <p>Tr∆∞·ªùng h·ª£p ph√°t hi·ªán, b·∫Øt gi·ªØ t·ªôi ph·∫°m, thu gi·ªØ ma t√∫y, ch·∫•t n·ªï, h√†ng c·∫•m kh√°c th√¨ ƒë∆°n v·ªã ch·ªß tr√¨ b·∫Øt gi·ªØ b√°o c√°o v·ªÅ T·ªïng c·ª•c qua C·ª•c ƒêi·ªÅu tra ch·ªëng bu√¥n l·∫≠u, C·ª•c H·∫£i quan t·ªânh, li√™n t·ªânh, th√†nh ph·ªë v√† b√†n giao h·ªì s∆°, tang v·∫≠t, ƒë·ªëi t∆∞·ª£ng cho c∆° quan C√¥ng an theo quy ƒë·ªãnh.</p>
                </li>

                <li>
                <p>ƒê·ªëi v·ªõi tr∆∞·ªùng h·ª£p CNV ch·ªß ƒë·ªông ph√°t hi·ªán th·∫•y c√°c ch·∫•t ma t√∫y, ch·∫•t c·∫•m trong khi ki·ªÉm tra h√†nh l√Ω, h√†nh kh√°ch xu·∫•t nh·∫≠p c·∫£nh, qu√° c·∫£nh, h√†ng h√≥a xu·∫•t nh·∫≠p kh·∫©u, h√†ng h√≥a qu√° c·∫£nh, ph∆∞∆°ng ti·ªán xu·∫•t nh·∫≠p c·∫£nh, qu√° c·∫£nh‚Ä¶qua ƒë·ªãa b√†n h·∫£i quan, theo k·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c c√°c c·∫•p l√£nh ƒë·∫°o ph√™ duy·ªát ph√¢n c√¥ng th∆∞·ªùng xuy√™n h·∫±ng ng√†y, h·∫±ng tu·∫ßn th√¨ hu·∫•n luy·ªán vi√™n b√°o c√°o l√£nh ƒë·∫°o ƒë∆°n v·ªã v√† ph·ªëi h·ª£p v·ªõi c√¥ng ch·ª©c h·∫£i quan t·∫°i ƒë·ªãa b√†n l·∫≠p bi√™n b·∫£n b√†n giao tang v·∫≠t cho c√°c ƒê·ªôi nghi·ªáp v·ª• n∆°i t√°c nghi·ªáp ƒë·ªÉ ti·∫øp t·ª•c th·ª±c hi·ªán theo quy tr√¨nh, quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t.</p>
                </li>

                <li>
                <p><strong>H·ªì s∆°, b√°o c√°o:</strong></p>
                <ul>
                    <li>Hu·∫•n luy·ªán vi√™n vi·∫øt nh·∫≠t k√Ω k·∫øt qu·∫£ t√°c nghi·ªáp, ki·ªÉm tra, kh√°m x√©t sau m·ªói bu·ªïi l√†m vi·ªác. Tr∆∞·ªùng h·ª£p CNV ph√°t hi·ªán ra ma t√∫y, ch·∫•t n·ªï th√¨ tham gia l·∫≠p v√† k√Ω bi√™n b·∫£n ki·ªÉm tra, thu gi·ªØ tang v·∫≠t, bi√™n b·∫£n b·∫Øt gi·ªØ ƒë·ªëi t∆∞·ª£ng n·∫øu c√≥.</li>
                    <li>C√¥ng ch·ª©c H·∫£i quan ki·ªÉm tra th·ª±c t·∫ø h√†ng h√≥a l√† ng∆∞·ªùi ch·ªß tr√¨ vi·ªác vi·∫øt ·∫•n ch·ªâ.</li>
                    <li>Tr∆∞·ªùng h·ª£p ph√°t hi·ªán ra ma t√∫y, ch·∫•t n·ªï th√¨ l·∫≠p bi√™n b·∫£n ki·ªÉm tra, thu gi·ªØ tang v·∫≠t v√† bi√™n b·∫£n b·∫Øt gi·ªØ ƒë·ªëi t∆∞·ª£ng vi ph·∫°m n·∫øu c√≥.</li>
                    <li>N·∫øu kh√¥ng ph√°t hi·ªán ra ma t√∫y, ch·∫•t n·ªï th√¨ b√°o c√°o l√£nh ƒë·∫°o v√† l√†m th·ªß t·ª•c h·∫£i quan theo quy ƒë·ªãnh.</li>
                </ul>
                </li>
            </ol>
            </main>
            `;



    } else if (type === 'K·∫æ HO·∫†CH CHƒÇM S√ìC, HU·∫§N LUY·ªÜN') {

        title.innerText = 'K·∫æ HO·∫†CH CHƒÇM S√ìC, HU·∫§N LUY·ªÜN';

        // Check if user can upload (Admin only)
        const canUpload = currentUserRole === 'ADMIN';

        content.innerHTML = `
            <div class="care-plan-container">
                
                ${canUpload ? `
                <div class="care-plan-upload-section">
                    <h4>üì§ Upload t√†i li·ªáu m·ªõi</h4>
                    <div class="upload-area">
                        <input type="file" id="carePlanFile" accept=".pdf" style="display: none;">
                        <div class="upload-dropzone" onclick="document.getElementById('carePlanFile').click()">
                            <div class="upload-icon">üìÑ</div>
                            <p>Nh·∫•p ƒë·ªÉ ch·ªçn file PDF ho·∫∑c k√©o th·∫£ v√†o ƒë√¢y</p>
                            <small>Ch·ªâ ch·∫•p nh·∫≠n file PDF, t·ªëi ƒëa 10MB</small>
                        </div>
                        <div class="upload-progress" id="uploadProgress" style="display: none;">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progressFill"></div>
                            </div>
                            <span id="progressText">0%</span>
                        </div>
                    </div>
                    <button id="uploadBtn" class="upload-btn" onclick="uploadCarePlan()" disabled>
                        üì§ Upload PDF
                    </button>
                </div>
                ` : ''}
                
                <div class="care-plan-viewer-section">
                    <h4>üìñ T√†i li·ªáu hi·ªán t·∫°i</h4>
                    <div id="carePlanViewer" class="care-plan-viewer">
                        <div class="loading">ƒêang t·∫£i t√†i li·ªáu...</div>
                    </div>
                </div>
            </div>
        `;

        // Load and display the current care plan PDF
        loadCurrentCarePlan();

        // Setup file input change handler if user can upload
        if (canUpload) {
            document.getElementById('carePlanFile').addEventListener('change', handleFileSelect);
        }

    } else {

        title.innerText = type;

        content.innerHTML = '<p>ƒê√¢y l√† n·ªôi dung c·ªßa m·ª•c "' + type + '". B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t n·ªôi dung sau.</p>';

    }



    document.getElementById("searchResults").style.display = "none";

}

// Function to load dog profiles from database only
async function loadDogProfilesFromDatabase() {
    const container = document.getElementById('dogProfilesList');

    if (!container) {
        return;
    }

    try {
        // Fetch dogs from database API
        const response = await fetch('/api/dogs', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            const dogs = data.data || [];

            if (dogs.length === 0) {
                container.innerHTML = '<div class="no-data">Ch∆∞a c√≥ ch√≥ nghi·ªáp v·ª• n√†o trong c∆° s·ªü d·ªØ li·ªáu.</div>';
                return;
            }

            // Display dogs from database only
            let html = '<div class="dog-profiles-grid">';
            dogs.forEach(dog => {
                const trainerName = dog.trainer_name || 'Ch∆∞a ph√¢n c√¥ng';
                const statusClass = dog.status ? dog.status.toLowerCase().replace(' ', '-') : 'unknown';

                html += `
                    <div class="dog-profile-card">
                        <div class="dog-profile-header">
                            <h4>${dog.name}</h4>
                            <span class="status-badge status-${statusClass}">${dog.status || 'UNKNOWN'}</span>
                        </div>
                        <div class="dog-profile-details">
                            <p><strong>S·ªë Chip:</strong> ${dog.chip_id || 'N/A'}</p>
                            <p><strong>Gi·ªëng:</strong> ${dog.breed || 'N/A'}</p>
                            <p><strong>Hu·∫•n luy·ªán vi√™n:</strong> ${trainerName}</p>
                            <p><strong>Ng√†y sinh:</strong> ${dog.birth_date || 'N/A'}</p>
                            <p><strong>N∆°i sinh:</strong> ${dog.birth_place || 'N/A'}</p>
                        </div>
                        <div class="dog-profile-actions">
                            <button class="btn btn-primary" onclick="showDogProfileForm('${dog.name}')">
                                Xem Chi Ti·∫øt
                            </button>
                        </div>
                    </div>
                `;
            });
            html += '</div>';

            container.innerHTML = html;
        } else {
            container.innerHTML = '<div class="error">L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu.</div>';
        }
    } catch (error) {
        container.innerHTML = '<div class="error">Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.</div>';
    }
}

// Function hi·ªÉn th·ªã dog profile t·ª´ DASHBOARD DATA v·ªõi t√™n ƒë√∫ng HLV

async function showDogProfileForm(dogName) {

    // Ki·ªÉm tra quy·ªÅn c·ªßa Trainer

    if (currentUserRole === 'TRAINER' && !currentUserAssignedDogs.includes(dogName)) {

        alert('B·∫°n ch·ªâ c√≥ th·ªÉ xem h·ªì s∆° ch√≥ ƒë∆∞·ª£c ph√¢n c√¥ng!');

        return;

    }



    hideAllContentSections();

    document.getElementById('toggleReadButton').style.display = 'block';



    const content = document.getElementById('content');

    content.style.display = "block";

    content.style.justifyContent = 'flex-start';

    content.style.alignItems = 'flex-start';

    content.style.height = 'auto';

    // S·ª¨A: ƒê·∫£m b·∫£o content kh√¥ng ƒë√® l√™n navigation

    content.style.position = 'relative';

    content.style.zIndex = '1';



    const title = document.getElementById('title');

    title.innerText = dogName;



    // Get dog data from database via API
    let currentDog = null;
    try {
        const response = await fetch('/api/dogs', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            const dogs = data.data || [];
            currentDog = dogs.find(d => d.name === dogName);
        }
    } catch (error) {
    }



    // READ-ONLY cho t·∫•t c·∫£ role ngo·∫°i tr·ª´ Admin

    const isReadOnly = currentUserRole !== 'ADMIN';

    const readOnlyAttr = isReadOnly ? 'readonly' : '';

    const saveButtonDisplay = isReadOnly ? 'style="display: none;"' : '';



    // Enhanced dog profile display with better styling

    content.innerHTML = `

        <div class="dog-profile-container">

            ${isReadOnly ? '<div class="read-only-banner">CH·∫æ ƒê·ªò XEM - Ch·ªâ Admin m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a</div>' : ''}

            

            <div class="dog-profile-header">

                <img id="dog_profile_image" src="images/default_dog.jpg" alt="·∫¢nh CNV" class="profile-dog-image">

                <div>

                    <h3>S∆† Y·∫æU L√ù L·ªäCH</h3>

                    <div class="status-indicator status-active">HO·∫†T ƒê·ªòNG</div>

                </div>

            </div>



            <div class="profile-section">

                <h3>Th√¥ng tin c∆° b·∫£n</h3>

                <div class="profile-field">

                    <label>1. T√™n CNV:</label>

                    <input type="text" id="syll_name" value="${currentDog?.name || dogName}" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>2. S·ªë hi·ªáu:</label>

                    <input type="text" id="syll_sohieu" value="${currentDog?.chip_id || ''}" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>3. Ng√†y sinh:</label>

                    <input type="date" id="syll_ngaysinh" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>4. N∆°i sinh:</label>

                    <input type="text" id="syll_noisinh" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>5. Gi·ªëng CNV:</label>

                    <input type="text" id="syll_giong" value="${currentDog?.breed || ''}" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>6. T√≠nh bi·ªát:</label>

                    <input type="text" id="syll_tinhbiet" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>7. ƒê·∫∑c ƒëi·ªÉm ngo·∫°i h√¨nh:</label>

                    <input type="text" id="syll_dacdiem" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>8. M√†u l√¥ng:</label>

                    <input type="text" id="syll_maulong" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>9. S·ªë gi√° tr·ªã:</label>

                    <input type="text" id="syll_giatri" ${readOnlyAttr}>

                </div>

            </div>



            <div class="profile-section">

                <h3>D√≤ng h·ªç</h3>

                <div class="profile-field">

                    <label>1. T√™n b·ªë:</label>

                    <input type="text" id="dongho_ba" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>2. Ng√†y sinh:</label>

                    <input type="date" id="dongho_ngaysinh" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>3. N∆°i sinh:</label>

                    <input type="text" id="dongho_noisinh" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>4. Gi·ªëng:</label>

                    <input type="text" id="dongho_giong" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>5. ƒê·∫∑c ƒëi·ªÉm ngo·∫°i h√¨nh:</label>

                    <input type="text" id="dongho_dacdiem" ${readOnlyAttr}>

                </div>

            </div>



            <div class="profile-section">

                <div class="hlv-profile-header">

                    <img id="hlv_profile_image" src="${hlvInfo.image || 'images/default_hvl.jpg'}" alt="·∫¢nh HLV" class="profile-hlv-image">

                    <h3>HU·∫§N LUY·ªÜN VI√äN QU·∫¢N L√ù</h3>

                </div>

                <div class="profile-field">

                    <label>1. H·ªç v√† t√™n HLV:</label>

                    <input type="text" id="hlv_ten" value="${currentUserName || hlvInfo.name}" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>2. Ng√†y th√°ng nƒÉm sinh HLV:</label>

                    <input type="date" id="hlv_ngaysinh" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>3. S·ªë hi·ªáu:</label>

                    <input type="text" id="hlv_sohieu" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>4. Ch·ª©c v·ª•:</label>

                    <input type="text" id="hlv_chucvu" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>5. ƒê∆°n v·ªã:</label>

                    <input type="text" id="hlv_donvi" ${readOnlyAttr}>

                </div>

                <div class="profile-field">

                    <label>6. Qua tr∆∞·ªùng ƒë√†o t·∫°o:</label>

                    <input type="text" id="hlv_daotao" ${readOnlyAttr}>

                </div>

            </div>



            <div class="profile-actions">

                <button onclick="saveDogProfile('${dogName}')" class="profile-btn profile-btn-success" ${saveButtonDisplay}>

                    üíæ L∆∞u h·ªì s∆°

                </button>

                <button onclick="exportDogProfile('${dogName}')" class="profile-btn profile-btn-primary">

                    üìÑ Xu·∫•t PDF

                </button>

                <button onclick="printDogProfile('${dogName}')" class="profile-btn profile-btn-secondary">

                    üñ®Ô∏è In h·ªì s∆°

                </button>

            </div>

        </div>

    `;



    loadDogProfile(dogName);

}



// Function to save dog profile

async function saveDogProfile(dogName) {

    if (currentUserRole !== 'ADMIN') {

        alert('Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a h·ªì s∆°!');

        return;

    }



    const data = {

        name: document.getElementById('syll_name').value,

        sohieu: document.getElementById('syll_sohieu').value,

        ngaysinh: document.getElementById('syll_ngaysinh').value,

        noisinh: document.getElementById('syll_noisinh').value,

        giong: document.getElementById('syll_giong').value,

        tinhbiet: document.getElementById('syll_tinhbiet').value,

        dacdiem: document.getElementById('syll_dacdiem').value,

        maulong: document.getElementById('syll_maulong').value,

        giatri: document.getElementById('syll_giatri').value,

        dongho_ba: document.getElementById('dongho_ba').value,

        dongho_ngaysinh: document.getElementById('dongho_ngaysinh').value,

        dongho_noisinh: document.getElementById('dongho_noisinh').value,

        dongho_giong: document.getElementById('dongho_giong').value,

        dongho_dacdiem: document.getElementById('dongho_dacdiem').value,

        hlv_ten: document.getElementById('hlv_ten').value,

        hlv_ngaysinh: document.getElementById('hlv_ngaysinh').value,

        hlv_capbac: document.getElementById('hlv_capbac').value,

        hlv_chucvu: document.getElementById('hlv_chucvu').value,

        hlv_donvi: document.getElementById('hlv_donvi').value,

        hlv_daotao: document.getElementById('hlv_daotao').value

    };



    // Save dog profile to database via API
    try {
        const response = await fetch(`/api/dogs/${data.chip_id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            // Dog profile saved to database
        } else {
        }
    } catch (error) {
    }

}



// Function to load dog profile

async function loadDogProfile(dogName) {
    // Load dog profile from database
    try {
        const response = await fetch('/api/dogs', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            const dogs = data.data || [];
            const dogData = dogs.find(d => d.name === dogName);

            if (dogData) {
                // Populate form fields with dog data from database

                document.getElementById('syll_name').value = dogData.name || '';

                document.getElementById('syll_sohieu').value = dogData.chip_id || '';

                document.getElementById('syll_ngaysinh').value = dogData.birth_date || '';

                document.getElementById('syll_noisinh').value = dogData.birth_place || '';

                document.getElementById('syll_giong').value = dogData.breed || '';

                document.getElementById('syll_tinhbiet').value = dogData.gender || '';

                document.getElementById('syll_dacdiem').value = dogData.features || '';

                document.getElementById('syll_maulong').value = dogData.fur_color || '';

                document.getElementById('syll_giatri').value = dogData.value || '';

                document.getElementById('dongho_ba').value = dogData.father_name || '';

                document.getElementById('dongho_ngaysinh').value = dogData.father_birth || '';

                document.getElementById('dongho_noisinh').value = dogData.father_place || '';

                document.getElementById('dongho_giong').value = dogData.father_breed || '';

                document.getElementById('dongho_dacdiem').value = dogData.father_features || '';

                document.getElementById('hlv_ten').value = dogData.hlv_ten || currentUserName || hlvInfo.name;

                document.getElementById('hlv_ngaysinh').value = dogData.hlv_ngaysinh || '';

                document.getElementById('hlv_capbac').value = dogData.hlv_capbac || '';

                document.getElementById('hlv_chucvu').value = dogData.hlv_chucvu || '';

                document.getElementById('hlv_donvi').value = dogData.hlv_donvi || '';

                document.getElementById('hlv_daotao').value = dogData.hlv_daotao || '';

                // Update status indicator
                const statusIndicator = document.querySelector('.status-indicator');
                if (statusIndicator && dogData.status) {
                    statusIndicator.textContent = dogData.status;
                    statusIndicator.className = `status-indicator status-${dogData.status.toLowerCase()}`;
                }


            } else {

                document.getElementById('hlv_ten').value = currentUserName || hlvInfo.name;

            }

        }
    } catch (error) {
        // Set default trainer name on error
        document.getElementById('hlv_ten').value = currentUserName || hlvInfo.name;
    }
}

// Function to export dog profile to PDF
function exportDogProfile(dogName) {

    const profileContainer = document.querySelector('.dog-profile-container');

    if (!profileContainer) {

        alert('Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒë·ªÉ xu·∫•t PDF!');

        return;

    }



    // Hide action buttons for PDF export

    const actionButtons = profileContainer.querySelector('.profile-actions');

    if (actionButtons) {

        actionButtons.style.display = 'none';

    }



    // Generate PDF

    html2canvas(profileContainer, {

        scale: 2,

        useCORS: true,

        backgroundColor: '#ffffff'

    }).then(canvas => {

        const imgData = canvas.toDataURL('image/png');

        const pdf = new jspdf.jsPDF('p', 'mm', 'a4');



        const imgWidth = 210;

        const pageHeight = 295;

        const imgHeight = (canvas.height * imgWidth) / canvas.width;

        let heightLeft = imgHeight;



        let position = 0;



        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);

        heightLeft -= pageHeight;



        while (heightLeft >= 0) {

            position = heightLeft - imgHeight;

            pdf.addPage();

            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);

            heightLeft -= pageHeight;

        }



        pdf.save(`Ho_so_${dogName}_${new Date().toISOString().split('T')[0]}.pdf`);



        // Show action buttons again

        if (actionButtons) {

            actionButtons.style.display = 'flex';

        }



        alert('‚úÖ H·ªì s∆° ƒë√£ ƒë∆∞·ª£c xu·∫•t PDF th√†nh c√¥ng!');

    }).catch(error => {


        alert('‚ùå C√≥ l·ªói khi xu·∫•t PDF. Vui l√≤ng th·ª≠ l·∫°i!');



        // Show action buttons again

        if (actionButtons) {

            actionButtons.style.display = 'flex';

        }

    });

}



// Function to print dog profile

function printDogProfile(dogName) {

    const profileContainer = document.querySelector('.dog-profile-container');

    if (!profileContainer) {

        alert('Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒë·ªÉ in!');

        return;

    }



    // Hide action buttons for printing

    const actionButtons = profileContainer.querySelector('.profile-actions');

    if (actionButtons) {

        actionButtons.style.display = 'none';

    }



    // Create print window

    const printWindow = window.open('', '_blank');

    printWindow.document.write(`

        <html>

            <head>

                <title>H·ªì s∆° ${dogName}</title>

                <style>

                    body { 

                        font-family: Arial, sans-serif; 

                        margin: 20px; 

                        color: #333;

                    }

                    .dog-profile-container { 

                        max-width: 100%; 

                        margin: 0 auto; 

                    }

                    .dog-profile-header { 

                        background: #007bff; 

                        color: white; 

                        padding: 20px; 

                        border-radius: 10px; 

                        margin-bottom: 20px;

                        display: flex;

                        align-items: center;

                        gap: 20px;

                    }

                    .profile-dog-image { 

                        width: 80px; 

                        height: 80px; 

                        border-radius: 50%; 

                        border: 3px solid white;

                    }

                    .profile-section { 

                        background: #f8f9fa; 

                        padding: 20px; 

                        margin: 15px 0; 

                        border-radius: 8px; 

                        border-left: 4px solid #007bff;

                    }

                    .profile-section h3 { 

                        color: #007bff; 

                        margin-bottom: 15px; 

                        border-bottom: 2px solid #dee2e6; 

                        padding-bottom: 10px;

                    }

                    .profile-field { 

                        display: flex; 

                        margin: 10px 0; 

                        padding: 10px; 

                        background: white; 

                        border-radius: 5px;

                    }

                    .profile-field label { 

                        font-weight: bold; 

                        min-width: 200px; 

                        margin-right: 15px;

                    }

                    .profile-field input { 

                        flex: 1; 

                        border: none; 

                        background: transparent; 

                        font-size: 14px;

                    }

                    .hlv-profile-header { 

                        background: #28a745; 

                        color: white; 

                        padding: 15px; 

                        border-radius: 8px; 

                        margin-bottom: 15px;

                        display: flex;

                        align-items: center;

                        gap: 15px;

                    }

                    .profile-hlv-image { 

                        width: 60px; 

                        height: 60px; 

                        border-radius: 50%; 

                        border: 2px solid white;

                    }

                    @media print {

                        body { margin: 0; }

                        .dog-profile-container { box-shadow: none; }

                    }

                </style>

            </head>

            <body>

                ${profileContainer.outerHTML}

            </body>

        </html>

    `);



    printWindow.document.close();

    printWindow.focus();



    // Wait for content to load then print

    setTimeout(() => {

        printWindow.print();

        printWindow.close();



        // Show action buttons again

        if (actionButtons) {

            actionButtons.style.display = 'flex';

        }

    }, 500);

}



// Function to perform search

function performSearch() {

    const keyword = document.getElementById("searchInput").value.trim().toLowerCase();

    const sidebarItems = document.querySelectorAll('.sidebar ul li');

    const contentDiv = document.getElementById("content");

    const searchDiv = document.getElementById("searchResults");



    if (keyword === "") {

        // Please enter keyword

        return;

    }



    let found = false;



    sidebarItems.forEach(item => {

        item.style.backgroundColor = '';

    });



    sidebarItems.forEach(item => {

        const text = item.innerText.toLowerCase();

        if (text.includes(keyword)) {

            item.style.backgroundColor = '#4e8cff';

            item.scrollIntoView({

                behavior: 'smooth',

                block: 'center'

            });

            if (item.onclick) {

                item.click();

            } else if (item.querySelector('.sub-menu')) {

                const submenu = item.querySelector('.sub-menu');

                if (submenu) {

                    submenu.classList.toggle('open');

                }

            } else if (item.closest('.sub-menu')) {

                const parentLi = item.closest('.sub-menu').previousElementSibling;

                if (parentLi && parentLi.querySelector('.sub-menu')) {

                    parentLi.querySelector('.sub-menu').classList.add('open');

                    item.click();

                }

            } else {

                const contentName = item.innerText.replace(/üê∂|‚ûï|üîß|üß†/g, '').trim();

                if (contentName === 'T·ªîNG QUAN' || contentName === 'QUY TR√åNH CHƒÇM S√ìC' || contentName === 'QUY TR√åNH S·ª¨ D·ª§NG' || contentName === 'QUY TR√åNH HU·∫§N LUY·ªÜN' || contentName === 'K·∫æ HO·∫†CH CHƒÇM S√ìC, HU·∫§N LUY·ªÜN' || contentName === 'VIDEO H∆Ø·ªöNG D·∫™N') {

                    showContent(contentName);

                }

            }

            found = true;

        }

    });



    if (!found) {

        const currentContentHtml = contentDiv.innerHTML;

        const tempDiv = document.createElement('div');

        tempDiv.innerHTML = currentContentHtml;

        const allParagraphs = tempDiv.querySelectorAll("p, h1, h2, h3, h4, li");



        let resultHTML = "";

        let contentFound = false;



        allParagraphs.forEach(el => {

            const text = el.innerText.toLowerCase();

            if (text.includes(keyword)) {

                const regex = new RegExp('(' + keyword + ')', 'gi');

                const highlighted = el.innerHTML.replace(regex, '<mark>$1</mark>');

                resultHTML += '<p>' + highlighted + '</p>';

                contentFound = true;

            }

        });



        if (contentFound) {

            contentDiv.style.display = 'none';

            searchDiv.style.display = 'block';

            searchDiv.innerHTML = '<h3>K·∫øt qu·∫£ t√¨m ki·∫øm cho "' + keyword + '":</h3><div class="search-results-content">' + resultHTML + '</div><button onclick="backToMainContent()">Quay l·∫°i</button>';

            found = true;

        }

    }



    if (!found) {

        // Keyword not found

    }

}



// Function to go back to main content

function backToMainContent() {

    document.getElementById("searchResults").style.display = "none";

    document.getElementById("content").style.display = "block";

    showContent(document.getElementById('title').innerText);

    // Initialize audio system for TTS
    initializeAudioSystem();

}



let isSpeaking = false;
let ttsPlaybackSpeed = 1.5; // Default speed: 1.5x faster
let currentUtterance = null;
let currentAudio = null;
let audioCache = new Map(); // Cache for audio file mappings
let audioPreloaded = false;

// UTF-8 safe content hashing function
function createContentHash(text) {
    // Convert string to UTF-8 bytes
    const utf8Bytes = new TextEncoder().encode(text);

    // Convert bytes to hex string
    let hexString = '';
    for (let i = 0; i < utf8Bytes.length; i++) {
        hexString += utf8Bytes[i].toString(16).padStart(2, '0');
    }

    // Take first 16 characters as hash
    return hexString.substring(0, 16);
}

// Function to preload audio files for all content sections
async function preloadAllAudio() {
    if (audioPreloaded) {
        return;
    }


    const contentSections = [
        {
            title: 'T·ªîNG QUAN',
            content: 'Trong b·ªëi c·∫£nh t√¨nh h√¨nh bu√¥n l·∫≠u, v·∫≠n chuy·ªÉn tr√°i ph√©p h√†ng h√≥a, ma t√∫y v√† c√°c h√†nh vi vi ph·∫°m ph√°p lu·∫≠t qua bi√™n gi·ªõi ng√†y c√†ng di·ªÖn bi·∫øn ph·ª©c t·∫°p, tinh vi v√† c√≥ t·ªï ch·ª©c, c√¥ng t√°c ki·ªÉm so√°t, ph√°t hi·ªán, ƒë·∫•u tranh ph√≤ng ch·ªëng t·ªôi ph·∫°m ƒë·∫∑t ra nhi·ªÅu y√™u c·∫ßu, th√°ch th·ª©c m·ªõi ƒë·ªëi v·ªõi l·ª±c l∆∞·ª£ng H·∫£i quan Vi·ªát Nam. M·ªôt trong nh·ªØng bi·ªán ph√°p nghi·ªáp v·ª• quan tr·ªçng, c√≥ t√≠nh ƒë·∫∑c th√π v√† hi·ªáu qu·∫£ cao l√† s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• trong c√¥ng t√°c ki·ªÉm tra, gi√°m s√°t h·∫£i quan, ƒë·∫∑c bi·ªát trong ph√°t hi·ªán ch·∫•t ma t√∫y, h√†ng c·∫•m, v≈© kh√≠, v√† v·∫≠t ph·∫©m nguy hi·ªÉm.'
        },
        {
            title: 'QUY TR√åNH CHƒÇM S√ìC',
            content: 'Vi·ªác chƒÉm s√≥c, nu√¥i d∆∞·ª°ng CNV (ch√≥ nghi·ªáp v·ª•) l√† c√¥ng vi·ªác ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán h√†ng ng√†y v√† li√™n t·ª•c trong su·ªët qu√° tr√¨nh s·ª≠ d·ª•ng. Tr√°ch nhi·ªám ƒë∆∞·ª£c ph√¢n c√¥ng r√µ r√†ng: Hu·∫•n luy·ªán vi√™n ch·ªãu tr√°ch nhi·ªám to√†n di·ªán v·ªÅ s·ª©c kh·ªèe c·ªßa CNV do m√¨nh qu·∫£n l√Ω. Nh√¢n vi√™n th√∫ y tham m∆∞u cho l√£nh ƒë·∫°o v·ªÅ c√¥ng t√°c chƒÉn nu√¥i, theo d√µi s·ª©c kh·ªèe, x√¢y d·ª±ng kh·∫©u ph·∫ßn ƒÉn, v√† tr·ª±c ti·∫øp th·ª±c hi·ªán ti√™m ph√≤ng, ch·∫©n ƒëo√°n, ƒëi·ªÅu tr·ªã b·ªánh cho CNV.'
        },
        {
            title: 'QUY TR√åNH S·ª¨ D·ª§NG',
            content: 'Quy tr√¨nh s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• trong ki·ªÉm tra h·∫£i quan bao g·ªìm c√°c b∆∞·ªõc chu·∫©n b·ªã, th·ª±c hi·ªán ki·ªÉm tra, v√† x·ª≠ l√Ω k·∫øt qu·∫£. Hu·∫•n luy·ªán vi√™n c·∫ßn ƒë·∫£m b·∫£o ch√≥ ƒë∆∞·ª£c ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi th·ª±c hi·ªán nhi·ªám v·ª•, ki·ªÉm tra s·ª©c kh·ªèe v√† tr·∫°ng th√°i tinh th·∫ßn c·ªßa ch√≥.'
        },
        {
            title: 'QUY TR√åNH HU·∫§N LUY·ªÜN',
            content: 'Quy tr√¨nh hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª• ƒë∆∞·ª£c th·ª±c hi·ªán theo c√°c giai ƒëo·∫°n t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. Giai ƒëo·∫°n ƒë·∫ßu t·∫≠p trung v√†o vi·ªác x√¢y d·ª±ng m·ªëi quan h·ªá tin c·∫≠y gi·ªØa hu·∫•n luy·ªán vi√™n v√† ch√≥, sau ƒë√≥ chuy·ªÉn sang c√°c b√†i t·∫≠p chuy√™n m√¥n v·ªÅ ph√°t hi·ªán ma t√∫y v√† ch·∫•t c·∫•m.'
        }
    ];

    try {
        // Use the preload endpoint to generate all audio files
        const response = await fetch('/api/tts/preload', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                sections: contentSections
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {

            // Store audio file mappings in cache for instant access
            data.generated.forEach(item => {
                audioCache.set(item.title, item.filename);
            });

            audioPreloaded = true;
        } else {
            throw new Error(data.error || 'Unknown error');
        }

    } catch (error) {
        // Don't show alert for preload errors, just log them
    }
}

// Function to get cached audio filename for current content
function getCachedAudioFilename() {
    const contentElement = document.getElementById('content');
    if (!contentElement) return null;

    const contentText = contentElement.innerText || contentElement.textContent || '';
    if (!contentText.trim()) return null;

    // Create hash from actual content (UTF-8 safe)
    const cleanedText = cleanTextForTTS(contentText);
    const contentHash = createContentHash(cleanedText);
    const expectedFilename = `${contentHash}.mp3`;


    // Check if this file exists in our cache or server
    return expectedFilename;
}

// Function to check if audio file exists on server
async function checkAudioFileExists(filename) {
    try {
        const response = await fetch(`/api/tts/get/${filename}`, { method: 'HEAD' });
        return response.ok;
    } catch (error) {
        return false;
    }
}

// Function to change TTS playback speed
function changeTTSSpeed() {
    const speedControl = document.getElementById('ttsSpeedControl');
    const newSpeed = parseFloat(speedControl.value);
    ttsPlaybackSpeed = newSpeed;
    
    // Apply new speed to currently playing audio if any
    if (currentAudio && !currentAudio.paused) {
        currentAudio.playbackRate = ttsPlaybackSpeed;
    }
    
    console.log(`üéµ TTS speed changed to ${ttsPlaybackSpeed}x`);
}

// Function to toggle speech using cached audio or generate new
function toggleSpeech() {
    const contentElement = document.getElementById('content');
    const toggleButton = document.getElementById('toggleReadButton');

    if (!contentElement) {
        alert('Kh√¥ng t√¨m th·∫•y n·ªôi dung ƒë·ªÉ ƒë·ªçc');
        return;
    }

    const contentText = contentElement.innerText || contentElement.textContent || '';

    if (!contentText.trim()) {
        alert('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ƒë·ªçc');
        return;
    }


    if (isSpeaking) {
        if (currentAudio) {
            currentAudio.pause();
            currentAudio.currentTime = 0;
        }
        isSpeaking = false;
        toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
        toggleButton.style.background = '#007bff';
        return;
    }

    // Clean text for better TTS
    function cleanTextForTTS(text) {
        return text
            .replace(/\s+/g, ' ') // Normalize whitespace
            .trim();
    }

    // Start Vietnamese TTS (immediate playback from saved files)
    async function startVietnameseTTS() {
        try {
            const cleanedText = cleanTextForTTS(contentText);

            // Get expected filename based on content hash (UTF-8 safe)
            const contentHash = createContentHash(cleanedText);
            const expectedFilename = `${contentHash}.mp3`;

            // Check if audio file exists on server
            const fileExists = await checkAudioFileExists(expectedFilename);

            if (fileExists) {

                // Update button state
                toggleButton.innerText = 'üîÑ ƒêang t·∫£i √¢m thanh...';
                toggleButton.style.background = '#ffc107';
                toggleButton.disabled = true;

                // Play the cached audio file immediately
                const audioUrl = `/api/tts/get/${expectedFilename}`;
                currentAudio = new Audio(audioUrl);
                currentAudio.playbackRate = ttsPlaybackSpeed;

            } else {

                // Update button state
                toggleButton.innerText = 'üîÑ ƒêang t·∫°o √¢m thanh...';
                toggleButton.style.background = '#ffc107';
                toggleButton.disabled = true;

                // Use file-based TTS endpoint
                const response = await fetch('/api/tts/speak/file', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        text: cleanedText,
                        lang: 'vi' // Vietnamese
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'Unknown error');
                }


                // Play the newly generated audio file
                const audioUrl = `/api/tts/get/${data.filename}`;
                currentAudio = new Audio(audioUrl);
                currentAudio.playbackRate = ttsPlaybackSpeed;
            }

            currentAudio.onloadstart = () => {
                toggleButton.innerText = '‚è∏Ô∏è D·ª´ng ƒë·ªçc';
                toggleButton.style.background = '#dc3545';
                toggleButton.disabled = false;
            };

            currentAudio.oncanplaythrough = () => {
            };

            currentAudio.onplay = () => {
                isSpeaking = true;
                toggleButton.innerText = '‚èπÔ∏è D·ª´ng ƒë·ªçc';
                toggleButton.style.background = '#dc3545';
            };

            currentAudio.onended = () => {
                isSpeaking = false;
                toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
                toggleButton.style.background = '#007bff';
                currentAudio = null;
            };

            currentAudio.onerror = (event) => {
                isSpeaking = false;
                toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
                toggleButton.style.background = '#007bff';
                toggleButton.disabled = false;

                alert('L·ªói khi ph√°t √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i.');
                currentAudio = null;
            };

            currentAudio.onpause = () => {
                isSpeaking = false;
                toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
                toggleButton.style.background = '#007bff';
            };

            // Start playing
            await currentAudio.play();

        } catch (error) {

            isSpeaking = false;
            toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
            toggleButton.style.background = '#007bff';
            toggleButton.disabled = false;

            let errorMessage = 'L·ªói khi t·∫°o √¢m thanh. ';
            if (error.message.includes('gTTS not installed')) {
                errorMessage += 'Vui l√≤ng c√†i ƒë·∫∑t gTTS: pip install gTTS';
            } else if (error.message.includes('fetch')) {
                errorMessage += 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.';
            } else {
                errorMessage += error.message;
            }

            alert(errorMessage);
        }
    }

    // Start the TTS process
    startVietnameseTTS();
}

// Initialize audio preloading when page loads
async function initializeAudioSystem() {

    // Preload audio in background (don't wait for it)
    preloadAllAudio().then(() => {
    }).catch(error => {
    });
}

// Function to check audio cache status
async function checkAudioCacheStatus() {
    try {
        const response = await fetch('/api/tts/cache/status');
        const data = await response.json();

        if (data.success) {
            console.log('üìä Audio cache status:', {
                files: data.file_count,
                size: Math.round(data.total_size / 1024) + ' KB'
            });
            return data;
        }
    } catch (error) {
    }
    return null;
}

// Function to clear audio cache
async function clearAudioCache() {
    try {
        const response = await fetch('/api/tts/cache/clear', {
            method: 'POST'
        });
        const data = await response.json();

        if (data.success) {
            audioCache.clear();
            audioPreloaded = false;
            return true;
        }
    } catch (error) {
    }
    return false;
}




// Function to toggle "H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§" submenu

function toggleSubMenu() {

    const submenu = document.getElementById('dog-sub-menu');

    const journalSubmenu = document.getElementById('journal-sub-menu');



    // ƒê√≥ng journal submenu n·∫øu ƒëang m·ªü

    journalSubmenu.classList.remove('open');



    // Toggle dog submenu

    submenu.classList.toggle('open');

}



// Function to toggle "S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN" submenu

function toggleJournalMenu() {

    const submenu = document.getElementById('journal-sub-menu');

    const dogSubmenu = document.getElementById('dog-sub-menu');



    // ƒê√≥ng dog submenu n·∫øu ƒëang m·ªü

    dogSubmenu.classList.remove('open');



    // S·ª¨A: Force update journal menu cho Manager tr∆∞·ªõc khi toggle

    if (currentUserRole === 'MANAGER') {

        // Force updating journal menu for Manager

        updateJournalSubMenuForManager();

    }



    // Toggle journal submenu

    submenu.classList.toggle('open');

}



// Function showJournalEditForm - S·ª¨A: MANAGER T·ª∞ ƒê·ªòNG V√ÄO CH·∫æ ƒê·ªò DUY·ªÜT

function showJournalEditForm(dogName, date = null) {

    // S·ª¨A: Manager t·ª± ƒë·ªông chuy·ªÉn sang ch·∫ø ƒë·ªô duy·ªát nh·∫≠t k√Ω

    if (currentUserRole === 'MANAGER') {

        // Manager detected - redirecting to approval mode

        showAllPendingJournalsForManager();

        return;

    }



    // Ki·ªÉm tra quy·ªÅn c·ªßa Trainer

    if (currentUserRole === 'TRAINER' && !currentUserAssignedDogs.includes(dogName)) {

        alert('B·∫°n ch·ªâ c√≥ th·ªÉ vi·∫øt nh·∫≠t k√Ω cho ch√≥ ƒë∆∞·ª£c ph√¢n c√¥ng!');

        return;

    }



    hideAllContentSections();

    document.getElementById('toggleReadButton').style.display = 'block';



    const content = document.getElementById('content');

    content.style.display = 'block';

    content.style.justifyContent = 'flex-start';

    content.style.alignItems = 'flex-start';

    content.style.height = 'auto';

    // S·ª¨A: ƒê·∫£m b·∫£o form kh√¥ng ƒë√® l√™n navigation

    content.style.position = 'relative';

    content.style.zIndex = '1';



    const title = document.getElementById('title');

    currentDogForJournal = dogName;

    title.innerText = 'S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN - CNV ' + dogName;



    const today = new Date();

    const yyyy = today.getFullYear();

    const mm = String(today.getMonth() + 1).padStart(2, '0');

    const dd = String(today.getDate()).padStart(2, '0');

    const defaultDate = yyyy + '-' + mm + '-' + dd;



    // Ki·ªÉm tra role ƒë·ªÉ hi·ªÉn th·ªã form t∆∞∆°ng ·ª©ng

    const roleInfo = currentUserRole === 'TRAINER' ? '<p style="color: blue; font-weight: bold;"></p>' : '';



    // ·∫®n "L√£nh ƒë·∫°o ƒë∆°n v·ªã duy·ªát" cho TRAINER

    const leaderApprovalSection = currentUserRole === 'TRAINER' ? '' : '<div class="approval-box leader-approval"><h3>L√£nh ƒë·∫°o ƒë∆°n v·ªã duy·ªát</h3><div class="signature-area"><label for="leader_comment">√ù ki·∫øn:</label><textarea id="leader_comment" rows="3"></textarea><p>Tr·∫°ng th√°i: <span class="approval-status">[Ch∆∞a duy·ªát]</span></p><div id="leader-signature-display"></div><button class="btn-approve" onclick="approveJournal()">K√Ω</button></div></div>';



    const foodTypesOptions1 = FOOD_TYPES.map(food => '<label><input type="checkbox" data-food-value="' + food + '" onchange="updateFoodDisplay(\'lunchFoodDisplayBox\', \'lunchFoodOptions\', \'lunchFoodOther\')">' + food + '</label>').join('');



    const foodTypesOptions2 = FOOD_TYPES.map(food => '<label><input type="checkbox" data-food-value="' + food + '" onchange="updateFoodDisplay(\'dinnerFoodDisplayBox\', \'dinnerFoodOptions\', \'dinnerFoodOther\')">' + food + '</label>').join('');



    content.innerHTML = roleInfo + '<div class="journal-header-actions"><button class="btn-create-new-journal" onclick="createNewJournal()">Nh·∫≠t k√Ω m·ªõi +</button><button class="btn-view-old-journals" onclick="viewOldJournals()">Xem nh·∫≠t k√Ω c≈©</button></div><div class="journal-section info-general"><h2>I. TH√îNG TIN CHUNG</h2><div class="info-general-grid"><div class="info-item-group journal-date-field"><label for="journal_date">Ng√†y ghi:</label><input type="date" id="journal_date" value="' + (date || defaultDate) + '" required></div><div class="info-item-group"><label for="journal_hlv">Hu·∫•n luy·ªán vi√™n:</label><input type="text" id="journal_hlv" value="' + (currentUserName || hlvInfo.name) + ' (S·ªë hi·ªáu: ' + hlvInfo.id + ')" readonly></div><div class="info-item-group"><label for="journal_dog_name">T√™n CNV:</label><input type="text" id="journal_dog_name" value="' + dogName + '" readonly></div></div></div><div class="section-toggle-controls"><h3>Ch·ªçn c√°c ph·∫ßn c·∫ßn ghi nh·∫≠t k√Ω:</h3><div class="toggle-buttons"><label class="toggle-button"><input type="checkbox" id="toggle_training" checked onchange="toggleSection(\'training\')"> II. Ho·∫°t ƒë·ªông hu·∫•n luy·ªán</label><label class="toggle-button"><input type="checkbox" id="toggle_care" checked onchange="toggleSection(\'care\')"> III. ChƒÉm s√≥c & nu√¥i d∆∞·ª°ng</label><label class="toggle-button"><input type="checkbox" id="toggle_operation" checked onchange="toggleSection(\'operation\')"> IV. Ho·∫°t ƒë·ªông t√°c nghi·ªáp</label></div></div><div class="journal-section training-activity" id="training-section"><h2>II. HO·∫†T ƒê·ªòNG HU·∫§N LUY·ªÜN</h2><div id="training-blocks-container"><!-- Training blocks will be dynamically added here --></div><div class="training-activity-buttons"><button class="add-block add-training-block" onclick="addTrainingBlock()">Th√™m Ca +</button><button class="remove-block remove-training-block" onclick="removeLastTrainingBlock()">X√≥a Ca HL</button></div><div class="textarea-block"><label for="journal_hlv_comment">ƒê√°nh gi√° chung c·ªßa Hu·∫•n luy·ªán vi√™n:</label><textarea id="journal_hlv_comment" rows="4"></textarea></div></div><div class="journal-section care-block" id="care-section"><h2>III. CHƒÇM S√ìC & NU√îI D∆Ø·ª†NG</h2><!-- Care and feeding section content --><div class="meal-row"><div class="meal-part"><div class="meal-header-time"><h3>B·ªØa tr∆∞a:</h3><label for="lunchTime">Th·ªùi gian:</label><input type="time" id="lunchTime" value="11:00"></div><div class="meal-food-details-row"><div class="meal-item"><label for="lunchAmount">S·ª©c ƒÉn:</label><select id="lunchAmount" class="appetite-select"><option value="ƒÇn h·∫øt">ƒÇn h·∫øt</option><option value="ƒÇn √≠t">ƒÇn √≠t</option><option value="Kh√¥ng ƒÉn">Kh√¥ng ƒÉn</option></select></div><div class="meal-item food-selection-group"><label>Th·ª©c ƒÉn:</label><div class="custom-food-select-wrapper"><div class="custom-dropdown-trigger" onclick="toggleFoodDropdown(\'lunchFoodOptions\')"><span class="selected-text" id="lunchFoodTriggerText">Ch·ªçn th·ª©c ƒÉn</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="lunchFoodOptions">' + foodTypesOptions1 + '</div></div><span class="food-selected-display-box" id="lunchFoodDisplayBox">Ch∆∞a ch·ªçn</span><input type="text" id="lunchFoodOther" class="hidden" placeholder="Th·ª©c ƒÉn kh√°c" onchange="updateFoodDisplay(\'lunchFoodDisplayBox\', \'lunchFoodOptions\', \'lunchFoodOther\')"></div></div></div><div class="meal-part"><div class="meal-header-time"><h3>B·ªØa chi·ªÅu:</h3><label for="dinnerTime">Th·ªùi gian:</label><input type="time" id="dinnerTime" value="17:00"></div><div class="meal-food-details-row"><div class="meal-item"><label for="dinnerAmount">S·ª©c ƒÉn:</label><select id="dinnerAmount" class="appetite-select"><option value="ƒÇn h·∫øt">ƒÇn h·∫øt</option><option value="ƒÇn √≠t">ƒÇn √≠t</option><option value="Kh√¥ng ƒÉn">Kh√¥ng ƒÉn</option></select></div><div class="meal-item food-selection-group"><label>Th·ª©c ƒÉn:</label><div class="custom-food-select-wrapper"><div class="custom-dropdown-trigger" onclick="toggleFoodDropdown(\'dinnerFoodOptions\')"><span class="selected-text" id="dinnerFoodTriggerText">Ch·ªçn th·ª©c ƒÉn</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="dinnerFoodOptions">' + foodTypesOptions2 + '</div></div><span class="food-selected-display-box" id="dinnerFoodDisplayBox">Ch∆∞a ch·ªçn</span><input type="text" id="dinnerFoodOther" class="hidden" placeholder="Th·ª©c ƒÉn kh√°c" onchange="updateFoodDisplay(\'dinnerFoodDisplayBox\', \'dinnerFoodOptions\', \'dinnerFoodOther\')"></div></div></div></div><div class="care-checks"><label><input type="checkbox" id="care_bath"> T·∫Øm r·ª≠a</label><label><input type="checkbox" id="care_brush"> Ch·∫£i l√¥ng</label><label><input type="checkbox" id="care_wipe"> Lau l√¥ng</label></div><div class="health-status"><label><input type="radio" name="health_status" value="T·ªët" checked> T·ªët</label><label><input type="radio" name="health_status" value="Kh√°" data-health-type="abnormal"> Kh√°</label><label><input type="radio" name="health_status" value="Trung b√¨nh" data-health-type="sick"> Trung b√¨nh</label><label><input type="radio" name="health_status" value="K√©m" data-health-type="sick"> K√©m</label><input type="text" id="health_other_text" class="health-other-input hidden" placeholder="Ghi r√µ t√¨nh tr·∫°ng"></div><div class="textarea-block"><label for="journal_other_issues" class="other-issues-label">V·∫•n ƒë·ªÅ kh√°c (n·∫øu c√≥):</label><textarea id="journal_other_issues" rows="3"></textarea></div></div><div class="journal-section operation-activity" id="operation-section"><h2>IV. HO·∫†T ƒê·ªòNG T√ÅC NGHI·ªÜP</h2><div id="operation-blocks-container"><!-- Operation blocks will be dynamically added here --></div><div class="operation-activity-buttons"><button class="add-block add-operation-block" onclick="addOperationBlock()">Th√™m Ca T√°c Nghi·ªáp</button><button class="remove-block remove-operation-block" onclick="removeLastOperationBlock()">X√≥a Ca T√°c Nghi·ªáp</button></div></div><div class="journal-section approval-section"><h2>DUY·ªÜT & K√ù</h2><div class="approval-flex-container">' + leaderApprovalSection + '<div class="approval-box hvl-submission"><h3>Hu·∫•n luy·ªán vi√™n x√°c nh·∫≠n</h3><div class="signature-area"><p>H·ªç v√† t√™n: <span id="hvl_name_display">' + (currentUserName || hlvInfo.name) + '</span></p><p>Tr·∫°ng th√°i: <span class="submission-status">(Ch∆∞a g·ª≠i duy·ªát)</span></p><div id="hvl-signature-display"></div><button class="btn-submit-hvl" onclick="submitHvlSignature()">K√Ω</button></div></div><div class="approval-box substitute-hvl-section"><h3>HLV tr·ª±c thay (n·∫øu c√≥)</h3><div class="signature-area"><label for="substitute_hvl_name">H·ªç v√† t√™n:</label><input type="text" id="substitute_hvl_name"><label for="substitute_hvl_comment">√ù ki·∫øn:</label><textarea id="substitute_hvl_comment" rows="3"></textarea><p>Tr·∫°ng th√°i: <span class="substitute-hvl-status">[Ch∆∞a k√Ω]</span></p><div id="substitute-signature-display"></div><button class="btn-substitute-hvl-approve" onclick="substituteHvlApprove()">K√Ω</button></div></div></div></div><div class="journal-action-buttons"><button class="save-journal" onclick="saveJournalData()">L∆∞u Nh·∫≠t K√Ω</button><button class="export-pdf" onclick="exportJournalToPDF(\'' + dogName + '\', document.getElementById(\'journal_date\').value)">Xu·∫•t PDF</button></div>';



    // Reset counters khi t·∫°o form m·ªõi
    trainingSessionCounter = 0;
    operationSessionCounter = 0;
    blockCounter = 0;

    // Reset counters for new journal form



    loadJournalData(dogName, date || defaultDate, true);

    initializeHiddenInputs();

    setupFormEventListeners();

}



// S·ª¨A: Function showAllPendingJournalsForManager - T√åM T·∫§T C·∫¢ JOURNAL ƒê√É K√ù CH∆ØA DUY·ªÜT - FIX MANAGER WORKFLOW

async function showAllPendingJournalsForManager() {

    hideAllContentSections();

    document.getElementById('toggleReadButton').style.display = 'block';



    const content = document.getElementById('content');

    content.style.display = 'block';

    content.style.position = 'relative';

    content.style.zIndex = '1';



    const title = document.getElementById('title');

    title.innerText = 'DUY·ªÜT NH·∫¨T K√ù - CH·∫æ ƒê·ªò MANAGER';



    // Manager checking for journals



    // S·ª¨A: T√åM JOURNALS T·ª™ DATABASE

    const allPendingJournals = [];

    try {
        // Get pending journals from database
        const response = await fetch('/api/journals/pending');
        if (response.ok) {
            const data = await response.json();
            const dbJournals = data.data || [];

            // Convert database format to frontend format for compatibility
            for (const journal of dbJournals) {
                const journalKey = `journal_${journal.dog_name}_${journal.journal_date}_${journal.id}`;

                allPendingJournals.push({
                    key: journalKey, // Include journal ID for uniqueness
                    dogName: journal.dog_name,
                    date: journal.journal_date,
                    trainerName: journal.trainer_name,
                    status: journal.approval_status,
                    data: journal
                });
            }
        } else {
            throw new Error('Database request failed');
        }
    } catch (error) {
    }



    // Database search completed



    // Total journals requiring manager approval



    if (allPendingJournals.length === 0) {

        content.innerHTML = `<div style="text-align: center; padding: 50px; background: white; border-radius: 10px; margin: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

            <h3 style="color: #2196F3; margin-bottom: 20px;">üìã CH·∫æ ƒê·ªò MANAGER - DUY·ªÜT NH·∫¨T K√ù</h3>

            <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 20px; border-radius: 8px;">

                <h4 style="color: #155724; margin-top: 0;">‚úÖ Kh√¥ng c√≥ nh·∫≠t k√Ω n√†o c·∫ßn duy·ªát</h4>

                <p style="color: #155724;">T·∫•t c·∫£ nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c ch∆∞a c√≥ nh·∫≠t k√Ω n√†o ƒë∆∞·ª£c g·ª≠i duy·ªát.</p>

            </div>

            <div style="margin-top: 20px;">
                <button onclick="refreshManagerView()" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; margin-right: 10px;">üîÑ L√†m m·ªõi</button>
                <button onclick="showManagerPastJournalsModal()" style="background: #17a2b8; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer;">üìö Xem nh·∫≠t k√Ω c≈©</button>
            </div>

        </div>`;

        return;

    }



    // S·∫Øp x·∫øp theo ng√†y g·ª≠i m·ªõi nh·∫•t

    allPendingJournals.sort((a, b) => new Date(b.submittedAt || b.date) - new Date(a.submittedAt || a.date));



    // S·ª¨A: HI·ªÇN THI DANH S√ÅCH V·ªöI NOTIFICATION V√Ä URGENCY

    let html = `<div style="background: white; border-radius: 10px; margin: 20px; padding: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">

        <div style="background: #e3f2fd; border: 1px solid #2196f3; padding: 20px; margin-bottom: 25px; border-radius: 8px; text-align: center;">

            <h3 style="color: #1976d2; margin-top: 0;">üö® CH·∫æ ƒê·ªò MANAGER - DUY·ªÜT NH·∫¨T K√ù</h3>

            <p style="color: #1976d2; font-size: 18px; font-weight: bold;">B·∫°n c√≥ ${allPendingJournals.length} nh·∫≠t k√Ω C·∫¶N DUY·ªÜT NGAY t·ª´ c√°c hu·∫•n luy·ªán vi√™n</p>

            <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px; margin-top: 15px;">

                <strong>‚ö†Ô∏è L∆ØU √ù:</strong> C√°c nh·∫≠t k√Ω n√†y ƒë√£ ƒë∆∞·ª£c HLV k√Ω v√† ƒëang ch·ªù b·∫°n duy·ªát

            </div>

        </div>

        <div class="pending-journals-list">

            <h4 style="color: #333; border-bottom: 2px solid #2196f3; padding-bottom: 10px;">üìã Danh s√°ch nh·∫≠t k√Ω ch·ªù duy·ªát:</h4>`;



    allPendingJournals.forEach((journal, index) => {

        const isUrgent = journal.submittedAt && (new Date() - new Date(journal.submittedAt)) < 24 * 60 * 60 * 1000; // Urgent n·∫øu g·ª≠i trong 24h

        const urgentBadge = isUrgent ? '<div style="position: absolute; top: 15px; right: 15px; background: #ff4444; color: white; padding: 5px 12px; border-radius: 15px; font-size: 12px; font-weight: bold; animation: blink 1s infinite;">üö® M·ªöI</div>' : '';



        const signatureDate = journal.data.approval?.hvlSignature?.timestamp ?

            formatDateToDDMMYYYY(journal.data.approval.hvlSignature.timestamp) : 'N/A';



        html += `<div style="background: white; border: 2px solid ${isUrgent ? '#ff4444' : '#e3f2fd'}; padding: 20px; margin: 15px 0; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.2s; position: relative;" onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">

    ${urgentBadge}

    <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: wrap;">

        <div style="flex: 1; min-width: 300px;">

            <div style="display: flex; align-items: center; margin-bottom: 12px;">

                <span style="font-size: 24px; margin-right: 10px;">üìÖ</span>

                <strong style="color: #1976d2; font-size: 18px;">Ng√†y: ${formatDateToDDMMYYYY(journal.date)}</strong>

            </div>

            <div style="display: flex; align-items: center; margin-bottom: 10px;">

                <span style="font-size: 20px; margin-right: 10px;">üêï</span>

                <strong style="color: #2e7d32;">CNV: ${journal.dogName}</strong>

            </div>

            <div style="display: flex; align-items: center; margin-bottom: 10px;">

                <span style="font-size: 20px; margin-right: 10px;">üë®‚Äçüíº</span>

                <span style="color: #666;">HLV: ${journal.trainerName || 'N/A'}</span>

            </div>


            <div style="display: flex; align-items: center; margin-bottom: 15px;">

                <span style="font-size: 20px; margin-right: 10px;">‚è∞</span>

                <span style="color: #666; font-size: 14px;">G·ª≠i l√∫c: ${formatDateToDDMMYYYY(journal.submittedAt || journal.date, true)}</span>

            </div>

            <!-- S·ª¨A: TH√äM √î NH·∫¨N X√âT CHO MANAGER -->

            <div style="margin-top: 15px;">

                <label style="font-weight: bold; color: #1976d2; display: block; margin-bottom: 8px;">üí¨ Nh·∫≠n x√©t c·ªßa Manager:</label>

                <textarea id="managerComment_${journal.key}" rows="3" style="width: 100%; border: 1px solid #ddd; border-radius: 5px; padding: 8px; font-size: 14px; resize: vertical;" placeholder="Nh·∫≠p nh·∫≠n x√©t tr∆∞·ªõc khi k√Ω duy·ªát..."></textarea>

            </div>

        </div>

        <div style="display: flex; flex-direction: column; gap: 10px; min-width: 200px; align-items: flex-end;">

            <button class="btn-info" onclick="viewJournalForManagerApproval('${journal.key}')" style="background: #2196F3; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: background 0.3s;" onmouseover="this.style.background='#1976d2'" onmouseout="this.style.background='#2196F3'">üëÄ Xem nh·∫≠t k√Ω</button>

            <button class="btn-success" onclick="approveJournalWithComment('${journal.key}')" style="background: #4CAF50; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: background 0.3s;" onmouseover="this.style.background='#388e3c'" onmouseout="this.style.background='#4CAF50'">‚úÖ K√Ω duy·ªát</button>

        </div>

    </div>

</div>`;

    });



    html += `</div>

        <div style="text-align: center; margin-top: 30px; padding: 20px; border-top: 2px solid #e3f2fd;">

            <button onclick="refreshManagerView()" style="background: #ff9800; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; margin-right: 15px;">üîÑ L√†m m·ªõi danh s√°ch</button>

            <button onclick="showManagerPastJournalsModal()" style="background: #17a2b8; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; margin-right: 15px;">üìö Xem nh·∫≠t k√Ω c≈©</button>

            <button onclick="showManagerStatistics()" style="background: #9c27b0; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold;">üìä Xem th·ªëng k√™</button>

        </div>

    </div>

    <style>

        @keyframes blink {

            0%, 50% { opacity: 1; }

            51%, 100% { opacity: 0.5; }

        }

    </style>`;



    content.innerHTML = html;



    // S·ª¨A: MARK NOTIFICATIONS AS READ

    markManagerNotificationsAsRead();



    // Auto refresh m·ªói 30 gi√¢y

    setTimeout(() => {

        if (currentUserRole === 'MANAGER' && document.getElementById('title').innerText.includes('MANAGER')) {

            // Auto-refreshing manager view

            showAllPendingJournalsForManager();

        }

    }, 30000);

}

// S·ª¨A: Function MANAGER JOURNAL VIEW - XEM S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN
async function showManagerJournalView() {
    hideAllContentSections();

    const content = document.getElementById('content');
    const title = document.getElementById('title');

    content.style.display = 'block';
    content.style.justifyContent = 'flex-start';
    content.style.alignItems = 'flex-start';
    content.style.height = 'auto';
    content.style.position = 'relative';
    content.style.zIndex = '1';

    title.innerText = 'S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN - CH·∫æ ƒê·ªò MANAGER';

    // Load all journals from database
    let allJournals = [];

    try {

        const response = await fetch('/api/journals');

        if (response.ok) {
            const data = await response.json();

            if (data.success && data.data) {
                allJournals = data.data.map(journal => ({
                    id: journal.id,
                    key: `journal_${journal.dog_name}_${journal.journal_date}`,
                    dogName: journal.dog_name,
                    date: journal.journal_date,
                    trainerName: journal.trainer_name,
                    status: journal.approval_status,
                    data: journal,
                    approvedAt: journal.approved_at,
                    approvedBy: journal.approver_name
                }));
            } else {
            }
        } else {
            const errorText = await response.text();
            throw new Error('Database request failed');
        }
    } catch (error) {
        content.innerHTML = `
            <div style="text-align: center; padding: 50px; background: white; border-radius: 10px; margin: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                <h3 style="color: #f44336; margin-bottom: 20px;">‚ùå L·ªói t·∫£i d·ªØ li·ªáu</h3>
                <p style="color: #666;">Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh·∫≠t k√Ω t·ª´ c∆° s·ªü d·ªØ li·ªáu.</p>
                <button onclick="showManagerJournalView()" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; margin-top: 20px;">üîÑ Th·ª≠ l·∫°i</button>
            </div>
        `;
        return;
    }

    if (allJournals.length === 0) {
        content.innerHTML = `
            <div style="text-align: center; padding: 50px; background: white; border-radius: 10px; margin: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                <h3 style="color: #2196F3; margin-bottom: 20px;">üìñ S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN</h3>
                <div style="background: #e3f2fd; border: 1px solid #2196f3; padding: 20px; border-radius: 8px;">
                    <h4 style="color: #1976d2; margin-top: 0;">üìù Ch∆∞a c√≥ nh·∫≠t k√Ω n√†o</h4>
                    <p style="color: #1976d2;">H·ªá th·ªëng ch∆∞a c√≥ nh·∫≠t k√Ω hu·∫•n luy·ªán n√†o ƒë∆∞·ª£c t·∫°o.</p>
                </div>
                <button onclick="showManagerJournalView()" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; margin-top: 20px;">üîÑ L√†m m·ªõi</button>
            </div>
        `;
        return;
    }

    // Sort by date (newest first)
    allJournals.sort((a, b) => new Date(b.date) - new Date(a.date));

    // Group by dog
    const journalsByDog = {};
    allJournals.forEach(journal => {
        if (!journalsByDog[journal.dogName]) {
            journalsByDog[journal.dogName] = [];
        }
        journalsByDog[journal.dogName].push(journal);
    });

    // Create HTML for journal view
    let html = `
        <div style="background: white; border-radius: 10px; margin: 20px; padding: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
            <div style="background: #e3f2fd; border: 1px solid #2196f3; padding: 20px; margin-bottom: 25px; border-radius: 8px; text-align: center;">
                <h3 style="color: #1976d2; margin-top: 0;">üìñ S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN</h3>
                <p style="color: #1976d2; font-size: 18px; font-weight: bold;">T·ªïng c·ªông: ${allJournals.length} nh·∫≠t k√Ω t·ª´ ${Object.keys(journalsByDog).length} ch√≥ nghi·ªáp v·ª•</p>
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px; margin-top: 15px;">
                    <strong>üìä Th·ªëng k√™:</strong> 
                    ${allJournals.filter(j => j.status === 'APPROVED').length} ƒë√£ duy·ªát, 
                    ${allJournals.filter(j => j.status === 'PENDING').length} ch·ªù duy·ªát, 
                    ${allJournals.filter(j => j.status === 'REJECTED').length} t·ª´ ch·ªëi
                </div>
            </div>
            
            <div class="manager-journals-list">
                <h4 style="color: #333; border-bottom: 2px solid #2196f3; padding-bottom: 10px;">üìã Danh s√°ch nh·∫≠t k√Ω theo ch√≥ nghi·ªáp v·ª•:</h4>
    `;

    // Create journal list by dog
    Object.keys(journalsByDog).sort().forEach(dogName => {
        const dogJournals = journalsByDog[dogName];
        const approvedCount = dogJournals.filter(j => j.status === 'APPROVED').length;
        const pendingCount = dogJournals.filter(j => j.status === 'PENDING').length;
        const rejectedCount = dogJournals.filter(j => j.status === 'REJECTED').length;

        html += `
            <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 8px; margin: 15px 0; overflow: hidden;">
                <div style="background: #007bff; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center;">
                    <h4 style="margin: 0; font-size: 18px;">üêï ${dogName}</h4>
                    <div style="font-size: 14px;">
                        <span style="background: #28a745; padding: 4px 8px; border-radius: 4px; margin-right: 5px;">‚úÖ ${approvedCount}</span>
                        <span style="background: #ffc107; padding: 4px 8px; border-radius: 4px; margin-right: 5px;">‚è≥ ${pendingCount}</span>
                        <span style="background: #dc3545; padding: 4px 8px; border-radius: 4px;">‚ùå ${rejectedCount}</span>
                    </div>
                </div>
                <div style="padding: 15px;">
        `;

        dogJournals.forEach(journal => {
            const statusColor = journal.status === 'APPROVED' ? '#28a745' :
                journal.status === 'PENDING' ? '#ffc107' : '#dc3545';
            const statusText = journal.status === 'APPROVED' ? 'ƒê√£ duy·ªát' :
                journal.status === 'PENDING' ? 'Ch·ªù duy·ªát' : 'T·ª´ ch·ªëi';
            const statusIcon = journal.status === 'APPROVED' ? '‚úÖ' :
                journal.status === 'PENDING' ? '‚è≥' : '‚ùå';

            html += `
                <div style="background: white; border: 1px solid #dee2e6; border-radius: 6px; padding: 12px; margin: 8px 0; display: flex; justify-content: space-between; align-items: center;">
                    <div style="flex: 1;">
                        <div style="display: flex; align-items: center; margin-bottom: 8px;">
                            <span style="font-size: 16px; margin-right: 8px;">üìÖ</span>
                            <strong style="color: #495057;">${formatDateToDDMMYYYY(journal.date)}</strong>
                            <span style="background: ${statusColor}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; margin-left: 10px;">
                                ${statusIcon} ${statusText}
                            </span>
                        </div>
                        <div style="display: flex; align-items: center; margin-bottom: 4px;">
                            <span style="font-size: 14px; margin-right: 8px;">üë®‚Äçüíº</span>
                            <span style="color: #6c757d; font-size: 14px;">HLV: ${journal.trainerName || 'N/A'}</span>
                        </div>
                        ${journal.approvedBy ? `
                            <div style="display: flex; align-items: center;">
                                <span style="font-size: 14px; margin-right: 8px;">üë§</span>
                                <span style="color: #6c757d; font-size: 14px;">Duy·ªát b·ªüi: ${journal.approvedBy}</span>
                            </div>
                        ` : ''}
                    </div>
                    <div style="display: flex; gap: 8px;">
                        <button onclick="viewJournalFromManagerView('${journal.key}')" style="background: #17a2b8; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">üëÄ Xem</button>
                        <button onclick="exportJournalFromManagerView('${journal.key}')" style="background: #6f42c1; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">üìÑ PDF</button>
                    </div>
                </div>
            `;
        });

        html += `
                </div>
            </div>
        `;
    });

    html += `
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding: 20px; border-top: 2px solid #e3f2fd;">
                <button onclick="showManagerJournalView()" style="background: #007bff; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; margin-right: 15px;">üîÑ L√†m m·ªõi</button>
                <button onclick="exportAllJournalsForManager()" style="background: #28a745; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; margin-right: 15px;">üìä Xu·∫•t b√°o c√°o</button>
                <button onclick="showManagerStatistics()" style="background: #9c27b0; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold;">üìà Th·ªëng k√™</button>
            </div>
        </div>
    `;

    content.innerHTML = html;
}

// Helper functions for Manager Journal View
async function viewJournalFromManagerView(journalKey) {
    try {
        // Extract dog name, date, and ID from journal key
        const keyParts = journalKey.replace('journal_', '').split('_');
        const dogName = keyParts[0];

        // Handle both old format (dogName_date) and new format (dogName_date_id)
        let date, journalId = null;
        if (keyParts.length >= 3) {
            // New format: dogName_date_id
            journalId = keyParts[keyParts.length - 1];
            date = keyParts.slice(1, -1).join('_');
        } else {
            // Old format: dogName_date
            date = keyParts.slice(1).join('_');
        }


        // Use existing function to show A4 view
        await showPureA4JournalView(dogName, date);
    } catch (error) {
        alert('C√≥ l·ªói khi xem nh·∫≠t k√Ω: ' + error.message);
    }
}

async function exportJournalFromManagerView(journalKey) {
    try {
        // Extract dog name, date, and ID from journal key
        const keyParts = journalKey.replace('journal_', '').split('_');
        const dogName = keyParts[0];

        // Handle both old format (dogName_date) and new format (dogName_date_id)
        let date, journalId = null;
        if (keyParts.length >= 3) {
            // New format: dogName_date_id
            journalId = keyParts[keyParts.length - 1];
            date = keyParts.slice(1, -1).join('_');
        } else {
            // Old format: dogName_date
            date = keyParts.slice(1).join('_');
        }


        // Use existing PDF export functionality
        if (window.pdfExportSystem) {
            await window.pdfExportSystem.exportJournalToPDF(dogName, date);
        } else {
            alert('Ch·ª©c nƒÉng xu·∫•t PDF ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    } catch (error) {
        alert('C√≥ l·ªói khi xu·∫•t PDF: ' + error.message);
    }
}

async function exportAllJournalsForManager() {
    try {
        alert('Ch·ª©c nƒÉng xu·∫•t b√°o c√°o t·ªïng h·ª£p ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng xu·∫•t PDF cho t·ª´ng nh·∫≠t k√Ω ri√™ng l·∫ª.');
    } catch (error) {
        alert('C√≥ l·ªói khi xu·∫•t b√°o c√°o: ' + error.message);
    }
}

// Manager Past Journals Modal - Similar to viewOldJournals but for Manager
async function showManagerPastJournalsModal() {
    try {
        // Load all journals from database
        const response = await fetch('/api/journals');
        if (!response.ok) {
            throw new Error('Database request failed');
        }

        const result = await response.json();
        if (!result.success || !result.data) {
            throw new Error('No journals found');
        }

        const allJournals = result.data;

        if (allJournals.length === 0) {
            alert('Kh√¥ng c√≥ nh·∫≠t k√Ω n√†o trong h·ªá th·ªëng.');
            return;
        }

        // Sort by date (newest first)
        allJournals.sort((a, b) => new Date(b.journal_date) - new Date(a.journal_date));

        // Create dropdown options
        let dateOptions = '<option value="">Ch·ªçn ng√†y xem nh·∫≠t k√Ω</option>';

        allJournals.forEach(journal => {
            const dateStr = formatDateToDDMMYYYY(journal.journal_date);

            // Get status badge
            let statusBadge = '';
            switch (journal.approval_status) {
                case 'APPROVED':
                    statusBadge = '‚úÖ ƒê√£ duy·ªát';
                    break;
                case 'PENDING':
                    statusBadge = '‚è≥ Ch·ªù duy·ªát';
                    break;
                case 'REJECTED':
                    statusBadge = '‚ùå T·ª´ ch·ªëi';
                    break;
                default:
                    statusBadge = '‚ùì ' + journal.approval_status;
            }

            // Get trainer info
            const trainerInfo = journal.trainer_name || 'Ch∆∞a x√°c ƒë·ªãnh';

            // Get approver info if approved
            let approverInfo = '';
            if (journal.approval_status === 'APPROVED' && journal.approver_name) {
                approverInfo = ` | Duy·ªát b·ªüi: ${journal.approver_name}`;
            }

            // Create comprehensive option text
            const optionText = `${dateStr} - CNV ${journal.dog_name} | HLV: ${trainerInfo} | ${statusBadge}${approverInfo}`;
            dateOptions += `<option value="${journal.journal_date}|${journal.dog_name}|${journal.id}">${optionText}</option>`;
        });


        // Create modal HTML
        const modalHtml = `
            <div id="managerPastJournalsModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; display: flex; align-items: center; justify-content: center;">
                <div style="background: white; padding: 30px; border-radius: 10px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto;">
                    <h3 style="margin-top: 0; color: #2196F3;">üìö XEM NH·∫¨T K√ù C≈® - MANAGER</h3>
                    <p style="color: #666; margin-bottom: 20px;">T√¨m th·∫•y <strong>${allJournals.length}</strong> nh·∫≠t k√Ω trong h·ªá th·ªëng. Ch·ªçn nh·∫≠t k√Ω ƒë·ªÉ xem b·∫£n PDF A4:</p>
                    <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 5px; padding: 10px; margin-bottom: 15px; font-size: 12px; color: #6c757d;">
                        <strong>üìã Th√¥ng tin hi·ªÉn th·ªã:</strong> Ng√†y | T√™n CNV | Hu·∫•n luy·ªán vi√™n | Tr·∫°ng th√°i duy·ªát | Ng∆∞·ªùi duy·ªát (n·∫øu c√≥)
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label for="managerPastJournalSelect" style="display: block; margin-bottom: 8px; font-weight: bold;">Ch·ªçn nh·∫≠t k√Ω:</label>
                        <select id="managerPastJournalSelect" style="width: 100%; padding: 12px; border: 2px solid #007bff; border-radius: 8px; font-size: 13px; background: white; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            ${dateOptions}
                        </select>
                    </div>
                    
                    <div style="text-align: right; margin-top: 20px;">
                        <button onclick="closeManagerPastJournalsModal()" style="background: #6c757d; color: white; border: none; padding: 12px 24px; border-radius: 5px; margin-right: 10px; cursor: pointer; font-size: 14px;">‚ùå H·ªßy</button>
                        <button onclick="viewSelectedManagerPastJournal()" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; font-size: 14px;">üìÑ Xem PDF A4</button>
                    </div>
                </div>
            </div>
        `;

        // Add modal to DOM
        document.body.insertAdjacentHTML('beforeend', modalHtml);

    } catch (error) {
        alert('C√≥ l·ªói khi t·∫£i danh s√°ch nh·∫≠t k√Ω: ' + error.message);
    }
}

// Close Manager Past Journals Modal
function closeManagerPastJournalsModal() {
    const modal = document.getElementById('managerPastJournalsModal');
    if (modal) {
        modal.remove();
    }
}

// View Selected Manager Past Journal
function viewSelectedManagerPastJournal() {
    const selectedValue = document.getElementById('managerPastJournalSelect').value;

    if (!selectedValue) {
        alert('Vui l√≤ng ch·ªçn ng√†y ƒë·ªÉ xem nh·∫≠t k√Ω!');
        return;
    }

    try {
        const [date, dogName, journalId] = selectedValue.split('|');


        // Use existing function to show A4 view with specific journal ID
        showPureA4JournalView(dogName, date, journalId);

        // Close modal
        closeManagerPastJournalsModal();

    } catch (error) {
        alert('C√≥ l·ªói khi xem nh·∫≠t k√Ω: ' + error.message);
    }
}

// S·ª¨A: Function MARK NOTIFICATIONS AS READ

async function markManagerNotificationsAsRead() {
    try {
        // TODO: Update notifications in database
        // Manager notifications marked as read
    } catch (error) {
    }
}



// S·ª¨A: Function XEM JOURNAL CHO MANAGER APPROVAL

// S·ª¨A: Function XEM JOURNAL CHO MANAGER APPROVAL

function viewJournalForManagerApproval(journalKey) {

    // Manager viewing journal for approval



    // S·ª¨A: L∆∞u tr·∫°ng th√°i tr∆∞·ªõc khi chuy·ªÉn sang PDF view

    window.previousManagerView = 'PENDING_JOURNALS';



    // Chuy·ªÉn sang PDF view ƒë·ªÉ Manager c√≥ th·ªÉ xem chi ti·∫øt

    showA4JournalViewFromKey(journalKey);

}



// Function h·ªó tr·ª£ Manager

function refreshManagerView() {

    // Manual refresh requested by Manager

    showAllPendingJournalsForManager();

}



async function showManagerStatistics() {
    // Show loading modal first
    showStatisticsModal();

    try {
        // Get all journals from database
        const response = await fetch('/api/journals');
        if (response.ok) {
            const data = await response.json();
            const journals = data.data || [];

            // Calculate comprehensive statistics
            const stats = calculateDetailedStatistics(journals);

            // Update modal with statistics
            updateStatisticsModal(stats);
        } else {
            throw new Error('Failed to fetch journals');
        }
    } catch (error) {
        showStatisticsError(error.message);
    }
}

function calculateDetailedStatistics(journals) {
    const stats = {
        total: journals.length,
        approved: 0,
        pending: 0,
        rejected: 0,
        incomplete: 0,
        byDog: {},
        byTrainer: {},
        byMonth: {},
        byStatus: {},
        recentActivity: [],
        averageTrainingTime: 0,
        totalTrainingHours: 0
    };

    // Process each journal
    journals.forEach(journal => {
        // Status counts
        switch (journal.approval_status) {
            case 'APPROVED':
                stats.approved++;
                break;
            case 'PENDING':
                stats.pending++;
                break;
            case 'REJECTED':
                stats.rejected++;
                break;
            default:
                stats.incomplete++;
        }

        // By dog
        if (!stats.byDog[journal.dog_name]) {
            stats.byDog[journal.dog_name] = { total: 0, approved: 0, pending: 0 };
        }
        stats.byDog[journal.dog_name].total++;
        if (journal.approval_status === 'APPROVED') stats.byDog[journal.dog_name].approved++;
        if (journal.approval_status === 'PENDING') stats.byDog[journal.dog_name].pending++;

        // By trainer
        if (!stats.byTrainer[journal.trainer_name]) {
            stats.byTrainer[journal.trainer_name] = { total: 0, approved: 0, pending: 0 };
        }
        stats.byTrainer[journal.trainer_name].total++;
        if (journal.approval_status === 'APPROVED') stats.byTrainer[journal.trainer_name].approved++;
        if (journal.approval_status === 'PENDING') stats.byTrainer[journal.trainer_name].pending++;

        // By month
        const month = new Date(journal.journal_date).toLocaleDateString('vi-VN', { year: 'numeric', month: '2-digit' });
        if (!stats.byMonth[month]) {
            stats.byMonth[month] = { total: 0, approved: 0, pending: 0 };
        }
        stats.byMonth[month].total++;
        if (journal.approval_status === 'APPROVED') stats.byMonth[month].approved++;
        if (journal.approval_status === 'PENDING') stats.byMonth[month].pending++;

        // Training time calculation (if available)
        if (journal.training_duration) {
            stats.totalTrainingHours += parseFloat(journal.training_duration) || 0;
        }

        // Recent activity (last 10 journals)
        stats.recentActivity.push({
            date: journal.journal_date,
            dog: journal.dog_name,
            trainer: journal.trainer_name,
            status: journal.approval_status,
            approvedAt: journal.approved_at
        });
    });

    // Sort recent activity by date
    stats.recentActivity.sort((a, b) => new Date(b.date) - new Date(a.date));
    stats.recentActivity = stats.recentActivity.slice(0, 10);

    // Calculate average training time
    if (stats.total > 0) {
        stats.averageTrainingTime = stats.totalTrainingHours / stats.total;
    }

    return stats;
}

function showStatisticsModal() {
    const modal = document.createElement('div');
    modal.id = 'statisticsModal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.7);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    `;

    modal.innerHTML = `
        <div style="
            background: white;
            border-radius: 15px;
            width: 90%;
            max-width: 1200px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            position: relative;
        ">
            <div style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 25px;
                border-radius: 15px 15px 0 0;
                position: sticky;
                top: 0;
                z-index: 1;
            ">
                <h2 style="margin: 0; font-size: 24px; font-weight: bold;">
                    üìä TH·ªêNG K√ä CHI TI·∫æT H·ªÜ TH·ªêNG QU·∫¢N L√ù K9
                </h2>
                <p style="margin: 10px 0 0 0; opacity: 0.9; font-size: 14px;">
                    B√°o c√°o t·ªïng quan v√† ph√¢n t√≠ch d·ªØ li·ªáu hu·∫•n luy·ªán
                </p>
            </div>
            
            <div style="padding: 30px;">
                <div id="statisticsContent" style="text-align: center; padding: 50px;">
                    <div style="
                        display: inline-block;
                        width: 50px;
                        height: 50px;
                        border: 4px solid #f3f3f3;
                        border-top: 4px solid #667eea;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        margin-bottom: 20px;
                    "></div>
                    <h3 style="color: #667eea; margin-bottom: 10px;">ƒêang t·∫£i d·ªØ li·ªáu...</h3>
                    <p style="color: #666;">Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                </div>
            </div>
            
            <div style="
                padding: 20px 30px;
                border-top: 1px solid #eee;
                text-align: center;
                background: #f8f9fa;
                border-radius: 0 0 15px 15px;
            ">
                <button onclick="closeStatisticsModal()" style="
                    background: #6c757d;
                    color: white;
                    border: none;
                    padding: 12px 30px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-size: 16px;
                    margin-right: 15px;
                ">ƒê√≥ng</button>
                <button onclick="exportStatistics()" style="
                    background: #28a745;
                    color: white;
                    border: none;
                    padding: 12px 30px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-size: 16px;
                ">üìä Xu·∫•t b√°o c√°o</button>
            </div>
        </div>
        
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    `;

    document.body.appendChild(modal);
}

function updateStatisticsModal(stats) {
    const content = document.getElementById('statisticsContent');

    // Calculate percentages
    const approvedPercent = stats.total > 0 ? ((stats.approved / stats.total) * 100).toFixed(1) : 0;
    const pendingPercent = stats.total > 0 ? ((stats.pending / stats.total) * 100).toFixed(1) : 0;
    const rejectedPercent = stats.total > 0 ? ((stats.rejected / stats.total) * 100).toFixed(1) : 0;
    const incompletePercent = stats.total > 0 ? ((stats.incomplete / stats.total) * 100).toFixed(1) : 0;

    content.innerHTML = `
        <!-- Overview Cards -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px;">
            <div style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 25px; border-radius: 12px; text-align: center;">
                <h3 style="margin: 0 0 10px 0; font-size: 18px;">üìã T·ªïng s·ªë nh·∫≠t k√Ω</h3>
                <div style="font-size: 36px; font-weight: bold; margin-bottom: 5px;">${stats.total}</div>
                <div style="font-size: 14px; opacity: 0.9;">T·∫•t c·∫£ nh·∫≠t k√Ω</div>
            </div>
            
            <div style="background: linear-gradient(135deg, #28a745, #20c997); color: white; padding: 25px; border-radius: 12px; text-align: center;">
                <h3 style="margin: 0 0 10px 0; font-size: 18px;">‚úÖ ƒê√£ duy·ªát</h3>
                <div style="font-size: 36px; font-weight: bold; margin-bottom: 5px;">${stats.approved}</div>
                <div style="font-size: 14px; opacity: 0.9;">${approvedPercent}% t·ªïng s·ªë</div>
            </div>
            
            <div style="background: linear-gradient(135deg, #ffc107, #fd7e14); color: white; padding: 25px; border-radius: 12px; text-align: center;">
                <h3 style="margin: 0 0 10px 0; font-size: 18px;">‚è≥ Ch·ªù duy·ªát</h3>
                <div style="font-size: 36px; font-weight: bold; margin-bottom: 5px;">${stats.pending}</div>
                <div style="font-size: 14px; opacity: 0.9;">${pendingPercent}% t·ªïng s·ªë</div>
            </div>
            
            <div style="background: linear-gradient(135deg, #dc3545, #e83e8c); color: white; padding: 25px; border-radius: 12px; text-align: center;">
                <h3 style="margin: 0 0 10px 0; font-size: 18px;">‚ùå T·ª´ ch·ªëi/Ch∆∞a ho√†n th√†nh</h3>
                <div style="font-size: 36px; font-weight: bold; margin-bottom: 5px;">${stats.rejected + stats.incomplete}</div>
                <div style="font-size: 14px; opacity: 0.9;">${(parseFloat(rejectedPercent) + parseFloat(incompletePercent)).toFixed(1)}% t·ªïng s·ªë</div>
            </div>
        </div>

        <!-- Training Hours Summary -->
        <div style="background: #f8f9fa; padding: 20px; border-radius: 12px; margin-bottom: 30px; border-left: 5px solid #17a2b8;">
            <h3 style="color: #17a2b8; margin: 0 0 15px 0; font-size: 20px;">‚è±Ô∏è Th·ªëng k√™ th·ªùi gian hu·∫•n luy·ªán</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; color: #17a2b8;">${stats.totalTrainingHours.toFixed(1)}</div>
                    <div style="color: #666; font-size: 14px;">T·ªïng gi·ªù hu·∫•n luy·ªán</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; color: #17a2b8;">${stats.averageTrainingTime.toFixed(1)}</div>
                    <div style="color: #666; font-size: 14px;">Gi·ªù trung b√¨nh/bu·ªïi</div>
                </div>
            </div>
        </div>

        <!-- Detailed Breakdown -->
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px;">
            <!-- By Dog -->
            <div style="background: white; border: 1px solid #dee2e6; border-radius: 12px; padding: 20px;">
                <h3 style="color: #495057; margin: 0 0 15px 0; font-size: 18px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üêï Th·ªëng k√™ theo ch√≥ nghi·ªáp v·ª•</h3>
                <div style="max-height: 300px; overflow-y: auto;">
                    ${Object.entries(stats.byDog).map(([dog, data]) => `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #f8f9fa; margin-bottom: 5px;">
                            <div>
                                <strong style="color: #495057;">${dog}</strong>
                                <div style="font-size: 12px; color: #6c757d;">T·ªïng: ${data.total} | ƒê√£ duy·ªát: ${data.approved} | Ch·ªù: ${data.pending}</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-size: 18px; font-weight: bold; color: #28a745;">${data.total > 0 ? ((data.approved / data.total) * 100).toFixed(0) : 0}%</div>
                                <div style="font-size: 10px; color: #6c757d;">T·ª∑ l·ªá duy·ªát</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>

            <!-- By Trainer -->
            <div style="background: white; border: 1px solid #dee2e6; border-radius: 12px; padding: 20px;">
                <h3 style="color: #495057; margin: 0 0 15px 0; font-size: 18px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üë®‚Äçüè´ Th·ªëng k√™ theo hu·∫•n luy·ªán vi√™n</h3>
                <div style="max-height: 300px; overflow-y: auto;">
                    ${Object.entries(stats.byTrainer).map(([trainer, data]) => `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #f8f9fa; margin-bottom: 5px;">
                            <div>
                                <strong style="color: #495057;">${trainer}</strong>
                                <div style="font-size: 12px; color: #6c757d;">T·ªïng: ${data.total} | ƒê√£ duy·ªát: ${data.approved} | Ch·ªù: ${data.pending}</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-size: 18px; font-weight: bold; color: #28a745;">${data.total > 0 ? ((data.approved / data.total) * 100).toFixed(0) : 0}%</div>
                                <div style="font-size: 10px; color: #6c757d;">T·ª∑ l·ªá duy·ªát</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>

        <!-- Monthly Statistics -->
        <div style="background: white; border: 1px solid #dee2e6; border-radius: 12px; padding: 20px; margin-bottom: 30px;">
            <h3 style="color: #495057; margin: 0 0 15px 0; font-size: 18px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üìÖ Th·ªëng k√™ theo th√°ng</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                ${Object.entries(stats.byMonth).sort((a, b) => b[0].localeCompare(a[0])).map(([month, data]) => `
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;">
                        <div style="font-weight: bold; color: #495057; margin-bottom: 5px;">${month}</div>
                        <div style="font-size: 14px; color: #6c757d;">
                            T·ªïng: ${data.total} | ƒê√£ duy·ªát: ${data.approved} | Ch·ªù: ${data.pending}
                        </div>
                        <div style="font-size: 12px; color: #28a745; margin-top: 5px;">
                            T·ª∑ l·ªá duy·ªát: ${data.total > 0 ? ((data.approved / data.total) * 100).toFixed(1) : 0}%
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>

        <!-- Recent Activity -->
        <div style="background: white; border: 1px solid #dee2e6; border-radius: 12px; padding: 20px;">
            <h3 style="color: #495057; margin: 0 0 15px 0; font-size: 18px; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">üïí Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h3>
            <div style="max-height: 300px; overflow-y: auto;">
                ${stats.recentActivity.map(activity => {
        const statusColor = activity.status === 'APPROVED' ? '#28a745' :
            activity.status === 'PENDING' ? '#ffc107' : '#dc3545';
        const statusText = activity.status === 'APPROVED' ? 'ƒê√£ duy·ªát' :
            activity.status === 'PENDING' ? 'Ch·ªù duy·ªát' : 'T·ª´ ch·ªëi/Ch∆∞a ho√†n th√†nh';

        return `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; border-bottom: 1px solid #f8f9fa; margin-bottom: 5px;">
                            <div>
                                <div style="font-weight: bold; color: #495057;">${activity.dog}</div>
                                <div style="font-size: 12px; color: #6c757d;">
                                    ${new Date(activity.date).toLocaleDateString('vi-VN')} - ${activity.trainer}
                                </div>
                            </div>
                            <div style="text-align: right;">
                                <span style="background: ${statusColor}; color: white; padding: 4px 8px; border-radius: 12px; font-size: 11px;">
                                    ${statusText}
                                </span>
                                ${activity.approvedAt ? `
                                    <div style="font-size: 10px; color: #6c757d; margin-top: 2px;">
                                        Duy·ªát: ${new Date(activity.approvedAt).toLocaleDateString('vi-VN')}
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    `;
    }).join('')}
            </div>
        </div>
    `;
}

function showStatisticsError(message) {
    const content = document.getElementById('statisticsContent');
    content.innerHTML = `
        <div style="text-align: center; padding: 50px;">
            <div style="font-size: 48px; color: #dc3545; margin-bottom: 20px;">‚ùå</div>
            <h3 style="color: #dc3545; margin-bottom: 15px;">L·ªói t·∫£i d·ªØ li·ªáu</h3>
            <p style="color: #666; margin-bottom: 20px;">${message}</p>
            <button onclick="showManagerStatistics()" style="
                background: #007bff;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
            ">üîÑ Th·ª≠ l·∫°i</button>
        </div>
    `;
}

function closeStatisticsModal() {
    const modal = document.getElementById('statisticsModal');
    if (modal) {
        modal.remove();
    }
}

function exportStatistics() {
    // Get current statistics data
    const content = document.getElementById('statisticsContent');
    const statsText = content.innerText;

    // Create and download file
    const blob = new Blob([statsText], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `thong-ke-k9-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showNotification('B√°o c√°o th·ªëng k√™ ƒë√£ ƒë∆∞·ª£c xu·∫•t th√†nh c√¥ng!', 'success');
}

// AI Search System - Ultra Stable Version
let aiSearchHistory = [];

// Load AI search history from database
async function loadAISearchHistory() {
    try {
        // TODO: Implement database loading for AI search history
        aiSearchHistory = [];
    } catch (error) {
        aiSearchHistory = [];
    }
}

// Initialize AI search history
loadAISearchHistory();
let aiSearchIndex = {};
let aiSearchState = {
    isOpening: false,
    isClosing: false,
    isOpen: false
};

// Ultra Stable AI Search Function
function chatWithAI() {

    // Opening AI Search interface

    // Prevent any concurrent operations
    if (aiSearchState.isOpening || aiSearchState.isClosing || aiSearchState.isOpen) {
        // Modal operation already in progress
        return;
    }

    aiSearchState.isOpening = true;

    // Initialize search index if not done
    if (Object.keys(aiSearchIndex).length === 0) {
        initializeAISearchIndex();
    }

    // Use requestAnimationFrame for smooth opening
    requestAnimationFrame(() => {
        openAISearchModalStable();
    });
}

// Stable modal opening function
function openAISearchModalStable() {
    const modal = document.getElementById('aiSearchModal');

    // Add show class immediately
    modal.classList.add('show');
    aiSearchState.isOpen = true;

    // Focus on input after a short delay
    setTimeout(() => {
        const input = document.getElementById('aiSearchInput');
        if (input) {
            input.focus();
        }
        aiSearchState.isOpening = false;
    }, 50);

    // Load search history
    loadAISearchHistory();
}

// Initialize AI search index
function initializeAISearchIndex() {
    // Initializing AI search index

    // Build search index from various sources
    aiSearchIndex = {
        dogs: [],
        users: [],
        journals: [],
        content: [],
        procedures: [],
        files: []
    };

    // Index static content
    indexStaticContent();

    // AI search index initialized
}

// Index static content from the application
function indexStaticContent() {
    // Dog profiles content
    const dogProfiles = [
        {
            name: 'CNV BI',
            content: 'Ch√≥ nghi·ªáp v·ª• CNV BI - Chuy√™n ph√°t hi·ªán ma t√∫y, h√†ng c·∫•m. Hu·∫•n luy·ªán vi√™n: Tr·∫ßn ƒê·ª©c Ki√™n. Gi·ªëng: Belgian Malinois. Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông.',
            keywords: ['ch√≥ nghi·ªáp v·ª•', 'ma t√∫y', 'h√†ng c·∫•m', 'hu·∫•n luy·ªán', 'Belgian Malinois']
        },
        {
            name: 'CNV LU',
            content: 'Ch√≥ nghi·ªáp v·ª• CNV LU - Chuy√™n ph√°t hi·ªán ma t√∫y, h√†ng c·∫•m. Hu·∫•n luy·ªán vi√™n: Tr·∫ßn ƒê·ª©c Ki√™n. Gi·ªëng: Belgian Malinois. Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông.',
            keywords: ['ch√≥ nghi·ªáp v·ª•', 'ma t√∫y', 'h√†ng c·∫•m', 'hu·∫•n luy·ªán', 'Belgian Malinois']
        },
        {
            name: 'CNV R·∫æCH',
            content: 'Ch√≥ nghi·ªáp v·ª• CNV R·∫æCH - Chuy√™n ph√°t hi·ªán ma t√∫y, h√†ng c·∫•m. Hu·∫•n luy·ªán vi√™n: Nguy·ªÖn VƒÉn Tu·∫•n. Gi·ªëng: Belgian Malinois. Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông.',
            keywords: ['ch√≥ nghi·ªáp v·ª•', 'ma t√∫y', 'h√†ng c·∫•m', 'hu·∫•n luy·ªán', 'Belgian Malinois']
        },
        {
            name: 'CNV KY',
            content: 'Ch√≥ nghi·ªáp v·ª• CNV KY - Chuy√™n ph√°t hi·ªán ma t√∫y, h√†ng c·∫•m. Hu·∫•n luy·ªán vi√™n: L√™ VƒÉn Quang. Gi·ªëng: Belgian Malinois. Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông.',
            keywords: ['ch√≥ nghi·ªáp v·ª•', 'ma t√∫y', 'h√†ng c·∫•m', 'hu·∫•n luy·ªán', 'Belgian Malinois']
        },
        {
            name: 'CNV REX',
            content: 'Ch√≥ nghi·ªáp v·ª• CNV REX - Chuy√™n ph√°t hi·ªán ma t√∫y, h√†ng c·∫•m. Hu·∫•n luy·ªán vi√™n: Ph·∫°m VƒÉn Ki√™n. Gi·ªëng: Belgian Malinois. Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông.',
            keywords: ['ch√≥ nghi·ªáp v·ª•', 'ma t√∫y', 'h√†ng c·∫•m', 'hu·∫•n luy·ªán', 'Belgian Malinois']
        }
    ];

    // Procedures and guidelines
    const procedures = [
        {
            title: 'Quy tr√¨nh chƒÉm s√≥c ch√≥ nghi·ªáp v·ª•',
            content: 'Quy tr√¨nh chƒÉm s√≥c bao g·ªìm: Ki·ªÉm tra s·ª©c kh·ªèe h√†ng ng√†y, cho ƒÉn ƒë√∫ng gi·ªù, t·∫≠p th·ªÉ d·ª•c, v·ªá sinh chu·ªìng tr·∫°i, ti√™m ph√≤ng ƒë·ªãnh k·ª≥, ki·ªÉm tra rƒÉng mi·ªáng.',
            keywords: ['chƒÉm s√≥c', 's·ª©c kh·ªèe', 'v·ªá sinh', 'ti√™m ph√≤ng', 'chu·ªìng tr·∫°i']
        },
        {
            title: 'Quy tr√¨nh hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª•',
            content: 'Quy tr√¨nh hu·∫•n luy·ªán: L√†m quen v·ªõi m√πi ma t√∫y, hu·∫•n luy·ªán ph√°t hi·ªán, t·∫≠p luy·ªán h√†ng ng√†y, ki·ªÉm tra hi·ªáu qu·∫£, c·∫≠p nh·∫≠t k·ªπ nƒÉng.',
            keywords: ['hu·∫•n luy·ªán', 'ma t√∫y', 'ph√°t hi·ªán', 'k·ªπ nƒÉng', 't·∫≠p luy·ªán']
        },
        {
            title: 'Quy tr√¨nh s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª•',
            content: 'Quy tr√¨nh s·ª≠ d·ª•ng: Ki·ªÉm tra tr∆∞·ªõc khi l√†m vi·ªác, tu√¢n th·ªß an to√†n, ghi nh·∫≠t k√Ω ho·∫°t ƒë·ªông, b√°o c√°o k·∫øt qu·∫£, b·∫£o d∆∞·ª°ng thi·∫øt b·ªã.',
            keywords: ['s·ª≠ d·ª•ng', 'an to√†n', 'nh·∫≠t k√Ω', 'b√°o c√°o', 'b·∫£o d∆∞·ª°ng']
        }
    ];

    // Add to search index
    aiSearchIndex.dogs = dogProfiles;
    aiSearchIndex.procedures = procedures;

    // Add general content
    aiSearchIndex.content = [
        {
            title: 'T·ªïng quan h·ªá th·ªëng',
            content: 'H·ªá th·ªëng qu·∫£n l√Ω ch√≥ nghi·ªáp v·ª• H·∫£i quan Vi·ªát Nam t·∫°i c·ª≠a kh·∫©u qu·ªëc t·∫ø M√≥ng C√°i. Qu·∫£n l√Ω th√¥ng tin ch√≥, hu·∫•n luy·ªán vi√™n, nh·∫≠t k√Ω ho·∫°t ƒë·ªông.',
            keywords: ['h·ªá th·ªëng', 'qu·∫£n l√Ω', 'h·∫£i quan', 'm√≥ng c√°i', 'c·ª≠a kh·∫©u']
        }
    ];
}

// Ultra Stable Close Function
function closeAISearch() {
    // Prevent concurrent operations
    if (aiSearchState.isClosing || !aiSearchState.isOpen) {
        // Close operation already in progress
        return;
    }

    aiSearchState.isClosing = true;

    const modal = document.getElementById('aiSearchModal');

    // Remove show class immediately
    modal.classList.remove('show');
    aiSearchState.isOpen = false;

    // Clear content after animation
    setTimeout(() => {
        clearAISearchContent();
        aiSearchState.isClosing = false;
    }, 200);
}

// Clear search content
function clearAISearchContent() {
    const resultsContainer = document.getElementById('aiSearchResults');
    const loadingContainer = document.getElementById('aiSearchLoading');
    const noResultsContainer = document.getElementById('aiSearchNoResults');

    if (resultsContainer) resultsContainer.style.display = 'none';
    if (loadingContainer) loadingContainer.style.display = 'none';
    if (noResultsContainer) noResultsContainer.style.display = 'none';

    // Clear input
    const input = document.getElementById('aiSearchInput');
    if (input) input.value = '';
}

// Search suggestion click handler
function searchSuggestion(query) {
    document.getElementById('aiSearchInput').value = query;
    performAISearch();
}

// Main AI search function
async function performAISearch() {
    const query = document.getElementById('aiSearchInput').value.trim();
    if (!query) {
        alert('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!');
        return;
    }

    // Performing AI search

    // Show loading
    showAISearchLoading();

    // Add to search history
    addToSearchHistory(query);

    try {
        // Perform comprehensive search
        const results = await performComprehensiveSearch(query);

        // Display results
        displayAISearchResults(results, query);

    } catch (error) {
        showAISearchError('C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm: ' + error.message);
    }
}

// Perform comprehensive search across all sources
async function performComprehensiveSearch(query) {
    const results = [];
    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);

    // Search terms

    // 1. Search database (dogs, users, journals)
    try {
        const dbResults = await searchDatabase(query);
        results.push(...dbResults);
    } catch (error) {
    }

    // 2. Search static content
    const staticResults = searchStaticContent(query, searchTerms);
    results.push(...staticResults);

    // 3. Search current page content
    const pageResults = searchPageContent(query);
    results.push(...pageResults);

    // Sort results by relevance
    return sortSearchResults(results, query);
}

// Search database for relevant information
async function searchDatabase(query) {
    const results = [];

    try {
        // Search dogs
        const dogsResponse = await fetch('http://localhost:5000/api/dogs');
        if (dogsResponse.ok) {
            const dogs = await dogsResponse.json();
            dogs.forEach(dog => {
                if (matchesQuery(dog, query)) {
                    results.push({
                        type: 'dog',
                        icon: 'üê∂',
                        title: `Ch√≥ nghi·ªáp v·ª• ${dog.name}`,
                        content: `Gi·ªëng: ${dog.breed}, Hu·∫•n luy·ªán vi√™n: ${dog.trainer_id}, Tr·∫°ng th√°i: ${dog.status}`,
                        relevance: calculateRelevance(dog, query),
                        action: () => showDogProfileForm(dog.name)
                    });
                }
            });
        }

        // Search training journals
        const journalsResponse = await fetch('http://localhost:5000/api/journals');
        if (journalsResponse.ok) {
            const journals = await journalsResponse.json();
            journals.forEach(journal => {
                if (matchesQuery(journal, query)) {
                    results.push({
                        type: 'training_journal',
                        icon: 'üìù',
                        title: `Nh·∫≠t k√Ω ${journal.dog_name} - ${formatDateToDDMMYYYY(journal.journal_date)}`,
                        content: `Hu·∫•n luy·ªán vi√™n: ${journal.trainer_name || 'N/A'}, Tr·∫°ng th√°i: ${journal.approval_status}, Ho·∫°t ƒë·ªông: ${journal.training_activities || 'N/A'}`,
                        relevance: calculateRelevance(journal, query),
                        action: () => showTrainingJournalModal(journal)
                    });
                }
            });
        }

    } catch (error) {
    }

    return results;
}

// Search static content
function searchStaticContent(query, searchTerms) {
    const results = [];

    // Search dogs
    aiSearchIndex.dogs.forEach(dog => {
        if (matchesQuery(dog, query)) {
            results.push({
                type: 'dog',
                icon: 'üê∂',
                title: `Ch√≥ nghi·ªáp v·ª• ${dog.name}`,
                content: dog.content,
                relevance: calculateRelevance(dog, query),
                action: () => showDogProfileForm(dog.name)
            });
        }
    });

    // Search procedures
    aiSearchIndex.procedures.forEach(procedure => {
        if (matchesQuery(procedure, query)) {
            results.push({
                type: 'procedure',
                icon: 'üìã',
                title: procedure.title,
                content: procedure.content,
                relevance: calculateRelevance(procedure, query),
                action: () => showContent(procedure.title)
            });
        }
    });

    return results;
}

// Search current page content
function searchPageContent(query) {
    const results = [];
    const searchTerms = query.toLowerCase().split(' ');

    // Search sidebar items
    const sidebarItems = document.querySelectorAll('.sidebar ul li');
    sidebarItems.forEach(item => {
        const text = item.innerText.toLowerCase();
        if (searchTerms.some(term => text.includes(term))) {
            results.push({
                type: 'navigation',
                icon: 'üß≠',
                title: `Menu: ${item.innerText.trim()}`,
                content: `T√¨m th·∫•y trong menu ƒëi·ªÅu h∆∞·ªõng`,
                relevance: 0.7,
                action: () => item.click()
            });
        }
    });

    return results;
}

// Helper functions
function matchesQuery(obj, query) {
    const searchText = JSON.stringify(obj).toLowerCase();
    const queryLower = query.toLowerCase();

    if (searchText.includes(queryLower)) return true;

    const queryWords = queryLower.split(' ').filter(word => word.length > 2);
    return queryWords.some(word => searchText.includes(word));
}

function calculateRelevance(obj, query) {
    const searchText = JSON.stringify(obj).toLowerCase();
    const queryLower = query.toLowerCase();

    let score = 0;

    if (searchText.includes(queryLower)) score += 1.0;

    const queryWords = queryLower.split(' ').filter(word => word.length > 2);
    queryWords.forEach(word => {
        if (searchText.includes(word)) score += 0.3;
    });

    if (obj.title && obj.title.toLowerCase().includes(queryLower)) score += 0.5;

    return Math.min(score, 1.0);
}

function sortSearchResults(results, query) {
    return results.sort((a, b) => {
        if (b.relevance !== a.relevance) return b.relevance - a.relevance;

        const typePriority = {
            'dog': 1, 'journal': 2, 'procedure': 3, 'user': 4,
            'content': 5, 'navigation': 6, 'file': 7
        };

        return (typePriority[a.type] || 99) - (typePriority[b.type] || 99);
    });
}

// Display and UI functions
function displayAISearchResults(results, query) {
    hideAISearchLoading();

    const resultsContainer = document.getElementById('aiSearchResults');
    const noResultsContainer = document.getElementById('aiSearchNoResults');

    if (results.length === 0) {
        resultsContainer.style.display = 'none';
        noResultsContainer.style.display = 'block';
        noResultsContainer.innerHTML = `
            <div>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho "${query}"</div>
            <div style="margin-top: 10px; font-size: 14px; color: #999;">
                Th·ª≠ c√°c t·ª´ kh√≥a kh√°c ho·∫∑c ki·ªÉm tra ch√≠nh t·∫£
            </div>
        `;
        return;
    }

    noResultsContainer.style.display = 'none';
    resultsContainer.style.display = 'block';

    const topResults = results.slice(0, 10);

    resultsContainer.innerHTML = topResults.map(result => `
        <div class="ai-search-result-item" onclick="${result.action ? 'handleSearchResultClick(this)' : ''}" data-action="${result.action ? 'true' : 'false'}">
            <div class="ai-result-header">
                <span class="ai-result-icon">${result.icon}</span>
                <span class="ai-result-title">${highlightQuery(result.title, query)}</span>
                <span class="ai-result-type">${getTypeLabel(result.type)}</span>
            </div>
            <div class="ai-result-content">
                ${highlightQuery(result.content, query)}
            </div>
        </div>
    `).join('');

    window.currentSearchResults = topResults;
}

function handleSearchResultClick(element) {
    const index = Array.from(element.parentNode.children).indexOf(element);
    const result = window.currentSearchResults[index];

    if (result && result.action) {
        closeAISearch();
        setTimeout(() => result.action(), 300);
    }
}

function highlightQuery(text, query) {
    if (!query) return text;

    const queryWords = query.toLowerCase().split(' ').filter(word => word.length > 2);
    let highlightedText = text;

    queryWords.forEach(word => {
        const regex = new RegExp(`(${word})`, 'gi');
        highlightedText = highlightedText.replace(regex, '<span class="ai-result-highlight">$1</span>');
    });

    return highlightedText;
}

function getTypeLabel(type) {
    const labels = {
        'dog': 'Ch√≥', 'journal': 'Nh·∫≠t k√Ω', 'procedure': 'Quy tr√¨nh',
        'user': 'Ng∆∞·ªùi d√πng', 'content': 'N·ªôi dung', 'navigation': 'Menu', 'file': 'T·ªáp'
    };
    return labels[type] || 'Kh√°c';
}

function showAISearchLoading() {
    document.getElementById('aiSearchResults').style.display = 'none';
    document.getElementById('aiSearchNoResults').style.display = 'none';
    document.getElementById('aiSearchLoading').style.display = 'block';
}

function hideAISearchLoading() {
    document.getElementById('aiSearchLoading').style.display = 'none';
}

function showAISearchError(message) {
    hideAISearchLoading();
    document.getElementById('aiSearchResults').style.display = 'none';
    document.getElementById('aiSearchNoResults').style.display = 'block';
    document.getElementById('aiSearchNoResults').innerHTML = `<div>‚ùå ${message}</div>`;
}

// Search history management
function addToSearchHistory(query) {
    const timestamp = new Date().toISOString();
    const historyItem = { query, timestamp };

    aiSearchHistory = aiSearchHistory.filter(item => item.query !== query);
    aiSearchHistory.unshift(historyItem);
    aiSearchHistory = aiSearchHistory.slice(0, 20);

    // TODO: Save AI search history to database
    loadAISearchHistory();
}

function loadAISearchHistory() {
    const historyContainer = document.getElementById('aiSearchHistory');
    const historyList = document.getElementById('aiHistoryList');

    if (aiSearchHistory.length === 0) {
        historyContainer.style.display = 'none';
        return;
    }

    historyContainer.style.display = 'block';

    historyList.innerHTML = aiSearchHistory.slice(0, 10).map(item => {
        const timeAgo = getTimeAgo(item.timestamp);
        return `
            <div class="ai-history-item" onclick="searchSuggestion('${item.query}')">
                <span class="ai-history-query">${item.query}</span>
                <span class="ai-history-time">${timeAgo}</span>
            </div>
        `;
    }).join('');
}

function getTimeAgo(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'V·ª´a xong';
    if (diffMins < 60) return `${diffMins} ph√∫t tr∆∞·ªõc`;
    if (diffHours < 24) return `${diffHours} gi·ªù tr∆∞·ªõc`;
    return `${diffDays} ng√†y tr∆∞·ªõc`;
}

// Ultra Stable Event Handlers
document.addEventListener('keydown', function (event) {
    if (event.key === 'Escape' && aiSearchState.isOpen) {
        closeAISearch();
    }
});

document.addEventListener('click', function (event) {
    const modal = document.getElementById('aiSearchModal');
    if (event.target === modal && aiSearchState.isOpen) {
        closeAISearch();
    }
});

document.addEventListener('click', function (event) {
    const modalContent = document.querySelector('.ai-search-content');
    if (modalContent && modalContent.contains(event.target)) {
        event.stopPropagation();
    }
});


// ===== JOURNAL FUNCTIONALITY - KH√îI PH·ª§C T·ª™ FILE C≈® =====



// Generic function to handle "Other" input visibility for checkboxes

function handleCheckboxOther(checkboxElement, otherInputElement) {

    if (checkboxElement && otherInputElement) {

        const toggleOtherInput = () => {

            if (checkboxElement.checked) {

                otherInputElement.classList.remove('hidden');

            } else {

                otherInputElement.classList.add('hidden');

                otherInputElement.value = '';

            }

        };

        checkboxElement.addEventListener('change', toggleOtherInput);

        toggleOtherInput();

    }

}



// Function to initialize visibility for "Other" inputs

function initializeHiddenInputs(container = document) {

    // "Other" in Training Activity

    container.querySelectorAll('.training-block .training-other-input').forEach(input => {

        const relatedCheckbox = input.closest('.field-group')?.querySelector('.training-checkbox[value="Kh√°c"]');

        if (relatedCheckbox) {

            handleCheckboxOther(relatedCheckbox, input);

        }

    });



    // Training Location "Other"

    container.querySelectorAll('input[name^="training-location-group-"]').forEach(radio => {

        const otherInput = radio.closest('.field-group')?.querySelector('.location-other-input');

        if (otherInput) {

            radio.addEventListener('change', () => {

                if (radio.value === 'Kh√°c' && radio.checked) {

                    otherInput.classList.remove('hidden');

                } else {

                    otherInput.classList.add('hidden');

                    otherInput.value = '';

                }

            });

            if (radio.value === 'Kh√°c' && radio.checked) {

                otherInput.classList.remove('hidden');

            }

        }

    });



    // Health Status "Abnormal" or "Sick/Injured"

    container.querySelectorAll('input[name="health_status"]').forEach(radio => {

        const healthOtherTextInput = document.getElementById('health_other_text');

        if (healthOtherTextInput) {

            radio.addEventListener('change', () => {

                if (radio.checked && (radio.dataset.healthType === 'abnormal' || radio.dataset.healthType === 'sick')) {

                    healthOtherTextInput.classList.remove('hidden');

                } else {

                    healthOtherTextInput.classList.add('hidden');

                    healthOtherTextInput.value = '';

                }

            });

            if (radio.checked && (radio.dataset.healthType === 'abnormal' || radio.dataset.healthType === 'sick')) {

                healthOtherTextInput.classList.remove('hidden');

            }

        }

    });



    // "Other" in Operation Activity

    container.querySelectorAll('.operation-activity-row-1 .operation-other-input-1').forEach(input => {

        const relatedCheckbox = input.closest('.operation-activity-row-1')?.querySelector('.operation-checkbox-1[value="Kh√°c"]');

        if (relatedCheckbox) {

            handleCheckboxOther(relatedCheckbox, input);

        }

    });



    container.querySelectorAll('.operation-activity-row-2 .operation-other-input-2').forEach(input => {

        const relatedCheckbox = input.closest('.operation-activity-row-2')?.querySelector('.operation-checkbox-2[value="Kh√°c"]');

        if (relatedCheckbox) {

            handleCheckboxOther(relatedCheckbox, input);

        }

    });

}



// Function toggleFoodDropdown

function toggleFoodDropdown(optionsId) {

    const dropdown = document.getElementById(optionsId);

    if (dropdown) {

        dropdown.classList.toggle('hidden');

        // ƒê√≥ng c√°c dropdown kh√°c

        document.querySelectorAll('.custom-dropdown-options').forEach(other => {

            if (other.id !== optionsId) {

                other.classList.add('hidden');

            }

        });

    }

}



// Function updateFoodDisplay

function updateFoodDisplay(displayBoxId, optionsListId, otherFoodInputId) {

    const optionsList = document.getElementById(optionsListId);

    const displayBox = document.getElementById(displayBoxId);

    const otherFoodInput = document.getElementById(otherFoodInputId);



    if (!optionsList || !displayBox || !otherFoodInput) {


        return;

    }



    const selectedFoods = [];

    let hasOtherSelected = false;



    optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {

        if (checkbox.checked) {

            if (checkbox.dataset.foodValue === 'Kh√°c') {

                hasOtherSelected = true;

            } else {

                selectedFoods.push(checkbox.dataset.foodValue);

            }

        }

    });



    if (hasOtherSelected) {

        otherFoodInput.classList.remove('hidden');

    } else {

        otherFoodInput.classList.add('hidden');

        otherFoodInput.value = '';

    }



    let displayText = selectedFoods.join(', ');

    if (hasOtherSelected && otherFoodInput.value.trim() !== '') {

        if (displayText !== '') {

            displayText += ', ' + otherFoodInput.value.trim();

        } else {

            displayText = otherFoodInput.value.trim();

        }

    } else if (hasOtherSelected && otherFoodInput.value.trim() === '') {

        if (displayText === '') {

            displayText = 'Kh√°c';

        } else {

            displayText += ', Kh√°c';

        }

    }



    displayBox.innerText = displayText || 'Ch∆∞a ch·ªçn';



    const triggerText = optionsList.closest('.custom-food-select-wrapper').querySelector('.selected-text');

    if (triggerText) {

        triggerText.textContent = displayText || 'Ch·ªçn th·ª©c ƒÉn';

    }

}



// Function to add a new training block

function addTrainingBlock(data = {}) {

    const container = document.getElementById('training-blocks-container');

    if (!container) {


        return;

    }



    trainingSessionCounter++;

    const trainingNumber = trainingSessionCounter;

    // Adding training block

    blockCounter++;

    const currentBlockId = blockCounter;



    const newBlock = document.createElement('div');

    newBlock.classList.add('training-block');

    newBlock.setAttribute('data-block-id', currentBlockId);



    const drugOptionsHtml = DRUG_TYPES.map(drug => '<label><input type="checkbox" data-drug-value="' + drug + '" onchange="updateDrugDisplay(' + currentBlockId + ', 1)">' + drug + '</label>').join('');



    const drugOptionsHtml2 = DRUG_TYPES.map(drug => '<label><input type="checkbox" data-drug-value="' + drug + '" onchange="updateDrugDisplay(' + currentBlockId + ', 2)">' + drug + '</label>').join('');



    const drugOptionsHtml3 = DRUG_TYPES.map(drug => '<label><input type="checkbox" data-drug-value="' + drug + '" onchange="updateDrugDisplay(' + currentBlockId + ', 3)">' + drug + '</label>').join('');



    const healthManifestationsHtml1 = HEALTH_MANIFESTATIONS.map(manifest => '<label><input type="checkbox" data-manifestation-type="' + manifest.toLowerCase().replace(/\s/g, '-') + '" value="' + manifest + '" ' + (data.drugDetection && data.drugDetection[0] && data.drugDetection[0].manifestation?.includes(manifest) ? 'checked' : '') + '> ' + manifest + '</label>').join('');



    const healthManifestationsHtml2 = HEALTH_MANIFESTATIONS.map(manifest => '<label><input type="checkbox" data-manifestation-type="' + manifest.toLowerCase().replace(/\s/g, '-') + '" value="' + manifest + '" ' + (data.drugDetection && data.drugDetection[1] && data.drugDetection[1].manifestation?.includes(manifest) ? 'checked' : '') + '> ' + manifest + '</label>').join('');



    const healthManifestationsHtml3 = HEALTH_MANIFESTATIONS.map(manifest => '<label><input type="checkbox" data-manifestation-type="' + manifest.toLowerCase().replace(/\s/g, '-') + '" value="' + manifest + '" ' + (data.drugDetection && data.drugDetection[2] && data.drugDetection[2].manifestation?.includes(manifest) ? 'checked' : '') + '> ' + manifest + '</label>').join('');



    newBlock.innerHTML = '<div class="training-first-row"><h3>Ca ' + trainingNumber + ':</h3><div class="field-group"><label for="trainingFromTime-' + currentBlockId + '">Th·ªùi gian:</label><input type="time" id="trainingFromTime-' + currentBlockId + '" value="' + (data.fromTime || '08:00') + '"></div><div class="field-group"><label for="trainingToTime-' + currentBlockId + '">ƒê·∫øn:</label><input type="time" id="trainingToTime-' + currentBlockId + '" value="' + (data.toTime || '09:00') + '"></div><div class="field-group"><label>ƒê·ªãa ƒëi·ªÉm:</label><label><input type="radio" name="training-location-group-' + currentBlockId + '" value="S√¢n t·∫≠p" ' + (data.locationType === 'S√¢n t·∫≠p' ? 'checked' : '') + ' onchange="updateLocationVisibility(' + currentBlockId + ')"> S√¢n t·∫≠p</label><label><input type="radio" name="training-location-group-' + currentBlockId + '" value="Kh√°c" data-location-type="khac" ' + (data.locationType === 'Kh√°c' ? 'checked' : '') + ' onchange="updateLocationVisibility(' + currentBlockId + ')"> Kh√°c</label><input type="text" class="location-other-input ' + (data.locationType !== 'Kh√°c' ? 'hidden' : '') + '" id="trainingLocationOther-' + currentBlockId + '" placeholder="Ghi ƒë·ªãa ƒëi·ªÉm kh√°c" value="' + (data.locationOther || '') + '"></div></div><div class="training-second-row"><div class="field-group"><label>N·ªôi dung:</label><div class="training-content-checkboxes"><label><input type="checkbox" class="training-checkbox" id="hlNangCaoCheckbox-' + currentBlockId + '" value="HL n√¢ng cao" ' + (data.advancedTraining ? 'checked' : '') + '> HL n√¢ng cao</label><label><input type="checkbox" class="training-checkbox" id="hlCoBanCheckbox-' + currentBlockId + '" value="HL ƒë·ªông t√°c c∆° b·∫£n" ' + (data.basicTraining ? 'checked' : '') + '> HL ƒë·ªông t√°c c∆° b·∫£n</label><label><input type="checkbox" class="training-checkbox" id="hlTheLucCheckbox-' + currentBlockId + '" value="HL th·ªÉ l·ª±c" ' + (data.physicalTraining ? 'checked' : '') + '> HL th·ªÉ l·ª±c</label><label><input type="checkbox" class="training-checkbox" id="hlKhacCheckbox-' + currentBlockId + '" value="Kh√°c" ' + (data.otherTraining ? 'checked' : '') + ' onchange="toggleOtherTrainingInput(' + currentBlockId + ')"> Kh√°c</label><input type="text" class="training-other-input ' + (!data.otherTraining ? 'hidden' : '') + '" id="hlKhacText-' + currentBlockId + '" placeholder="Ghi n·ªôi dung kh√°c" value="' + (data.otherTraining || '') + '"></div></div></div><div class="drug-detection-section"><h4>HL ph√°t hi·ªán ngu·ªìn h∆°i ma t√∫y:</h4><div class="drug-detection-row"><label>L·∫ßn 1:</label><div class="custom-location-select-wrapper drug-select-wrapper-' + currentBlockId + '-1"><div class="custom-dropdown-trigger" onclick="toggleDrugDropdown(\'drugTypeOptions-' + currentBlockId + '-1\')"><span class="selected-text" id="drugTypeTriggerText-' + currentBlockId + '-1">Ch·ªçn lo·∫°i ma t√∫y</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="drugTypeOptions-' + currentBlockId + '-1">' + drugOptionsHtml + '</div></div><span class="location-selected-display-box" id="drugTypeDisplayBox-' + currentBlockId + '-1">Ch∆∞a ch·ªçn</span><input type="text" class="location-other-input hidden" id="drugTypeOther-' + currentBlockId + '-1" placeholder="Lo·∫°i ma t√∫y kh√°c" value="' + (data.drugDetection && data.drugDetection[0] ? (data.drugDetection[0].drugTypeOther || '') : '') + '" onchange="updateDrugDisplay(' + currentBlockId + ', 1)"><label>Bi·ªÉu hi·ªán:</label><div class="detection-manifestation-checkboxes detection-manifestation-1">' + healthManifestationsHtml1 + '</div><input type="text" class="detection-manifestation-other-1 hidden" id="manifestationOther-' + currentBlockId + '-1" placeholder="Bi·ªÉu hi·ªán kh√°c" value="' + (data.drugDetection && data.drugDetection[0] ? (data.drugDetection[0].manifestationOther || '') : '') + '"></div><div class="drug-detection-row"><label>L·∫ßn 2:</label><div class="custom-location-select-wrapper drug-select-wrapper-' + currentBlockId + '-2"><div class="custom-dropdown-trigger" onclick="toggleDrugDropdown(\'drugTypeOptions-' + currentBlockId + '-2\')"><span class="selected-text" id="drugTypeTriggerText-' + currentBlockId + '-2">Ch·ªçn lo·∫°i ma t√∫y</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="drugTypeOptions-' + currentBlockId + '-2">' + drugOptionsHtml2 + '</div></div><span class="location-selected-display-box" id="drugTypeDisplayBox-' + currentBlockId + '-2">Ch∆∞a ch·ªçn</span><input type="text" class="location-other-input hidden" id="drugTypeOther-' + currentBlockId + '-2" placeholder="Lo·∫°i ma t√∫y kh√°c" value="' + (data.drugDetection && data.drugDetection[1] ? (data.drugDetection[1].drugTypeOther || '') : '') + '" onchange="updateDrugDisplay(' + currentBlockId + ', 2)"><label>Bi·ªÉu hi·ªán:</label><div class="detection-manifestation-checkboxes detection-manifestation-2">' + healthManifestationsHtml2 + '</div><input type="text" class="detection-manifestation-other-2 hidden" id="manifestationOther-' + currentBlockId + '-2" placeholder="Bi·ªÉu hi·ªán kh√°c" value="' + (data.drugDetection && data.drugDetection[1] ? (data.drugDetection[1].manifestationOther || '') : '') + '"></div><div class="drug-detection-row"><label>L·∫ßn 3:</label><div class="custom-location-select-wrapper drug-select-wrapper-' + currentBlockId + '-3"><div class="custom-dropdown-trigger" onclick="toggleDrugDropdown(\'drugTypeOptions-' + currentBlockId + '-3\')"><span class="selected-text" id="drugTypeTriggerText-' + currentBlockId + '-3">Ch·ªçn lo·∫°i ma t√∫y</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="drugTypeOptions-' + currentBlockId + '-3">' + drugOptionsHtml3 + '</div></div><span class="location-selected-display-box" id="drugTypeDisplayBox-' + currentBlockId + '-3">Ch∆∞a ch·ªçn</span><input type="text" class="location-other-input hidden" id="drugTypeOther-' + currentBlockId + '-3" placeholder="Lo·∫°i ma t√∫y kh√°c" value="' + (data.drugDetection && data.drugDetection[2] ? (data.drugDetection[2].drugTypeOther || '') : '') + '" onchange="updateDrugDisplay(' + currentBlockId + ', 3)"><label>Bi·ªÉu hi·ªán:</label><div class="detection-manifestation-checkboxes detection-manifestation-3">' + healthManifestationsHtml3 + '</div><input type="text" class="detection-manifestation-other-3 hidden" id="manifestationOther-' + currentBlockId + '-3" placeholder="Bi·ªÉu hi·ªán kh√°c" value="' + (data.drugDetection && data.drugDetection[2] ? (data.drugDetection[2].manifestationOther || '') : '') + '"></div></div>';



    container.appendChild(newBlock);



    // Initialize drug displays and manifestation checkboxes for all attempts

    for (let i = 1; i <= 3; i++) {

        if (data.drugDetection && data.drugDetection[i - 1] && data.drugDetection[i - 1].selectedDrugs) {

            const optionsList = document.getElementById('drugTypeOptions-' + currentBlockId + '-' + i);

            if (optionsList) {

                optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {

                    checkbox.checked = data.drugDetection[i - 1].selectedDrugs.includes(checkbox.dataset.drugValue);

                });

            }

        }

        // Initialize manifestation checkboxes
        if (data.drugDetection && data.drugDetection[i - 1] && data.drugDetection[i - 1].manifestation) {

            const manifestationContainer = document.querySelector('.detection-manifestation-' + i);

            if (manifestationContainer) {

                manifestationContainer.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {

                    checkbox.checked = data.drugDetection[i - 1].manifestation.includes(checkbox.value);

                });

            }

        }

        updateDrugDisplay(currentBlockId, i);

    }

}



// Functions ƒë·ªÉ handle interactions trong training block

function updateLocationVisibility(blockId) {

    const otherRadio = document.querySelector('input[name="training-location-group-' + blockId + '"][value="Kh√°c"]');

    const otherInput = document.getElementById('trainingLocationOther-' + blockId);



    if (otherRadio && otherInput) {

        if (otherRadio.checked) {

            otherInput.classList.remove('hidden');

        } else {

            otherInput.classList.add('hidden');

            otherInput.value = '';

        }

    }

}



function toggleOtherTrainingInput(blockId) {

    const checkbox = document.getElementById('hlKhacCheckbox-' + blockId);

    const input = document.getElementById('hlKhacText-' + blockId);



    if (checkbox && input) {

        if (checkbox.checked) {

            input.classList.remove('hidden');

        } else {

            input.classList.add('hidden');

            input.value = '';

        }

    }

}



function toggleDrugDropdown(optionsId) {

    const dropdown = document.getElementById(optionsId);

    if (dropdown) {

        dropdown.classList.toggle('hidden');

        // ƒê√≥ng c√°c dropdown kh√°c

        document.querySelectorAll('.custom-dropdown-options').forEach(other => {

            if (other.id !== optionsId) {

                other.classList.add('hidden');

            }

        });

    }

}



// Function to add a new operation block

function addOperationBlock(data = {}) {
    console.trace('Call stack for addOperationBlock:');

    const container = document.getElementById('operation-blocks-container');

    if (!container) {


        return;

    }



    operationSessionCounter++;

    const operationNumber = operationSessionCounter;

    blockCounter++;

    const currentBlockId = blockCounter;



    const newBlock = document.createElement('div');

    newBlock.classList.add('operation-block');

    newBlock.setAttribute('data-block-id', currentBlockId);



    const locationOptionsHtml = OPERATION_LOCATIONS.map(loc => '<label><input type="checkbox" data-location-value="' + loc + '" ' + (data.selectedLocations?.includes(loc) ? 'checked' : '') + ' onchange="updateOperationLocationDisplay(' + currentBlockId + ')">' + loc + '</label>').join('');



    newBlock.innerHTML = '<div class="operation-header-line" style="display: flex; align-items: center; gap: 20px; flex-wrap: wrap; margin-bottom: 10px;"><h3 style="margin: 0;">Ca ' + operationNumber + '</h3><div style="display: flex; align-items: center; gap: 8px;"><label for="operationFromTime-' + currentBlockId + '">Th·ªùi gian:</label><input type="time" id="operationFromTime-' + currentBlockId + '" value="' + (data.fromTime || '09:00') + '"></div><div style="display: flex; align-items: center; gap: 8px;"><span>ƒê·∫øn:</span><input type="time" id="operationToTime-' + currentBlockId + '" value="' + (data.toTime || '10:00') + '"></div></div><div class="operation-location-line"><label>ƒê·ªãa ƒëi·ªÉm:</label><div class="custom-location-select-wrapper"><div class="custom-dropdown-trigger" onclick="toggleOperationLocationDropdown(\'operationLocationOptions-' + currentBlockId + '\')"><span class="selected-text" id="operationLocationTriggerText-' + currentBlockId + '">Ch·ªçn ƒë·ªãa ƒëi·ªÉm</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="operationLocationOptions-' + currentBlockId + '">' + locationOptionsHtml + '<label><input type="checkbox" data-location-value="KHO NGO·∫†I QUAN" ' + (data.selectedLocations?.includes('KHO NGO·∫†I QUAN') ? 'checked' : '') + ' onchange="updateOperationLocationDisplay(' + currentBlockId + ')"> KHO NGO·∫†I QUAN</label><label><input type="checkbox" data-location-value="Khac" ' + (data.selectedLocations?.includes('Khac') ? 'checked' : '') + ' onchange="updateOperationLocationDisplay(' + currentBlockId + ')"> Kh√°c</label></div></div><span class="location-selected-display-box" id="operationLocationDisplayBox-' + currentBlockId + '">Ch∆∞a ch·ªçn</span><input type="text" class="location-kho-input hidden" id="operationLocationKho-' + currentBlockId + '" placeholder="Ghi s·ªë Kho" value="' + (data.locationKhoText || '') + '" onchange="updateOperationLocationDisplay(' + currentBlockId + ')"><input type="text" class="location-other-input hidden" id="operationLocationOther-' + currentBlockId + '" placeholder="Ghi ƒë·ªãa ƒëi·ªÉm kh√°c" value="' + (data.locationOtherText || '') + '" onchange="updateOperationLocationDisplay(' + currentBlockId + ')"></div><div class="operation-activity-row-1"><label>N·ªôi dung:</label><label><input type="checkbox" class="operation-checkbox-1" id="checkGoods-' + currentBlockId + '" value="Ki·ªÉm tra h√†ng h√≥a XNK" ' + (data.checkGoods ? 'checked' : '') + '> Ki·ªÉm tra h√†ng h√≥a XNK</label><label><input type="checkbox" class="operation-checkbox-1" id="checkLuggage-' + currentBlockId + '" value="Ki·ªÉm tra h√†nh l√Ω, ph∆∞∆°ng ti·ªán XNC" ' + (data.checkLuggage ? 'checked' : '') + '> Ki·ªÉm tra h√†nh l√Ω, ph∆∞∆°ng ti·ªán XNC</label><label><input type="checkbox" class="operation-checkbox-1" id="opKhacCheckbox1-' + currentBlockId + '" value="Kh√°c" ' + (data.otherOperation1 ? 'checked' : '') + ' onchange="toggleOperationOtherInput(' + currentBlockId + ', 1)"> Kh√°c</label><input type="text" class="operation-other-input-1 ' + (!data.otherOperation1 ? 'hidden' : '') + '" id="opKhacText1-' + currentBlockId + '" placeholder="Ghi n·ªôi dung kh√°c" value="' + (data.otherOperation1 || '') + '"></div><div class="operation-activity-row-2"><label><input type="checkbox" class="operation-checkbox-2" id="fieldTraining-' + currentBlockId + '" value="HL n√¢ng cao t·∫°i hi·ªán tr∆∞·ªùng" ' + (data.fieldTraining ? 'checked' : '') + '> HL n√¢ng cao t·∫°i hi·ªán tr∆∞·ªùng</label><label><input type="checkbox" class="operation-checkbox-2" id="patrol-' + currentBlockId + '" value="Tu·∫ßn tra ki·ªÉm so√°t" ' + (data.patrol ? 'checked' : '') + '> Tu·∫ßn tra ki·ªÉm so√°t</label><label><input type="checkbox" class="operation-checkbox-2" id="opKhacCheckbox2-' + currentBlockId + '" value="Kh√°c" ' + (data.otherOperation2 ? 'checked' : '') + ' onchange="toggleOperationOtherInput(' + currentBlockId + ', 2)"> Kh√°c</label><input type="text" class="operation-other-input-2 ' + (!data.otherOperation2 ? 'hidden' : '') + '" id="opKhacText2-' + currentBlockId + '" placeholder="Ghi n·ªôi dung kh√°c" value="' + (data.otherOperation2 || '') + '"></div><div class="operation-result-block"><label>K·∫øt qu·∫£ t√°c nghi·ªáp:</label><div class="operation-result-checkboxes"><label><input type="checkbox" class="operation-checkbox-no-violation" id="noViolation-' + currentBlockId + '" ' + (data.noViolation ? 'checked' : '') + '> Kh√¥ng ph√°t hi·ªán vi ph·∫°m</label><label><input type="checkbox" class="operation-checkbox-violation" id="violationDetected-' + currentBlockId + '" ' + (data.violationDetected ? 'checked' : '') + '> Ph√°t hi·ªán d·∫•u hi·ªáu vi ph·∫°m</label><label><input type="checkbox" class="operation-checkbox-performance" id="dogPerformance-' + currentBlockId + '" ' + (data.dogPerformance ? 'checked' : '') + '> Ch√≥ l√†m vi·ªác nhanh nh·∫πn, h∆∞ng ph·∫•n</label></div></div><div class="textarea-block operation-issues-block"><label for="operation_other_issues_' + currentBlockId + '">V·∫•n ƒë·ªÅ kh√°c:</label><textarea id="operation_other_issues_' + currentBlockId + '" rows="3">' + (data.otherIssues || '') + '</textarea></div>';



    container.appendChild(newBlock);

    // Initialize operation location display
    updateOperationLocationDisplay(currentBlockId);

    // Initialize content checkboxes and text inputs
    if (data) {
        // Initialize location text inputs
        const locationKhoInput = document.getElementById(`operationLocationKho-${currentBlockId}`);
        const locationOtherInput = document.getElementById(`operationLocationOther-${currentBlockId}`);
        if (locationKhoInput && data.locationKhoText) {
            locationKhoInput.value = data.locationKhoText;
        }
        if (locationOtherInput && data.locationOtherText) {
            locationOtherInput.value = data.locationOtherText;
        }

        // Initialize content checkboxes
        const checkGoodsCheckbox = document.getElementById(`checkGoods-${currentBlockId}`);
        const checkLuggageCheckbox = document.getElementById(`checkLuggage-${currentBlockId}`);
        const fieldTrainingCheckbox = document.getElementById(`fieldTraining-${currentBlockId}`);
        const patrolCheckbox = document.getElementById(`patrol-${currentBlockId}`);

        if (checkGoodsCheckbox) checkGoodsCheckbox.checked = data.checkGoods || false;
        if (checkLuggageCheckbox) checkLuggageCheckbox.checked = data.checkLuggage || false;
        if (fieldTrainingCheckbox) fieldTrainingCheckbox.checked = data.fieldTraining || false;
        if (patrolCheckbox) patrolCheckbox.checked = data.patrol || false;

        // Initialize other operation text inputs and checkboxes
        const otherOp1Checkbox = document.getElementById(`opKhacCheckbox1-${currentBlockId}`);
        const otherOp1Text = document.getElementById(`opKhacText1-${currentBlockId}`);
        const otherOp2Checkbox = document.getElementById(`opKhacCheckbox2-${currentBlockId}`);
        const otherOp2Text = document.getElementById(`opKhacText2-${currentBlockId}`);

        if (otherOp1Checkbox) otherOp1Checkbox.checked = data.otherOperation1Checked || false;
        if (otherOp1Text && data.otherOperation1) otherOp1Text.value = data.otherOperation1;
        if (otherOp2Checkbox) otherOp2Checkbox.checked = data.otherOperation2Checked || false;
        if (otherOp2Text && data.otherOperation2) otherOp2Text.value = data.otherOperation2;

        // Initialize other issues textarea
        const otherIssuesTextarea = document.getElementById(`operation_other_issues_${currentBlockId}`);
        if (otherIssuesTextarea && data.otherIssues) {
            otherIssuesTextarea.value = data.otherIssues;
        }

        // Initialize no violation checkbox
        const noViolationCheckbox = document.getElementById(`noViolation-${currentBlockId}`);
        if (noViolationCheckbox) {
            noViolationCheckbox.checked = data.noViolation || false;
        }

        // Initialize violation detected checkbox
        const violationDetectedCheckbox = document.getElementById(`violationDetected-${currentBlockId}`);
        if (violationDetectedCheckbox) {
            violationDetectedCheckbox.checked = data.violationDetected || false;
        }

        // Initialize dog performance checkbox
        const dogPerformanceCheckbox = document.getElementById(`dogPerformance-${currentBlockId}`);
        if (dogPerformanceCheckbox) {
            dogPerformanceCheckbox.checked = data.dogPerformance || false;
        }

        // Update visibility of "other" inputs based on checkbox states
        if (data.otherOperation1Checked) {
            toggleOperationOtherInput(currentBlockId, 1);
        }
        if (data.otherOperation2Checked) {
            toggleOperationOtherInput(currentBlockId, 2);
        }
    }

}



// Functions ƒë·ªÉ handle operation block interactions

function toggleOperationLocationDropdown(optionsId) {

    const dropdown = document.getElementById(optionsId);

    if (dropdown) {

        dropdown.classList.toggle('hidden');

        document.querySelectorAll('.custom-dropdown-options').forEach(other => {

            if (other.id !== optionsId) {

                other.classList.add('hidden');

            }

        });

    }

}



function toggleOperationOtherInput(blockId, rowNumber) {

    const checkbox = document.getElementById('opKhacCheckbox' + rowNumber + '-' + blockId);

    const input = document.getElementById('opKhacText' + rowNumber + '-' + blockId);



    if (checkbox && input) {

        if (checkbox.checked) {

            input.classList.remove('hidden');

        } else {

            input.classList.add('hidden');

            input.value = '';

        }

    }

}



// Function: Update drug type display for detection attempts

function updateDrugDisplay(blockId, attemptNumber) {

    // Updating drug display



    const optionsList = document.getElementById('drugTypeOptions-' + blockId + '-' + attemptNumber);

    const displayBox = document.getElementById('drugTypeDisplayBox-' + blockId + '-' + attemptNumber);

    const otherInput = document.getElementById('drugTypeOther-' + blockId + '-' + attemptNumber);



    if (!optionsList || !displayBox || !otherInput) {


        return;

    }



    const selectedDrugs = [];

    let isKhacSelected = false;



    optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {

        if (checkbox.checked) {

            if (checkbox.dataset.drugValue === 'Kh√°c') {

                isKhacSelected = true;

            } else {

                selectedDrugs.push(checkbox.dataset.drugValue);

            }

        }

    });



    // Toggle visibility of other input

    if (isKhacSelected) {

        otherInput.classList.remove('hidden');

    } else {

        otherInput.classList.add('hidden');

        otherInput.value = '';

    }



    // Construct the display text

    let displayTextParts = [];

    selectedDrugs.forEach(drug => displayTextParts.push(drug));



    if (isKhacSelected) {

        displayTextParts.push(otherInput.value.trim() !== '' ? otherInput.value.trim() : 'Kh√°c');

    }



    const finalText = displayTextParts.join(', ') || 'Ch∆∞a ch·ªçn';

    displayBox.innerText = finalText;



    // Update the trigger text

    const triggerTextElement = document.getElementById('drugTypeTriggerText-' + blockId + '-' + attemptNumber);

    if (triggerTextElement) {

        triggerTextElement.innerText = displayTextParts.length > 0 ? displayTextParts.join(', ') : 'Ch·ªçn lo·∫°i ma t√∫y';

    }

}



// Function to update the displayed selected location for operation blocks

function updateOperationLocationDisplay(blockId) {

    const optionsList = document.getElementById('operationLocationOptions-' + blockId);

    const displayBox = document.getElementById('operationLocationDisplayBox-' + blockId);

    const khoInput = document.getElementById('operationLocationKho-' + blockId);

    const otherInput = document.getElementById('operationLocationOther-' + blockId);



    if (!optionsList || !displayBox || !khoInput || !otherInput) {


        return;

    }



    const selectedLocations = [];

    let isKhoSelected = false;

    let isKhacSelected = false;



    optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {

        if (checkbox.checked) {

            if (checkbox.dataset.locationValue === 'KHO NGO·∫†I QUAN') {

                isKhoSelected = true;

                selectedLocations.push('KHO NGO·∫†I QUAN');

            } else if (checkbox.dataset.locationValue === 'Khac') {

                isKhacSelected = true;

            } else {

                selectedLocations.push(checkbox.dataset.locationValue);

            }

        }

    });



    // Toggle visibility of inputs

    if (isKhoSelected) {

        khoInput.classList.remove('hidden');

    } else {

        khoInput.classList.add('hidden');

        khoInput.value = '';

    }



    if (isKhacSelected) {

        otherInput.classList.remove('hidden');

    } else {

        otherInput.classList.add('hidden');

        otherInput.value = '';

    }



    // Construct display text

    let displayTextParts = [...selectedLocations];



    if (isKhoSelected && khoInput.value.trim() !== '') {

        displayTextParts.push('KHO ' + khoInput.value.trim());

    } else if (isKhoSelected) {

        displayTextParts.push('KHO NGO·∫†I QUAN');

    }



    if (isKhacSelected && otherInput.value.trim() !== '') {

        displayTextParts.push(otherInput.value.trim());

    } else if (isKhacSelected) {

        displayTextParts.push('Kh√°c');

    }



    const finalText = displayTextParts.join(', ') || 'Ch∆∞a ch·ªçn';

    displayBox.innerText = finalText;



    // Update trigger text

    const triggerTextElement = document.getElementById('operationLocationTriggerText-' + blockId);

    if (triggerTextElement) {

        triggerTextElement.innerText = displayTextParts.length > 0 ? displayTextParts.join(', ') : 'Ch·ªçn ƒë·ªãa ƒëi·ªÉm';

    }

}



// S·ª¨A: Function to show pure A4 journal view - CH·ªà PDF, KH√îNG WEB CONTROLS - ƒê·∫¢M B·∫¢O HI·ªÇN TH·ªä PDF ƒê√öNG C√ÅCH

async function showPureA4JournalView(dogName, date, journalId = null) {

    // S·ª¨A: FORCE ·∫®N T·∫§T C·∫¢ web navigation elements NGAY L·∫¨P T·ª®C

    hideAllContentSections();



    // S·ª¨A: ·∫®n HO√ÄN TO√ÄN t·∫•t c·∫£ navigation elements

    const elementsToHide = [

        'toggleReadButton',

        '.header',

        '.sidebar',

        '#loginPage',

        '#dashboardBanner',

        '.journal-header-actions',

        '.journal-action-buttons'

    ];



    elementsToHide.forEach(selector => {

        const element = selector.startsWith('.') || selector.startsWith('#')

            ? document.querySelector(selector)

            : document.getElementById(selector);

        if (element) {

            element.style.display = 'none';


        }

    });



    const content = document.getElementById('content');

    const title = document.getElementById('title');



    // S·ª¨A: FORCE thi·∫øt l·∫≠p ch·∫ø ƒë·ªô pure PDF view

    content.style.cssText = 'display: block !important; margin: 0 !important; padding: 0 !important; width: 100vw !important; max-width: none !important; height: 100vh !important; overflow-y: auto !important; background: #f5f5f5 !important; position: relative !important; z-index: 1 !important;';



    // ·∫®n title web

    title.style.display = 'none';



    // S·ª¨A: Load journal data from database

    const journalKey = 'journal_' + dogName + '_' + date;

    let journalData = null;
    try {
        if (journalId) {
            // Load specific journal by ID
            const response = await fetch(`/api/journals/${journalId}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    journalData = convertDatabaseToFrontendFormat(data.data);
                }
            }
        } else {
            // Load best journal for dog+date (original behavior)
            const response = await fetch(`/api/journals/by-dog-date/${encodeURIComponent(dogName)}/${date}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    journalData = convertDatabaseToFrontendFormat(data.data);
                }
            }
        }
    } catch (error) {
    }



    if (!journalData) {
        const errorMessage = journalId
            ? `Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω v·ªõi ID ${journalId}`
            : `Kh√¥ng c√≥ nh·∫≠t k√Ω cho CNV ${dogName} ng√†y ${date}`;

        content.innerHTML = '<div style="text-align: center; padding: 50px; background: white;"><h3>‚ùå KH√îNG T√åM TH·∫§Y NH·∫¨T K√ù</h3><p>' + errorMessage + '</p></div>';
        return;
    }



    // S·ª¨A: Hi·ªÉn th·ªã pure A4 PDF view ho√†n ch·ªânh

    try {
        // Safe access to journal data with proper null checks
        const generalInfo = journalData.generalInfo || {};
        const approval = journalData.approval || {};
        const hlvSignature = approval.hlvSignature || {};
        const leaderSignature = approval.leaderSignature || {};
        const substituteSignature = approval.substituteSignature || {};
        const meals = journalData.meals || {};
        const health = journalData.health || {};
        const care = journalData.care || {};


        // Simple fallback HTML if data is missing
        if (!generalInfo.dogName) {
            // Use provided parameters as fallback
            generalInfo.dogName = dogName || 'N/A';
            generalInfo.date = date || 'N/A';
            generalInfo.hlv = 'N/A';
        }

        // Render signature images asynchronously
        const hlvSignatureHTML = await renderSignatureImageForA4(hlvSignature, 'hlv');
        const leaderSignatureHTML = await renderSignatureImageForA4(leaderSignature, 'leader');
        const substituteSignatureHTML = substituteSignature.name ? await renderSignatureImageForA4(substituteSignature, 'substitute') : '';

        // Build HTML template safely using template literals
        const htmlTemplate = `
        <div class="a4-journal-view" style="background: white; max-width: 210mm; margin: 20px auto; padding: 20mm; font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.4; box-shadow: 0 0 20px rgba(0,0,0,0.1); min-height: 297mm;">
            <div class="a4-header" style="text-align: center; border-bottom: 2px solid #000; padding-bottom: 20px; margin-bottom: 30px;">
                <h1 style="font-size: 18px; font-weight: bold; margin: 0 0 10px 0;">T·ªîNG C·ª§C H·∫¢I QUAN</h1>
                <h2 style="font-size: 16px; font-weight: bold; margin: 0 0 20px 0;">S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN CH√ì NGHI·ªÜP V·ª§</h2>
                <div style="display: flex; justify-content: space-between; margin-top: 20px;">
                    <div><strong>CNV:</strong> ${generalInfo.dogName || 'N/A'}</div>
                    <div><strong>Ng√†y:</strong> ${formatDateToDDMMYYYY(generalInfo.date || '')}</div>
                </div>
                <div style="margin-top: 10px;"><strong>Hu·∫•n luy·ªán vi√™n:</strong> ${generalInfo.hlv || 'N/A'}</div>
            </div>
            
            ${hasTrainingData(journalData) ? `
            <div class="a4-section" style="margin-bottom: 30px;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">I. HO·∫†T ƒê·ªòNG HU·∫§N LUY·ªÜN</h3>
                ${renderTrainingBlocks(journalData.trainingBlocks || [])}
                <div style="margin-top: 20px;">
                    <strong>ƒê√°nh gi√° chung c·ªßa Hu·∫•n luy·ªán vi√™n:</strong><br>
                    <div style="margin-top: 10px; padding: 10px; border: 1px solid #ccc; min-height: 60px;">
                        ${journalData.hlvComment || 'Ch∆∞a c√≥ ƒë√°nh gi√°'}
                    </div>
                </div>
            </div>
            ` : ''}
            
            ${hasCareData(journalData) ? `
            <div class="a4-section" style="margin-bottom: 30px;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">II. CHƒÇM S√ìC & NU√îI D∆Ø·ª†NG</h3>
                <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px; width: 15%;"><strong>B·ªØa tr∆∞a:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.lunch?.time || ''} - ${meals.lunch?.amount || ''}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn tr∆∞a:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.lunch?.food || 'Ch∆∞a ghi'}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>B·ªØa chi·ªÅu:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.dinner?.time || ''} - ${meals.dinner?.amount || ''}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn chi·ªÅu:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.dinner?.food || 'Ch∆∞a ghi'}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>ChƒÉm s√≥c:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${renderCareActivities(care)}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>S·ª©c kh·ªèe:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${health.status || 'B√¨nh th∆∞·ªùng'}</td>
                    </tr>
                </table>
                ${health.other ? `<p><strong>Ghi ch√∫ s·ª©c kh·ªèe:</strong> ${health.other}</p>` : ''}
            </div>
            ` : ''}
            
            ${hasOperationData(journalData) ? `
            <div class="a4-section" style="margin-bottom: 30px;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">III. HO·∫†T ƒê·ªòNG T√ÅC NGHI·ªÜP</h3>
                ${renderOperationBlocks(journalData.operationBlocks || [])}
            </div>
            ` : ''}
            
            <div class="a4-section" style="margin-bottom: 30px; page-break-inside: avoid;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">IV. DUY·ªÜT & K√ù</h3>
                <div style="display: flex; justify-content: space-between; margin-top: 30px;">
                    <div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 150px;">
                        <strong>HU·∫§N LUY·ªÜN VI√äN</strong><br><br>
                        ${hlvSignatureHTML}
                    </div>
                    <div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 150px;">
                        <strong>L√ÉNH ƒê·∫†O ƒê∆†N V·ªä</strong><br><br>
                        ${leaderSignatureHTML}
                        ${leaderSignature.name && approval.leaderComment ?
                `<div style="margin-top: 10px; font-size: 12px; color: #666;">
                                <strong>Nh·∫≠n x√©t:</strong> ${approval.leaderComment}
                            </div>` : ''
            }
                    </div>
                </div>
                ${substituteSignature.name ?
                `<div style="width: 100%; text-align: center; border: 1px solid #000; padding: 20px; margin-top: 20px; min-height: 100px;">
                        <strong>HLV TR·ª∞C THAY</strong><br><br>
                        ${substituteSignatureHTML}
                        ${substituteSignature.comment ?
                    `<div style="margin-top: 10px; font-size: 12px; color: #666;">
                                <strong>√ù ki·∫øn:</strong> ${substituteSignature.comment}
                            </div>` : ''
                }
                    </div>` : ''
            }
            </div>
            
            <div style="text-align: center; margin: 20px 0; background: white; padding: 20px;" class="no-print">
                <button onclick="window.print()" style="background: #4CAF50; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; margin: 0 10px;">üñ®Ô∏è In nh·∫≠t k√Ω</button>
                <button onclick="returnToJournalList()" style="background: #2196F3; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; margin: 0 10px;">üìã Quay l·∫°i danh s√°ch</button>
                <button onclick="window.close()" style="background: #f44336; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; margin: 0 10px;">‚ùå ƒê√≥ng</button>
            </div>
        </div>`;

        content.innerHTML = htmlTemplate +
            '<style>@media print { .no-print { display: none !important; } body { margin: 0; padding: 0; } .a4-journal-view { max-width: none !important; margin: 0 !important; padding: 15mm !important; box-shadow: none !important; font-size: 12px !important; } } @media screen { .a4-journal-view { background: white; max-width: 210mm; margin: 20px auto; padding: 20mm; font-family: "Times New Roman", serif; font-size: 14px; line-height: 1.4; box-shadow: 0 0 20px rgba(0,0,0,0.1); min-height: 297mm; } }</style>';


        console.log('‚úÖ showPureA4JournalView completed successfully');

    } catch (error) {
        console.error('‚ùå Error in showPureA4JournalView:', error);
        content.innerHTML = '<div style="text-align: center; padding: 50px; background: white;"><h3>‚ùå L·ªñI HI·ªÇN TH·ªä NH·∫¨T K√ù</h3><p>C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã nh·∫≠t k√Ω: ' + error.message + '</p><button onclick="returnToJournalList()" style="background: #2196F3; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">Quay l·∫°i</button></div>';
    }

}



// S·ª¨A: Helper function ƒë·ªÉ quay l·∫°i journal list

// S·ª¨A: Helper function ƒë·ªÉ quay l·∫°i journal list

function returnToJournalList() {




    // S·ª¨A: Kh√¥i ph·ª•c l·∫°i t·∫•t c·∫£ web navigation elements

    const elementsToShow = [

        'toggleReadButton',

        '.header',

        '.sidebar'

    ];



    elementsToShow.forEach(selector => {

        const element = selector.startsWith('.') || selector.startsWith('#')

            ? document.querySelector(selector)

            : document.getElementById(selector);

        if (element) {

            element.style.display = '';


        }

    });



    // S·ª¨A: Reset content container v·ªÅ tr·∫°ng th√°i b√¨nh th∆∞·ªùng

    const content = document.getElementById('content');

    if (content) {

        content.style.cssText = 'display: block; margin: 0; padding: 20px; width: auto; max-width: none; height: auto; overflow-y: auto; background: white; position: relative; z-index: 1;';

    }



    // S·ª¨A: Reset title

    const title = document.getElementById('title');

    if (title) {

        title.style.display = 'block';

    }



    // S·ª¨A: Quay v·ªÅ manager view thay v√¨ journal edit form

    if (currentUserRole === 'MANAGER') {


        showAllPendingJournalsForManager();

    } else {

        // Cho TRAINER/ADMIN quay v·ªÅ journal edit form

        showJournalEditForm(currentDogForJournal);

    }




}



// Helper function to render signature images for A4 view
async function renderSignatureImageForA4(signatureData, signatureType) {
    if (!signatureData || !signatureData.name) {
        return '<span style="color: red;">Ch∆∞a k√Ω</span>';
    }

    try {
        // Try to get signature image from user data
        const userSignature = await getUserSignature(signatureData.name, signatureData.role || 'TRAINER');

        if (userSignature && userSignature.signatureImage) {
            // Check if signature image exists
            const imageExists = await checkSignatureImageExists(userSignature.signatureImage);

            if (imageExists) {
                return `
                    <div style="text-align: center; margin: 10px 0;">
                        <img src="${userSignature.signatureImage}" 
                             alt="Ch·ªØ k√Ω ${signatureData.name}" 
                             style="max-width: 200px; max-height: 80px; 
                                    background: white; padding: 5px; display: block; margin: 0 auto;"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                        <div style="display: none; margin-top: 5px; padding: 10px; border: 2px solid #2196F3;
                                    background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;
                                    font-size: 18px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 5px;">
                            ‚úçÔ∏è ${signatureData.name}
                        </div>
                        <div style="margin-top: 5px; font-size: 12px; color: #666;">
                            <strong>${signatureData.name}</strong><br>
                            K√Ω ng√†y: ${formatDateToDDMMYYYY(signatureData.timestamp, true)}<br>
                            ${signatureData.id ? 'ID: ' + signatureData.id : ''}
                        </div>
                    </div>
                `;
            }
        }

        // Fallback to text signature
        return `
            <div style="text-align: center; margin: 10px 0;">
                <div style="margin-top: 5px; padding: 15px; border: 2px solid #2196F3;
                            background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;
                            font-size: 20px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 8px;">
                    ‚úçÔ∏è ${signatureData.name}
                </div>
                <div style="margin-top: 5px; font-size: 12px; color: #666;">
                    K√Ω ng√†y: ${formatDateToDDMMYYYY(signatureData.timestamp, true)}<br>
                    ${signatureData.id ? 'ID: ' + signatureData.id : ''}
                    ${signatureData.digitalSignature ? '<br>Ch·ªØ k√Ω s·ªë: ' + signatureData.digitalSignature : ''}
                </div>
            </div>
        `;
    } catch (error) {
        console.error('Error rendering signature image:', error);
        return `
            <div style="text-align: center; margin: 10px 0;">
                <div style="margin-top: 5px; padding: 15px; border: 2px solid #2196F3;
                            background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;
                            font-size: 20px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 8px;">
                    ‚úçÔ∏è ${signatureData.name}
                </div>
                <div style="margin-top: 5px; font-size: 12px; color: #666;">
                    K√Ω ng√†y: ${formatDateToDDMMYYYY(signatureData.timestamp, true)}<br>
                    ${signatureData.id ? 'ID: ' + signatureData.id : ''}
                </div>
            </div>
        `;
    }
}

// Helper functions for rendering journal sections

// Helper function to check if training section has data
function hasTrainingData(journalData) {
    const hasBlocks = journalData.trainingBlocks && journalData.trainingBlocks.length > 0;
    const hasComment = journalData.hlvComment && typeof journalData.hlvComment === 'string' && journalData.hlvComment.trim() !== '';
    return hasBlocks || hasComment;
}

// Helper function to check if care section has data
function hasCareData(journalData) {
    const meals = journalData.meals || {};
    const care = journalData.care || {};
    const health = journalData.health || {};

    // Check for meaningful meal data (not just default values)
    const hasMealData = (meals.lunch && (
        (meals.lunch.time && meals.lunch.time !== '11:00') ||
        (meals.lunch.amount && meals.lunch.amount !== 'ƒÇn h·∫øt') ||
        (meals.lunch.food && meals.lunch.food.length > 0) ||
        (meals.lunch.otherFood && typeof meals.lunch.otherFood === 'string' && meals.lunch.otherFood.trim() !== '')
    )) || (meals.dinner && (
        (meals.dinner.time && meals.dinner.time !== '17:00') ||
        (meals.dinner.amount && meals.dinner.amount !== 'ƒÇn h·∫øt') ||
        (meals.dinner.food && meals.dinner.food.length > 0) ||
        (meals.dinner.otherFood && typeof meals.dinner.otherFood === 'string' && meals.dinner.otherFood.trim() !== '')
    ));

    const hasCareData = care && Object.values(care).some(value => value && typeof value === 'string' && value.trim() !== '');

    const hasHealthData = (health.status && health.status !== 'T·ªët') || (health.other && typeof health.other === 'string' && health.other.trim() !== '');

    // Debug logging
    console.log('üîç hasCareData debug:', {
        meals,
        care,
        health,
        hasMealData,
        hasCareData,
        hasHealthData,
        result: hasMealData || hasCareData || hasHealthData
    });

    return hasMealData || hasCareData || hasHealthData;
}

// Helper function to check if operation section has data
function hasOperationData(journalData) {
    return journalData.operationBlocks && journalData.operationBlocks.length > 0;
}

function renderTrainingBlocks(blocks) {
    if (!blocks || blocks.length === 0) return '<p>Kh√¥ng c√≥ ho·∫°t ƒë·ªông hu·∫•n luy·ªán.</p>';

    return blocks.map((block, index) => {
        const location = block.locationType === 'Kh√°c' ? block.locationOther : (block.locationType || 'S√¢n t·∫≠p');
        const timeRange = (block.fromTime && block.toTime) ? block.fromTime + ' - ' + block.toTime : '';

        return `
            <div class="training-block-display" style="border: 1px solid #ccc; padding: 15px; margin: 10px 0;">
                <p><strong>Ca ${index + 1}:</strong> ${timeRange || 'Ch∆∞a ghi gi·ªù'}</p>
                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${location}</p>
                <p><strong>N·ªôi dung:</strong> ${renderTrainingContent(block)}</p>
                ${block.drugDetection && block.drugDetection.length > 0 ?
                '<p><strong>Ph√°t hi·ªán ma t√∫y:</strong> ' + renderDrugDetection(block.drugDetection) + '</p>' : ''}
            </div>
        `;
    }).join('');
}



function renderTrainingContent(block) {

    const content = [];

    if (block.advancedTraining) content.push('HL n√¢ng cao');

    if (block.basicTraining) content.push('HL ƒë·ªông t√°c c∆° b·∫£n');

    if (block.physicalTraining) content.push('HL th·ªÉ l·ª±c');

    if (block.otherTraining) content.push(block.otherTraining);

    return content.join(', ') || 'Ch∆∞a ghi';

}



function renderDrugDetection(detection) {

    if (!detection || detection.length === 0) return 'Kh√¥ng c√≥';

    return detection.map((attempt, index) => 'L·∫ßn ' + (index + 1) + ': ' + (attempt.selectedDrugs?.join(', ') || 'Ch∆∞a ghi') + ' - ' + (attempt.manifestation?.join(', ') || 'Ch∆∞a ghi')).join('; ');

}



function renderCareActivities(care) {

    const activities = [];

    if (care.bath) activities.push('T·∫Øm r·ª≠a');

    if (care.brush) activities.push('Ch·∫£i l√¥ng');

    if (care.wipe) activities.push('Lau l√¥ng');

    return activities.join(', ') || 'Ch∆∞a c√≥ ho·∫°t ƒë·ªông chƒÉm s√≥c';
}

// Enhanced helper functions for better data display
function renderMealsData(meals) {
    if (!meals || (!meals.lunch && !meals.dinner)) {
        return '<p>Kh√¥ng c√≥ th√¥ng tin b·ªØa ƒÉn.</p>';
    }

    return `
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
            <tr>
                <td style="border: 1px solid #000; padding: 8px; width: 15%;"><strong>B·ªØa tr∆∞a:</strong></td>
                <td style="border: 1px solid #000; padding: 8px;">${meals.lunch?.time || ''} - ${meals.lunch?.amount || ''}</td>
            </tr>
            <tr>
                <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn tr∆∞a:</strong></td>
                <td style="border: 1px solid #000; padding: 8px;">${meals.lunch?.food || 'Ch∆∞a ghi'}${meals.lunch?.foodOther ? ' (' + meals.lunch.foodOther + ')' : ''}</td>
            </tr>
            <tr>
                <td style="border: 1px solid #000; padding: 8px;"><strong>B·ªØa chi·ªÅu:</strong></td>
                <td style="border: 1px solid #000; padding: 8px;">${meals.dinner?.time || ''} - ${meals.dinner?.amount || ''}</td>
            </tr>
            <tr>
                <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn chi·ªÅu:</strong></td>
                <td style="border: 1px solid #000; padding: 8px;">${meals.dinner?.food || 'Ch∆∞a ghi'}${meals.dinner?.foodOther ? ' (' + meals.dinner.foodOther + ')' : ''}</td>
            </tr>
        </table>
    `;
}

function renderHealthData(health) {
    if (!health) return '';

    let html = `
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
            <tr>
                <td style="border: 1px solid #000; padding: 8px; width: 15%;"><strong>S·ª©c kh·ªèe:</strong></td>
                <td style="border: 1px solid #000; padding: 8px;">${health.status || 'T·ªët'}</td>
            </tr>
    `;

    if (health.weather) {
        html += `
            <tr>
                <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ªùi ti·∫øt:</strong></td>
                <td style="border: 1px solid #000; padding: 8px;">${health.weather}</td>
            </tr>
        `;
    }

    html += '</table>';

    if (health.other) {
        html += `<p><strong>Ghi ch√∫ s·ª©c kh·ªèe:</strong> ${health.other}</p>`;
    }

    return html;
}

function renderApprovalData(approval) {
    if (!approval) return '<p>Ch∆∞a c√≥ th√¥ng tin duy·ªát.</p>';

    return `
        <div style="display: flex; justify-content: space-between; margin-top: 30px;">
            <div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 120px;">
                <strong>HU·∫§N LUY·ªÜN VI√äN</strong><br><br>
                ${approval.hlvSignature ?
            `<div style="text-align: left;">‚úì <strong>${approval.hlvSignature.name}</strong><br>K√Ω ng√†y: ${formatDateToDDMMYYYY(approval.hlvSignature.timestamp, true)}<br>ID: ${approval.hlvSignature.id}</div>` :
            '<span style="color: red;">Ch∆∞a k√Ω</span>'
        }
            </div>
            <div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 120px;">
                <strong>L√ÉNH ƒê·∫†O ƒê∆†N V·ªä</strong><br><br>
                ${approval.leaderSignature ?
            `<div style="text-align: left;">‚úì <strong>${approval.leaderSignature.name}</strong><br>K√Ω ng√†y: ${formatDateToDDMMYYYY(approval.leaderSignature.timestamp, true)}<br>Nh·∫≠n x√©t: ${approval.leaderComment || 'ƒê√£ duy·ªát'}<br>Ch·ªØ k√Ω s·ªë: ${approval.leaderSignature.digitalSignature}<br>ID: ${approval.leaderSignature.id}</div>` :
            '<span style="color: orange;">Ch·ªù duy·ªát</span>'
        }
            </div>
        </div>
        ${approval.substituteSignature ?
            `<div style="width: 100%; text-align: center; border: 1px solid #000; padding: 20px; margin-top: 20px; min-height: 80px;">
                <strong>HLV TR·ª∞C THAY</strong><br><br>
                <div style="text-align: left;">‚úì <strong>${approval.substituteSignature.name}</strong><br>K√Ω ng√†y: ${formatDateToDDMMYYYY(approval.substituteSignature.timestamp, true)}<br>√ù ki·∫øn: ${approval.substituteSignature.comment}<br>ID: ${approval.substituteSignature.id}</div>
            </div>` : ''
        }
    `;
}



function renderOperationBlocks(blocks) {
    if (!blocks || blocks.length === 0) return '<p>Kh√¥ng c√≥ ho·∫°t ƒë·ªông t√°c nghi·ªáp.</p>';

    return blocks.map((block, index) => {
        const timeRange = (block.fromTime && block.toTime) ? block.fromTime + ' - ' + block.toTime : '';
        const locations = block.selectedLocations?.join(', ') || 'Ch∆∞a ghi';

        return `
            <div class="operation-block-display" style="border: 1px solid #ccc; padding: 15px; margin: 10px 0;">
                <p><strong>Ca ${index + 1}:</strong> ${timeRange || 'Ch∆∞a ghi gi·ªù'}</p>
                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${locations}</p>
                <p><strong>N·ªôi dung:</strong> ${renderOperationContent(block)}</p>
                <p><strong>K·∫øt qu·∫£ t√°c nghi·ªáp:</strong> ${getOperationResultsText(block)}</p>
                ${block.otherIssues ? '<p><strong>V·∫•n ƒë·ªÅ kh√°c:</strong> ' + block.otherIssues + '</p>' : ''}
            </div>
        `;
    }).join('');
}

function getOperationResultsText(block) {
    const results = [];

    if (block.noViolation) results.push('Kh√¥ng ph√°t hi·ªán vi ph·∫°m');
    if (block.violationDetected) results.push('Ph√°t hi·ªán d·∫•u hi·ªáu vi ph·∫°m');
    if (block.dogPerformance) results.push('Ch√≥ l√†m vi·ªác nhanh nh·∫πn, h∆∞ng ph·∫•n');

    return results.length > 0 ? results.join(', ') : 'Ch∆∞a ghi';
}

function renderOperationContent(block) {

    const content = [];

    if (block.checkGoods) content.push('Ki·ªÉm tra h√†ng h√≥a XNK');

    if (block.checkLuggage) content.push('Ki·ªÉm tra h√†nh l√Ω, ph∆∞∆°ng ti·ªán XNC');

    if (block.fieldTraining) content.push('HL n√¢ng cao t·∫°i hi·ªán tr∆∞·ªùng');

    if (block.patrol) content.push('Tu·∫ßn tra ki·ªÉm so√°t');

    if (block.otherOperation1) content.push(block.otherOperation1);

    if (block.otherOperation2) content.push(block.otherOperation2);

    return content.join(', ') || 'Ch∆∞a ghi';

}



// Function to load journal data - UPDATED TO USE DATABASE
async function loadJournalData(dogName, date, createNew = false) {
    console.log('üìñ loadJournalData called with:', { dogName, date, createNew });
    try {
        // Use the database manager
        const journalData = await window.journalDBManager.loadJournalData(dogName, date, createNew);

        if (journalData) {
            // Convert database format to frontend format for compatibility
            const frontendFormat = convertDatabaseToFrontendFormat(journalData);
            populateJournalForm(frontendFormat);
        } else {
            // No journal found, create new - REMOVED: Database manager already handles this
            // addTrainingBlock();
        }
    } catch (error) {
        console.error('Error loading journal data:', error);
        // Database failed, show error
        console.error('Failed to load journal from database');



        if (existingData && !createNew) {

            const data = JSON.parse(existingData);

            populateJournalForm(data);

        } else {
            // REMOVED: Database manager already handles training block creation
            // addTrainingBlock();
        }
    }
}

// Function to convert database journal format to frontend format (no localStorage)
function convertDatabaseToFrontendFormat(dbJournal) {

    // Try to parse detailed data from JSON fields first
    let trainingBlocks = [];
    let operationBlocks = [];
    let meals = {};
    let care = {};

    try {
        // Try to parse training_activities as JSON first
        if (dbJournal.training_activities) {
            const parsed = JSON.parse(dbJournal.training_activities);
            if (Array.isArray(parsed)) {
                trainingBlocks = parsed;
            } else {
                // Fallback to simple string parsing
                trainingBlocks = dbJournal.training_activities.split(';').map(activity => ({ content: activity.trim() }));
            }
        }
    } catch (e) {
        // Fallback to simple string parsing
        trainingBlocks = dbJournal.training_activities ?
            dbJournal.training_activities.split(';').map(activity => ({ content: activity.trim() })) : [];
    }

    try {
        // Try to parse operation_activities as JSON first
        if (dbJournal.operation_activities) {
            const parsed = JSON.parse(dbJournal.operation_activities);
            if (Array.isArray(parsed)) {
                operationBlocks = parsed;
            } else {
                // Fallback to simple string parsing
                operationBlocks = dbJournal.operation_activities.split(';').map(activity => ({ content: activity.trim() }));
            }
        }
    } catch (e) {
        // Fallback to simple string parsing
        operationBlocks = dbJournal.operation_activities ?
            dbJournal.operation_activities.split(';').map(activity => ({ content: activity.trim() })) : [];
    }

    try {
        // Try to parse care_activities as JSON
        if (dbJournal.care_activities) {
            const parsed = JSON.parse(dbJournal.care_activities);
            if (typeof parsed === 'object') {
                // Apply proper field mapping for care activities
                const activities = parsed.activities || {};
                care = {
                    morning: activities.morning || '',
                    afternoon: activities.afternoon || '',
                    evening: activities.evening || '',
                    bath: activities.careBath || false,
                    brush: activities.careBrush || false,
                    wipe: activities.careWipe || false
                };
                meals = parsed.meals || {};
            } else {
                care = convertCareActivitiesToFrontend(dbJournal.care_activities);
            }
        }
    } catch (e) {
        care = convertCareActivitiesToFrontend(dbJournal.care_activities);
    }

    // If meals wasn't extracted from care_activities, create default structure
    if (!meals || Object.keys(meals).length === 0) {
        meals = {
            lunch: {
                time: '11:00',
                amount: 'ƒÇn h·∫øt',
                food: [],
                otherFood: ''
            },
            dinner: {
                time: '17:00',
                amount: 'ƒÇn h·∫øt',
                food: [],
                otherFood: ''
            }
        };
    }

    const converted = {
        generalInfo: {
            dogName: dbJournal.dog_name || 'Unknown',
            date: dbJournal.journal_date || '',
            hlv: dbJournal.trainer_name || 'Unknown'
        },
        trainingBlocks: trainingBlocks,
        operationBlocks: operationBlocks,
        meals: meals,
        care: care,
        health: {
            status: dbJournal.health_status || 'T·ªët',
            other: dbJournal.health_notes || '',
            weather: dbJournal.weather_conditions || ''
        },
        hlvComment: dbJournal.behavior_notes || '',
        otherIssues: dbJournal.challenges || '',
        approval: {
            status: dbJournal.approval_status,
            leaderStatus: dbJournal.approval_status === 'APPROVED' ? 'ƒê√£ duy·ªát' :
                dbJournal.approval_status === 'REJECTED' ? 'T·ª´ ch·ªëi' : 'Ch·ªù duy·ªát',
            leaderComment: dbJournal.rejection_reason || '',
            approvedBy: dbJournal.approver_name || '',
            approvedAt: dbJournal.approved_at || '',
            // Add signature data if available
            hlvSignature: parseSignatureData(dbJournal.hlv_signature, dbJournal.hlv_signature_timestamp),
            leaderSignature: parseSignatureData(dbJournal.leader_signature, dbJournal.leader_signature_timestamp),
            substituteSignature: parseSignatureData(dbJournal.substitute_signature, dbJournal.substitute_signature_timestamp)
        },
        lastModified: dbJournal.updated_at || dbJournal.created_at
    };

    return converted;
}

function parseSignatureData(signatureString, timestamp = null) {
    if (!signatureString) return null;

    try {
        const signatureData = JSON.parse(signatureString);
        // Add timestamp if provided and not already present
        if (timestamp && !signatureData.timestamp) {
            signatureData.timestamp = timestamp;
        }
        return signatureData;
    } catch (e) {
        console.warn('Error parsing signature data:', e);
        return null;
    }
}

// Function to convert frontend journal format to database format (no localStorage)
function convertFrontendToDatabaseFormat(frontendJournal) {
    const generalInfo = frontendJournal.generalInfo || {};

    // Find dog and trainer IDs (simplified - in real implementation, these would be passed as parameters)
    const dogName = generalInfo.dogName || '';
    const trainerName = generalInfo.hlv || '';

    // Convert training blocks to training activities
    const trainingBlocks = frontendJournal.trainingBlocks || [];
    const trainingActivities = trainingBlocks
        .filter(block => block.content)
        .map(block => block.content)
        .join('; ');

    // Convert operation blocks to operation activities
    const operationBlocks = frontendJournal.operationBlocks || [];
    const operationActivities = operationBlocks
        .filter(block => block.content)
        .map(block => block.content)
        .join('; ');

    // Convert care data
    const careData = frontendJournal.care || {};
    const careActivities = [];
    if (careData.morning) careActivities.push(`S√°ng: ${careData.morning}`);
    if (careData.afternoon) careActivities.push(`Chi·ªÅu: ${careData.afternoon}`);
    if (careData.evening) careActivities.push(`T·ªëi: ${careData.evening}`);

    // Determine approval status
    const approval = frontendJournal.approval || {};
    let approvalStatus = 'PENDING';
    if (approval.leaderStatus && approval.leaderStatus.includes('ƒê√£ duy·ªát')) {
        approvalStatus = 'APPROVED';
    } else if (approval.leaderStatus && approval.leaderStatus.includes('T·ª´ ch·ªëi')) {
        approvalStatus = 'REJECTED';
    }

    // Preserve original IDs if they exist, otherwise use placeholders
    // In a real implementation, these would be resolved from the names
    return {
        dog_id: frontendJournal.dog_id || 1, // Use existing dog_id or placeholder
        trainer_id: frontendJournal.trainer_id || 1, // Use existing trainer_id or placeholder
        journal_date: generalInfo.date || '',
        training_activities: trainingActivities,
        care_activities: careActivities.join('; '),
        operation_activities: operationActivities,
        health_status: frontendJournal.health?.status || 'T·ªët',
        behavior_notes: frontendJournal.hlvComment || '',
        weather_conditions: frontendJournal.health?.weather || '',
        challenges: frontendJournal.otherIssues || '',
        approval_status: approvalStatus,
        rejection_reason: approvalStatus === 'REJECTED' ? approval.leaderComment : null,
        // Add signature data
        hlv_signature: approval.hlvSignature ? JSON.stringify(approval.hlvSignature) : null,
        leader_signature: approval.leaderSignature ? JSON.stringify(approval.leaderSignature) : null,
        substitute_signature: approval.substituteSignature ? JSON.stringify(approval.substituteSignature) : null,
        hlv_signature_timestamp: approval.hlvSignature?.timestamp || null,
        leader_signature_timestamp: approval.leaderSignature?.timestamp || null,
        substitute_signature_timestamp: approval.substituteSignature?.timestamp || null
    };
}

// Function to convert care activities from database format to frontend format
function convertCareActivitiesToFrontend(careActivities) {
    const care = {
        morning: '',
        afternoon: '',
        evening: '',
        bath: false,
        brush: false,
        wipe: false
    };

    if (careActivities) {
        try {
            // Try to parse as JSON first (new format)
            const parsed = JSON.parse(careActivities);
            if (typeof parsed === 'object' && parsed.activities) {
                return {
                    morning: parsed.activities.morning || '',
                    afternoon: parsed.activities.afternoon || '',
                    evening: parsed.activities.evening || '',
                    bath: parsed.activities.careBath || false,
                    brush: parsed.activities.careBrush || false,
                    wipe: parsed.activities.careWipe || false
                };
            }
        } catch (e) {
            // Fallback to old string format
        }

        // Old string format parsing
        const activities = careActivities.split(';').filter(a => a.trim());

        activities.forEach(activity => {
            if (activity.includes('S√°ng:')) {
                care.morning = activity.replace('S√°ng:', '').trim();
            } else if (activity.includes('Chi·ªÅu:')) {
                care.afternoon = activity.replace('Chi·ªÅu:', '').trim();
            } else if (activity.includes('T·ªëi:')) {
                care.evening = activity.replace('T·ªëi:', '').trim();
            }
        });
    }

    return care;
}

// Helper function to get journal data from database instead of localStorage
async function getJournalFromDatabase(journalKey) {
    try {
        // Parse journal key to get dog name, date, and optionally journal ID
        const keyParts = journalKey.replace('journal_', '').split('_');
        if (keyParts.length < 2) {
            console.error('Invalid journal key format:', journalKey);
            return null;
        }

        // Check if this is the new format with journal ID (4+ parts: dogName_date_id)
        if (keyParts.length >= 3) {
            const journalId = keyParts[keyParts.length - 1]; // Last part is journal ID

            // Load specific journal by ID
            const response = await fetch(`/api/journals/${journalId}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    return convertDatabaseToFrontendFormat(data.data);
                }
            }
            console.warn('‚ö†Ô∏è Failed to load journal by ID, falling back to dog+date method');
        }

        // Fallback to old method (dog name + date)
        const dogName = keyParts[0];
        const date = keyParts.slice(1, -1).join('_'); // Exclude the last part (journal ID) if present

        // Get journal from database using the database manager
        const journalData = await window.journalDBManager.loadJournalData(dogName, date, false);

        if (journalData) {
            // Convert to frontend format
            return convertDatabaseToFrontendFormat(journalData);
        }

        return null;
    } catch (error) {
        console.error('Error getting journal from database:', error);
        return null;
    }
}

// Helper function to get pending journals from database
async function getPendingJournalsFromDatabase() {
    try {
        const response = await fetch('/api/journals/pending');
        if (response.ok) {
            const data = await response.json();
            return data.data || [];
        }
        return [];
    } catch (error) {
        console.error('Error getting pending journals from database:', error);
        return [];
    }
}

// Helper function to save pending journals to database
async function savePendingJournalsToDatabase(pendingJournals) {
    try {
        // Update journal status in database
        for (const journal of pendingJournals) {
            const response = await fetch(`/api/journals/${journal.id}/status`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: 'PENDING_MANAGER_APPROVAL' })
            });
            if (!response.ok) {
                console.error('Failed to update journal status:', journal.id);
            }
        }
    } catch (error) {
        console.error('Error saving pending journals to database:', error);
    }
}

// Helper function to get trainer notifications from database
async function getTrainerNotificationsFromDatabase() {
    try {
        const response = await fetch('/api/notifications/trainer');
        if (response.ok) {
            const data = await response.json();
            return data.data || [];
        }
        console.warn('‚ö†Ô∏è Notification API not available, using empty array');
        return [];
    } catch (error) {
        console.warn('‚ö†Ô∏è Failed to get trainer notifications (non-blocking):', error.message);
        return [];
    }
}

// Helper function to save trainer notifications to database
async function saveTrainerNotificationsToDatabase(notifications) {
    try {
        const response = await fetch('/api/notifications/trainer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ notifications })
        });
        if (!response.ok) {
            console.warn('‚ö†Ô∏è Failed to save trainer notifications (non-blocking)');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Failed to save trainer notifications (non-blocking):', error.message);
    }
}

// Helper function to get users from database
async function getUsersFromDatabase() {
    try {
        const response = await fetch('/api/users');
        if (response.ok) {
            const data = await response.json();
            return data.data || [];
        }
        return [];
    } catch (error) {
        console.error('Error getting users from database:', error);
        return [];
    }
}


// Function to populate journal form with existing data

function populateJournalForm(data) {

    // Populate general info

    if (data.generalInfo) {

        const dateField = document.getElementById('journal_date');

        const hlvField = document.getElementById('journal_hlv');

        const dogField = document.getElementById('journal_dog_name');



        if (dateField) dateField.value = data.generalInfo.date || '';

        if (hlvField) hlvField.value = data.generalInfo.hlv || '';

        if (dogField) dogField.value = data.generalInfo.dogName || '';

    }



    // Populate training blocks

    if (data.trainingBlocks && data.trainingBlocks.length > 0) {

        data.trainingBlocks.forEach(blockData => {

            addTrainingBlock(blockData);

        });

    }



    // Populate operation blocks - only if there are existing operation blocks in data
    console.log('üîç Checking operation blocks:', data.operationBlocks);
    if (data.operationBlocks && data.operationBlocks.length > 0) {
        console.log('‚úÖ Found existing operation blocks, populating them');
        data.operationBlocks.forEach(blockData => {
            addOperationBlock(blockData);
        });
    }

    // Populate meals, care, health data

    if (data.meals) populateMealData(data.meals);

    if (data.care) populateCareData(data.care);

    if (data.health) populateHealthData(data.health);



    // Populate comments

    const hlvCommentField = document.getElementById('journal_hlv_comment');

    const otherIssuesField = document.getElementById('journal_other_issues');



    if (hlvCommentField) hlvCommentField.value = data.hlvComment || '';

    if (otherIssuesField) otherIssuesField.value = data.otherIssues || '';



    // Load approval and signature data

    if (data.approval) {

        loadApprovalData(data.approval);

    }

    // Restore toggle states based on existing data
    restoreToggleStates(data);

}

// Function to restore toggle states when loading existing journal data
function restoreToggleStates(data) {
    // Enable training section if there are training blocks
    const trainingToggle = document.getElementById('toggle_training');
    if (trainingToggle && data.trainingBlocks && data.trainingBlocks.length > 0) {
        trainingToggle.checked = true;
        toggleSection('training');
    }

    // Enable care section if there is care data
    const careToggle = document.getElementById('toggle_care');
    if (careToggle && data.care && Object.keys(data.care).some(key => data.care[key])) {
        careToggle.checked = true;
        toggleSection('care');
    }

    // Enable operation section if there are operation blocks
    const operationToggle = document.getElementById('toggle_operation');
    if (operationToggle && data.operationBlocks && data.operationBlocks.length > 0) {
        operationToggle.checked = true;
        toggleSection('operation');
    }
}



// Helper functions for populating form data

function populateMealData(meals) {

    if (meals.lunch) {

        const lunchTimeField = document.getElementById('lunchTime');

        const lunchAmountField = document.getElementById('lunchAmount');

        const lunchFoodOtherField = document.getElementById('lunchFoodOther');



        if (lunchTimeField) lunchTimeField.value = meals.lunch.time || '11:00';

        if (lunchAmountField) lunchAmountField.value = meals.lunch.amount || 'ƒÇn h·∫øt';

        if (lunchFoodOtherField) lunchFoodOtherField.value = meals.lunch.foodOther || '';

    }



    if (meals.dinner) {

        const dinnerTimeField = document.getElementById('dinnerTime');

        const dinnerAmountField = document.getElementById('dinnerAmount');

        const dinnerFoodOtherField = document.getElementById('dinnerFoodOther');



        if (dinnerTimeField) dinnerTimeField.value = meals.dinner.time || '17:00';

        if (dinnerAmountField) dinnerAmountField.value = meals.dinner.amount || 'ƒÇn h·∫øt';

        if (dinnerFoodOtherField) dinnerFoodOtherField.value = meals.dinner.foodOther || '';

    }

}



function populateCareData(care) {

    const bathField = document.getElementById('care_bath');

    const brushField = document.getElementById('care_brush');

    const wipeField = document.getElementById('care_wipe');



    if (bathField) bathField.checked = care.bath || false;

    if (brushField) brushField.checked = care.brush || false;

    if (wipeField) wipeField.checked = care.wipe || false;

}



function populateHealthData(health) {

    const healthRadios = document.querySelectorAll('input[name="health_status"]');

    const healthOtherField = document.getElementById('health_other_text');



    healthRadios.forEach(radio => {

        if (radio.value === health.status) {

            radio.checked = true;

        }

    });



    if (healthOtherField) healthOtherField.value = health.other || '';

}



// Function to setup form event listeners

function setupFormEventListeners() {

    // Health status change listener

    document.querySelectorAll('input[name="health_status"]').forEach(radio => {

        radio.addEventListener('change', () => {

            const healthOtherField = document.getElementById('health_other_text');

            if (healthOtherField) {

                if (radio.checked && (radio.dataset.healthType === 'abnormal' || radio.dataset.healthType === 'sick')) {

                    healthOtherField.classList.remove('hidden');

                } else {

                    healthOtherField.classList.add('hidden');

                    healthOtherField.value = '';

                }

            }

        });

    });



    // Close dropdowns when clicking outside

    document.addEventListener('click', (e) => {

        if (!e.target.closest('.custom-dropdown-trigger')) {

            document.querySelectorAll('.custom-dropdown-options').forEach(dropdown => {

                dropdown.classList.add('hidden');

            });

        }

    });

}



// S·ª¨A CH·ªÆ K√ù TH·ª∞C: Electronic signature functions - S·ª¨A HO√ÄN TO√ÄN V·ªöI CH·ªÆ K√ù TH·ª∞C V√Ä WORKFLOW MANAGER

async function submitHvlSignature() {




    const hvlSignatureDisplay = document.getElementById('hvl-signature-display');

    const submissionStatus = document.querySelector('.submission-status');

    const submitBtn = document.querySelector('.btn-submit-hvl');



    if (!hvlSignatureDisplay || !submissionStatus) {

        console.error('‚ùå Required elements not found for HLV signature');

        console.log('Available elements:', {

            hvlDisplay: !!hvlSignatureDisplay,

            status: !!submissionStatus,

            allStatusElements: document.querySelectorAll('.submission-status').length

        });

        alert('L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªØ k√Ω! Vui l√≤ng th·ª≠ l·∫°i.');

        return;

    }



    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k√Ω nh·∫≠t k√Ω n√†y? Sau khi k√Ω, nh·∫≠t k√Ω s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho Manager duy·ªát.')) {

        try {

            const currentTime = new Date().toISOString();

            // S·ª¨A: ∆Øu ti√™n currentUserName, kh√¥ng fallback v·ªÅ hlvInfo.name
            const signerName = currentUserName;

            // S·ª¨A: ∆Øu ti√™n currentUserRole, kh√¥ng fallback v·ªÅ 'TRAINER'
            const signerRole = currentUserRole;



            // S·ª¨A: Ki·ªÉm tra v√† c·∫£nh b√°o n·∫øu th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng ƒë·∫ßy ƒë·ªß
            if (!signerName || !signerRole) {
                console.error('‚ùå Missing user information for signature:', { signerName, signerRole, currentUserName, currentUserRole });
                alert('L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
                return;
            }




            // L·∫•y ch·ªØ k√Ω th·ª±c t·ª´ database ch·ªØ k√Ω

            const signatureData = await getUserSignature(signerName, signerRole);




            // T·∫°o hash an to√†n v·ªõi Unicode

            let hashString = '';

            try {

                hashString = btoa(unescape(encodeURIComponent(signerName + '_HLV_' + currentTime)));

            } catch (error) {

                console.warn('Hash encoding error, using fallback:', error);

                hashString = 'HASH_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

            }



            const fullSignatureData = {

                name: signerName,

                role: signerRole,

                timestamp: currentTime,

                id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),

                hash: hashString,

                verified: true,

                digitalSignature: generateDigitalSignature(signerName, signerRole, currentTime)

            };






            // Update UI NGAY L·∫¨P T·ª®C v·ªõi ch·ªØ k√Ω th·ª±c

            const signatureHTML = await generateSignatureHTML(signatureData, currentTime);




            hvlSignatureDisplay.innerHTML = signatureHTML;

            submissionStatus.innerHTML = '<strong style="color: green;">‚úÖ ƒê√£ k√Ω th√†nh c√¥ng</strong>';



            // ·∫®n n√∫t k√Ω sau khi ƒë√£ k√Ω

            if (submitBtn) {

                submitBtn.style.display = 'none';

            }



            console.log('‚úÖ HLV signature UI updated successfully');



            // S·ª¨A: L∆ØU CH·ªÆ K√ù V√Ä CHUY·ªÇN CHO MANAGER - WORKFLOW HO√ÄN CH·ªàNH

            saveSignatureToJournal('hvlSignature', fullSignatureData);



            // S·ª¨A: TH√äM V√ÄO DANH S√ÅCH CH·ªú DUY·ªÜT C·ª¶A MANAGER

            addJournalToPendingManagerApproval();



            // Notify dashboard v·ªÅ journal update

            notifyDashboardUpdate();



            // S·ª¨A: TH√îNG B√ÅO CHUY·ªÇN CHO MANAGER

            alert('üéâ ƒê√£ k√Ω nh·∫≠t k√Ω th√†nh c√¥ng!\n\n' +

                'üìã Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho Manager duy·ªát\n' +

                '‚è≥ Manager s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o\n' +

                'üëÄ B·∫°n c√≥ th·ªÉ theo d√µi tr·∫°ng th√°i trong "Xem nh·∫≠t k√Ω c≈©"');



            console.log('‚úÖ HLV signature completed successfully and sent to Manager');



        } catch (error) {

            console.error('‚ùå Error in submitHvlSignature:', error);

            alert('C√≥ l·ªói khi k√Ω nh·∫≠t k√Ω: ' + error.message);

        }

    }

}



// S·ª¨A: Function TH√äM V√ÄO DANH S√ÅCH CH·ªú DUY·ªÜT C·ª¶A MANAGER

async function addJournalToPendingManagerApproval() {

    const dogName = document.getElementById('journal_dog_name').value;

    const date = document.getElementById('journal_date').value;

    const journalKey = 'journal_' + dogName + '_' + date;



    console.log('üìù Adding journal to pending manager approval:', journalKey);



    // S·ª¨A: C·∫¨P NH·∫¨T JOURNAL STATUS (with database fallback)

    let journalData = {};

    try {
        // Try to get journal from database first
        const response = await fetch(`/api/journals/by-dog-date/${encodeURIComponent(dogName)}/${date}`);
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.data) {
                // Convert database format to frontend format
                journalData = convertDatabaseToFrontendFormat(data.data);
            }
        }
    } catch (error) {
        console.error('Failed to get journal from database:', error);
    }

    if (!journalData.approval) {

        journalData.approval = {};

    }



    // Set tr·∫°ng th√°i ch·ªù duy·ªát

    journalData.approval.status = 'PENDING_MANAGER_APPROVAL';

    journalData.approval.submittedAt = new Date().toISOString();

    journalData.approval.submittedBy = currentUserName;

    journalData.approval.requiresManagerApproval = true; // S·ª¨A: TH√äM FLAG ƒê·∫∂C BI·ªÜT

    // Try to save to database using journal database manager
    try {
        // Get proper dog and trainer IDs
        const dogName = document.getElementById('journal_dog_name').value;
        const dogInfo = await window.journalDBManager.getDogByName(dogName);

        if (!dogInfo) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y ch√≥ "${dogName}" trong c∆° s·ªü d·ªØ li·ªáu`);
        }

        // Create journal data with proper IDs
        const journalData = {
            dog_id: dogInfo.id,
            trainer_id: dogInfo.trainer_id,
            journal_date: document.getElementById('journal_date').value,
            approval_status: 'PENDING_MANAGER_APPROVAL',
            // Add other required fields with empty values for now
            training_activities: '',
            care_activities: '',
            operation_activities: '',
            health_status: 'T·ªët',
            behavior_notes: '',
            weather_conditions: '',
            challenges: '',
            next_goals: '',
            training_duration: 0,
            success_rate: 0
        };

        console.log('üîç Sending journal data to API:', journalData);

        const response = await fetch('/api/journals', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(journalData)
        });

        if (response.ok) {
            console.log('‚úÖ Journal status updated in database');
        } else {
            const errorData = await response.json();
            console.error('‚ùå Failed to save journal to database:', errorData);
        }
    } catch (error) {
        console.warn('Failed to update journal in database:', error);
    }

    console.log('‚úÖ Updated journal status to PENDING_MANAGER_APPROVAL');



    // S·ª¨A: TH√äM V√ÄO DANH S√ÅCH PENDING JOURNALS RI√äNG

    // TODO: Add to database pending list

    // Load pending journals from database
    let pendingJournals = await getPendingJournalsFromDatabase();

    // Ki·ªÉm tra n·∫øu journal ƒë√£ c√≥ trong danh s√°ch ch·ªù duy·ªát

    const existingIndex = pendingJournals.findIndex(j => j.key === journalKey);



    const journalEntry = {

        key: journalKey,

        dogName: dogName,

        date: date,

        trainer: currentUserName,

        submittedAt: new Date().toISOString(),

        status: 'PENDING',

        requiresAction: true // S·ª¨A: FLAG MANAGER C·∫¶N X·ª¨ L√ù

    };



    if (existingIndex === -1) {

        pendingJournals.push(journalEntry);

        console.log('‚úÖ Added new journal to pending manager approvals');

    } else {

        pendingJournals[existingIndex] = journalEntry;

        console.log('‚úÖ Updated existing journal in pending manager approvals');

    }



    // TODO: Save to database



    // S·ª¨A: T·∫†O NOTIFICATION CHO MANAGER

    createManagerNotification(journalEntry);



    console.log('üìä Current pending journals for manager:', pendingJournals.length);

}



// S·ª¨A: Function T·∫†O NOTIFICATION CHO MANAGER

function createManagerNotification(journalEntry) {

    // TODO: Get from database
    const notifications = [];



    const notification = {

        id: 'notif_' + Date.now(),

        type: 'JOURNAL_APPROVAL_REQUIRED',

        title: 'Nh·∫≠t k√Ω m·ªõi c·∫ßn duy·ªát',

        message: `HLV ${journalEntry.trainer} ƒë√£ g·ª≠i nh·∫≠t k√Ω CNV ${journalEntry.dogName} (${journalEntry.date}) ƒë·ªÉ duy·ªát`,

        journalKey: journalEntry.key,

        createdAt: new Date().toISOString(),

        read: false,

        urgent: true

    };



    notifications.unshift(notification); // Th√™m v√†o ƒë·∫ßu danh s√°ch



    // Gi·ªõi h·∫°n s·ªë notification (gi·ªØ l·∫°i 50 notification g·∫ßn nh·∫•t)

    if (notifications.length > 50) {

        notifications.splice(50);

    }



    // TODO: Save to database

    console.log('üì¢ Created manager notification:', notification.id);

}



// S·ª¨A: Function ƒë·∫∑t tr·∫°ng th√°i nh·∫≠t k√Ω ch·ªù Manager duy·ªát

async function setJournalPendingForManagerApproval() {

    const dogName = document.getElementById('journal_dog_name').value;

    const date = document.getElementById('journal_date').value;

    const journalKey = 'journal_' + dogName + '_' + date;



    // TODO: Get from database
    let journalData = {};



    if (!journalData.approval) {

        journalData.approval = {};

    }



    // Set tr·∫°ng th√°i ch·ªù duy·ªát

    journalData.approval.status = 'PENDING_MANAGER_APPROVAL';

    journalData.approval.submittedAt = new Date().toISOString();

    journalData.approval.submittedBy = currentUserName;

    // Try to save to database using journal database manager
    try {
        // Get proper dog and trainer IDs
        const dogName = document.getElementById('journal_dog_name').value;
        const dogInfo = await window.journalDBManager.getDogByName(dogName);

        if (!dogInfo) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y ch√≥ "${dogName}" trong c∆° s·ªü d·ªØ li·ªáu`);
        }

        // Create journal data with proper IDs
        const journalData = {
            dog_id: dogInfo.id,
            trainer_id: dogInfo.trainer_id,
            journal_date: document.getElementById('journal_date').value,
            approval_status: 'PENDING_MANAGER_APPROVAL',
            // Add other required fields with empty values for now
            training_activities: '',
            care_activities: '',
            operation_activities: '',
            health_status: 'T·ªët',
            behavior_notes: '',
            weather_conditions: '',
            challenges: '',
            next_goals: '',
            training_duration: 0,
            success_rate: 0
        };

        const response = await fetch('/api/journals', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(journalData)
        });
        if (response.ok) {
            console.log('‚úÖ Journal status updated in database');
        } else {
            const errorData = await response.json();
            console.error('‚ùå Failed to save journal to database:', errorData);
        }
    } catch (error) {
        console.warn('Failed to update journal in database:', error);
    }

    console.log('‚úÖ Set journal pending for manager approval:', journalKey);



    // Th√™m v√†o danh s√°ch journals ch·ªù duy·ªát

    // TODO: Get from database
    const pendingJournals = [];

    const existingIndex = pendingJournals.findIndex(j => j.key === journalKey);



    if (existingIndex === -1) {

        pendingJournals.push({

            key: journalKey,

            dogName: dogName,

            date: date,

            trainer: currentUserName,

            submittedAt: new Date().toISOString()

        });

        // TODO: Save to database

        console.log('‚úÖ Added journal to pending manager approvals');

    }

}



async function approveJournal() {

    console.log('üñäÔ∏è Leader approval function called');



    if (currentUserRole !== 'ADMIN' && currentUserRole !== 'MANAGER') {

        alert('B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát nh·∫≠t k√Ω!');

        return;

    }



    const leaderSignatureDisplay = document.getElementById('leader-signature-display');

    const approvalStatus = document.querySelector('.approval-status');

    const approveBtn = document.querySelector('.btn-approve');



    if (!leaderSignatureDisplay || !approvalStatus) {

        console.error('‚ùå Required elements not found for leader approval');

        console.log('Available elements:', {

            leaderDisplay: !!leaderSignatureDisplay,

            status: !!approvalStatus

        });

        alert('L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªØ k√Ω l√£nh ƒë·∫°o! Vui l√≤ng th·ª≠ l·∫°i.');

        return;

    }



    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát nh·∫≠t k√Ω n√†y?')) {

        try {

            const currentTime = new Date().toISOString();



            console.log('üîë Manager approving with:', currentUserName, currentUserRole);



            // S·ª¨A: L·∫•y ch·ªØ k√Ω th·ª±c t·ª´ database ch·ªØ k√Ω cho Manager

            const signatureData = await getUserSignature(currentUserName, currentUserRole);

            console.log('üìã Retrieved manager signature data:', signatureData);



            // S·ª¨A: T·∫°o hash an to√†n v·ªõi Unicode

            let hashString = '';

            try {

                hashString = btoa(unescape(encodeURIComponent(currentUserName + '_LEADER_' + currentTime)));

            } catch (error) {

                console.warn('Hash encoding error, using fallback:', error);

                hashString = 'HASH_LEADER_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

            }



            const fullSignatureData = {

                name: currentUserName,

                role: currentUserRole,

                timestamp: currentTime,

                id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),

                hash: hashString,

                verified: true,

                digitalSignature: generateDigitalSignature(currentUserName, currentUserRole, currentTime)

            };



            // S·ª¨A: Update UI NGAY L·∫¨P T·ª®C v·ªõi ch·ªØ k√Ω th·ª±c

            const signatureHTML = await generateSignatureHTML(signatureData, currentTime);

            leaderSignatureDisplay.innerHTML = signatureHTML;

            approvalStatus.innerHTML = '<strong style="color: green;">‚úÖ ƒê√£ duy·ªát</strong>';



            // ·∫®n n√∫t duy·ªát sau khi ƒë√£ duy·ªát

            if (approveBtn) {

                approveBtn.style.display = 'none';

            }



            console.log('‚úÖ Leader approval UI updated successfully');



            // Save signature and approval status

            const leaderComment = document.getElementById('leader_comment').value;

            saveSignatureToJournal('leaderSignature', fullSignatureData);

            saveApprovalData({

                leaderComment: leaderComment,

                leaderStatus: 'ƒê√£ duy·ªát',

                leaderApprovalTime: currentTime,

                status: 'APPROVED'

            });



            // S·ª¨A: Remove t·ª´ danh s√°ch ch·ªù duy·ªát

            removeFromPendingApprovals();



            // Notify dashboard v·ªÅ journal approval

            notifyDashboardUpdate();



            alert('ƒê√£ duy·ªát nh·∫≠t k√Ω th√†nh c√¥ng!\nCh·ªØ k√Ω Manager ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ.\nNh·∫≠t k√Ω ƒë√£ ho√†n th√†nh quy tr√¨nh.');



            console.log('‚úÖ Leader approval completed successfully');



        } catch (error) {

            console.error('‚ùå Error in approveJournal:', error);

            alert('C√≥ l·ªói khi duy·ªát nh·∫≠t k√Ω: ' + error.message);

        }

    }

}



// Function remove journal t·ª´ pending approvals

async function removeFromPendingApprovals() {

    const dogName = document.getElementById('journal_dog_name').value;

    const date = document.getElementById('journal_date').value;

    const journalKey = 'journal_' + dogName + '_' + date;



    // TODO: Get from database
    const pendingJournals = [];

    const filteredJournals = pendingJournals.filter(j => j.key !== journalKey);

    // Save pending journals to database
    await savePendingJournalsToDatabase(filteredJournals);

    console.log('‚úÖ Removed journal from pending approvals');

}



// Function t·∫°o ch·ªØ k√Ω s·ªë - S·ª¨A: H·ªó tr·ª£ Unicode (ti·∫øng Vi·ªát)

function generateDigitalSignature(userName, role, timestamp) {

    // Validate input parameters
    if (!userName || typeof userName !== 'string') {
        console.warn('‚ö†Ô∏è Invalid userName provided to generateDigitalSignature:', userName);
        userName = 'UnknownUser';
    }

    if (!role || typeof role !== 'string') {
        console.warn('‚ö†Ô∏è Invalid role provided to generateDigitalSignature:', role);
        role = 'UNKNOWN';
    }

    if (!timestamp || typeof timestamp !== 'string') {
        console.warn('‚ö†Ô∏è Invalid timestamp provided to generateDigitalSignature:', timestamp);
        timestamp = new Date().toISOString();
    }

    // T·∫°o m·ªôt chu·ªói d·ªØ li·ªáu ƒë·ªÉ k√Ω

    const dataToSign = userName + '|' + role + '|' + timestamp + '|' + Date.now();



    // T·∫°o hash t·ª´ d·ªØ li·ªáu (gi·∫£ l·∫≠p thu·∫≠t to√°n bƒÉm)

    let hash = 0;

    for (let i = 0; i < dataToSign.length; i++) {

        const char = dataToSign.charCodeAt(i);

        hash = ((hash << 5) - hash) + char;

        hash = hash & hash; // Convert to 32-bit integer

    }



    // S·ª¨A: S·ª≠ d·ª•ng encodeURIComponent ƒë·ªÉ h·ªó tr·ª£ Unicode

    const safeString = 'DS_' + Math.abs(hash) + '_' + encodeURIComponent(userName.replace(/\s/g, '')) + '_' + role + '_' + new Date().getTime();



    try {

        // Encode an to√†n cho Unicode

        const signature = btoa(unescape(encodeURIComponent(safeString)));

        // R√∫t g·ªçn ch·ªØ k√Ω ƒë·ªÉ hi·ªÉn th·ªã

        return signature.substring(0, 32) + '...';

    } catch (error) {

        console.warn('btoa encoding error, using fallback:', error);

        // Fallback: ch·ªâ d√πng hash s·ªë

        return 'DS_' + Math.abs(hash).toString().substring(0, 16) + '...';

    }

}



async function substituteHvlApprove() {

    console.log('üñäÔ∏è Substitute HLV signature function called');



    const substituteName = document.getElementById('substitute_hvl_name').value;

    const substituteComment = document.getElementById('substitute_hvl_comment').value;



    if (!substituteName || typeof substituteName !== 'string' || !substituteName.trim()) {

        alert('Vui l√≤ng nh·∫≠p h·ªç t√™n HLV tr·ª±c thay!');

        return;

    }



    const substituteSignatureDisplay = document.getElementById('substitute-signature-display');

    const substituteStatus = document.querySelector('.substitute-hvl-status');

    const substituteBtn = document.querySelector('.btn-substitute-hvl-approve');



    if (!substituteSignatureDisplay || !substituteStatus) {

        console.error('‚ùå Required elements not found for substitute signature');

        console.log('Available elements:', {

            substituteDisplay: !!substituteSignatureDisplay,

            status: !!substituteStatus

        });

        alert('L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªØ k√Ω HLV tr·ª±c thay! Vui l√≤ng th·ª≠ l·∫°i.');

        return;

    }



    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k√Ω thay v·ªõi t√™n "' + substituteName + '"?')) {

        try {

            const currentTime = new Date().toISOString();



            // S·ª¨A: L·∫•y ch·ªØ k√Ω th·ª±c cho HLV tr·ª±c thay

            const signatureData = await getUserSignature(substituteName, 'TRAINER');



            // S·ª¨A: T·∫°o hash an to√†n v·ªõi Unicode

            let hashString = '';

            try {

                hashString = btoa(unescape(encodeURIComponent(substituteName + '_SUBSTITUTE_' + currentTime)));

            } catch (error) {

                console.warn('Hash encoding error, using fallback:', error);

                hashString = 'HASH_SUBSTITUTE_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

            }



            const fullSignatureData = {

                name: substituteName,

                role: 'SUBSTITUTE_HLV',

                timestamp: currentTime,

                id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),

                hash: hashString,

                verified: true,

                comment: substituteComment,

                digitalSignature: generateDigitalSignature(substituteName, 'SUBSTITUTE_HLV', currentTime)

            };



            // S·ª¨A: Update UI NGAY L·∫¨P T·ª®C v·ªõi ch·ªØ k√Ω th·ª±c

            const signatureHTML = await generateSignatureHTML(signatureData, currentTime);

            substituteSignatureDisplay.innerHTML = signatureHTML;

            substituteStatus.innerHTML = '<strong style="color: green;">‚úÖ ƒê√£ k√Ω</strong>';



            // ·∫®n n√∫t k√Ω sau khi ƒë√£ k√Ω

            if (substituteBtn) {

                substituteBtn.style.display = 'none';

            }



            console.log('‚úÖ Substitute HLV signature UI updated successfully');



            // Save signature

            saveSignatureToJournal('substituteSignature', fullSignatureData);



            // Notify dashboard v·ªÅ substitute signature

            notifyDashboardUpdate();



            alert('HLV tr·ª±c thay ƒë√£ k√Ω th√†nh c√¥ng!\nCh·ªØ k√Ω ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ.');



            console.log('‚úÖ Substitute HLV signature completed successfully');



        } catch (error) {

            console.error('‚ùå Error in substituteHvlApprove:', error);

            alert('C√≥ l·ªói khi k√Ω thay: ' + error.message);

        }

    }

}



// Function notify dashboard update

function notifyDashboardUpdate() {

    // Notify dashboard v·ªÅ changes

    if (window.opener) {

        window.opener.postMessage({

            type: 'JOURNAL_SIGNATURE_UPDATE',

            timestamp: new Date().toISOString()

        }, '*');

    }



    // Dashboard sync - now handled through database

}



// UPDATED: Function to save signature to journal data - NOW USES DATABASE
async function saveSignatureToJournal(signatureType, signatureData) {
    try {
        // Save to database if journal exists
        if (window.journalDBManager.currentJournalId) {
            // Update journal with signature data
            const updateData = {
                [`${signatureType}_signature`]: JSON.stringify(signatureData),
                [`${signatureType}_timestamp`]: new Date().toISOString()
            };

            await window.journalDBManager.updateJournal(window.journalDBManager.currentJournalId, updateData);
            console.log('‚úÖ Saved ' + signatureType + ' signature to database');
        } else {
            // For new journals, store signature data temporarily in a global variable
            // This will be picked up when the journal is first saved
            if (!window.tempSignatureData) {
                window.tempSignatureData = {};
            }
            window.tempSignatureData[signatureType] = {
                signature: JSON.stringify(signatureData),
                timestamp: new Date().toISOString()
            };
            console.log('‚úÖ Stored ' + signatureType + ' signature temporarily for new journal');
            console.log('üîç Temp signature data after storing:', window.tempSignatureData);
        }

        // TODO: Save to database
        const dogName = document.getElementById('journal_dog_name').value;

        const date = document.getElementById('journal_date').value;

        const journalKey = 'journal_' + dogName + '_' + date;



        // TODO: Get from database
        let journalData = {};



        if (!journalData.approval) {

            journalData.approval = {};

        }



        journalData.approval[signatureType] = signatureData;

        // TODO: Save to database



        console.log('‚úÖ Saved ' + signatureType + ' signature to database');

    } catch (error) {
        console.error('Error saving signature:', error);

        // Database save failed
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const journalKey = 'journal_' + dogName + '_' + date;

        // TODO: Get from database
        let journalData = {};

        if (!journalData.approval) {
            journalData.approval = {};
        }

        journalData.approval[signatureType] = signatureData;

        console.log('‚úÖ Saved ' + signatureType + ' signature to database');
    }
}

// UPDATED: Function to save approval data - NOW USES DATABASE
async function saveApprovalData(approvalData) {
    try {
        // Save to database if journal exists
        if (window.journalDBManager.currentJournalId) {
            const updateData = {
                approval_status: approvalData.status || 'PENDING',
                approved_by: approvalData.approverId || null,
                approved_at: approvalData.approvedAt || null,
                rejection_reason: approvalData.rejectionReason || null
            };

            await window.journalDBManager.updateJournal(window.journalDBManager.currentJournalId, updateData);
            console.log('‚úÖ Saved approval data to database');
        }

        // TODO: Save to database
        const dogName = document.getElementById('journal_dog_name').value;

        const date = document.getElementById('journal_date').value;

        const journalKey = 'journal_' + dogName + '_' + date;



        // TODO: Get from database
        let journalData = {};



        if (!journalData.approval) {

            journalData.approval = {};

        }



        Object.assign(journalData.approval, approvalData);

        // TODO: Save to database



        console.log('‚úÖ Saved approval data to database');

    } catch (error) {
        console.error('Error saving approval data:', error);

        // Database save failed
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const journalKey = 'journal_' + dogName + '_' + date;

        // TODO: Get from database
        let journalData = {};

        if (!journalData.approval) {
            journalData.approval = {};
        }

        Object.assign(journalData.approval, approvalData);

        console.log('‚úÖ Saved approval data to database');
    }
}



// Functions to remove blocks

function removeLastTrainingBlock() {

    const container = document.getElementById('training-blocks-container');

    const blocks = container.querySelectorAll('.training-block');



    if (blocks.length > 0) {

        container.removeChild(blocks[blocks.length - 1]);

        trainingSessionCounter--;

    }

}

// Function to toggle section visibility
function toggleSection(sectionType) {
    const checkbox = document.getElementById('toggle_' + sectionType);
    const section = document.getElementById(sectionType + '-section');

    if (checkbox && section) {
        if (checkbox.checked) {
            section.style.display = 'block';
        } else {
            section.style.display = 'none';
        }
    }
}



function removeLastOperationBlock() {

    const container = document.getElementById('operation-blocks-container');

    const blocks = container.querySelectorAll('.operation-block');



    if (blocks.length > 0) {

        container.removeChild(blocks[blocks.length - 1]);

        operationSessionCounter--;

    }

}



// UPDATED: Function to save journal data - NOW USES DATABASE
async function saveJournalData() {
    try {
        // Use the database manager to save
        await window.journalDBManager.saveJournalData();

        // TODO: Save to database/compatibility
        const dogName = document.getElementById('journal_dog_name').value;

        const date = document.getElementById('journal_date').value;

        const journalKey = 'journal_' + dogName + '_' + date;



        const journalData = {

            generalInfo: {

                dogName: dogName,

                date: date,

                hlv: document.getElementById('journal_hlv').value

            },

            trainingBlocks: collectTrainingBlocksData(),

            operationBlocks: collectOperationBlocksData(),

            meals: collectMealsData(),

            care: collectCareData(),

            health: collectHealthData(),

            hlvComment: collectHLVComment(),

            otherIssues: collectOtherIssues(),

            lastModified: new Date().toISOString()

        };



        // Preserve existing approval data

        // TODO: Get existing data from database
        const existingData = null;

        if (existingData) {

            const existing = JSON.parse(existingData);

            if (existing.approval) {

                journalData.approval = existing.approval;

            }

        }



        // Check if journal has HLV signature for manager approval
        if (journalData.approval && journalData.approval.hlvSignature && !journalData.approval && journalData.approval.leaderSignature) {

            journalData.approval.status = 'PENDING_MANAGER_APPROVAL';

            console.log('‚úÖ Journal has HLV signature, set for manager approval');

        }



        // TODO: Save to database



        // Notify dashboard about journal save
        notifyDashboardUpdate();



        console.log('‚úÖ Journal saved successfully to database:', journalKey);

    } catch (error) {
        console.error('Error saving journal:', error);

        // Database save failed
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const journalKey = 'journal_' + dogName + '_' + date;

        const journalData = {
            generalInfo: {
                dogName: dogName,
                date: date,
                hlv: document.getElementById('journal_hlv').value
            },
            trainingBlocks: collectTrainingBlocksData(),
            operationBlocks: collectOperationBlocksData(),
            meals: collectMealsData(),
            care: collectCareData(),
            health: collectHealthData(),
            hlvComment: collectHLVComment(),
            otherIssues: collectOtherIssues(),
            lastModified: new Date().toISOString()
        };

        // Preserve existing approval data
        // TODO: Get existing data from database
        const existingData = null;
        if (existingData) {
            const existing = JSON.parse(existingData);
            if (existing.approval) {
                journalData.approval = existing.approval;
            }
        }

        notifyDashboardUpdate();

        alert('Kh√¥ng th·ªÉ l∆∞u nh·∫≠t k√Ω v√†o c∆° s·ªü d·ªØ li·ªáu. ' +
            'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.');

        console.log('‚ùå Failed to save journal to database:', journalKey);
    }
}



// Data collection functions

function collectTrainingBlocksData() {

    const blocks = [];

    // Check if training section is enabled
    const trainingToggle = document.getElementById('toggle_training');
    if (!trainingToggle || !trainingToggle.checked) {
        return blocks; // Return empty array if training section is disabled
    }

    const trainingBlocks = document.querySelectorAll('.training-block');



    trainingBlocks.forEach((block, index) => {

        const blockId = block.getAttribute('data-block-id');



        const blockData = {

            fromTime: document.getElementById('trainingFromTime-' + blockId).value,

            toTime: document.getElementById('trainingToTime-' + blockId).value,

            locationType: getSelectedRadioValue('training-location-group-' + blockId),

            locationOther: document.getElementById('trainingLocationOther-' + blockId).value,

            advancedTraining: document.getElementById('hlNangCaoCheckbox-' + blockId).checked,

            basicTraining: document.getElementById('hlCoBanCheckbox-' + blockId).checked,

            physicalTraining: document.getElementById('hlTheLucCheckbox-' + blockId).checked,

            otherTraining: document.getElementById('hlKhacCheckbox-' + blockId).checked ?

                document.getElementById('hlKhacText-' + blockId).value : null,

            drugDetection: []

        };



        // Collect drug detection data for 3 attempts

        for (let i = 1; i <= 3; i++) {

            const selectedDrugs = getSelectedCheckboxValues('drugTypeOptions-' + blockId + '-' + i, 'data-drug-value');

            const manifestation = getSelectedCheckboxValues('.detection-manifestation-' + i, 'value');

            const drugTypeOther = document.getElementById('drugTypeOther-' + blockId + '-' + i).value;

            const manifestationOther = document.getElementById('manifestationOther-' + blockId + '-' + i).value;



            blockData.drugDetection.push({

                selectedDrugs: selectedDrugs,

                drugTypeOther: drugTypeOther,

                manifestation: manifestation,

                manifestationOther: manifestationOther

            });

        }



        blocks.push(blockData);

    });



    return blocks;

}



function collectOperationBlocksData() {

    const blocks = [];

    // Check if operation section is enabled
    const operationToggle = document.getElementById('toggle_operation');
    if (!operationToggle || !operationToggle.checked) {
        return blocks; // Return empty array if operation section is disabled
    }

    const operationBlocks = document.querySelectorAll('.operation-block');

    operationBlocks.forEach((block, index) => {

        const blockId = block.getAttribute('data-block-id');

        const selectedLocations = getSelectedCheckboxValues('operationLocationOptions-' + blockId, 'data-location-value');

        const blockData = {

            fromTime: document.getElementById('operationFromTime-' + blockId).value,

            toTime: document.getElementById('operationToTime-' + blockId).value,

            selectedLocations: selectedLocations,

            locationKhoText: document.getElementById('operationLocationKho-' + blockId).value,

            locationOtherText: document.getElementById('operationLocationOther-' + blockId).value,

            checkGoods: document.getElementById('checkGoods-' + blockId).checked,

            checkLuggage: document.getElementById('checkLuggage-' + blockId).checked,

            fieldTraining: document.getElementById('fieldTraining-' + blockId).checked,

            patrol: document.getElementById('patrol-' + blockId).checked,

            otherOperation1: document.getElementById('opKhacCheckbox1-' + blockId).checked ?

                document.getElementById('opKhacText1-' + blockId).value : null,

            otherOperation2: document.getElementById('opKhacCheckbox2-' + blockId).checked ?

                document.getElementById('opKhacText2-' + blockId).value : null,

            noViolation: document.getElementById('noViolation-' + blockId).checked,

            violationDetected: document.getElementById('violationDetected-' + blockId).checked,

            otherIssues: document.getElementById('operation_other_issues_' + blockId).value

        };



        blocks.push(blockData);

    });



    return blocks;

}



function collectMealsData() {

    // Check if care section is enabled
    const careToggle = document.getElementById('toggle_care');
    if (!careToggle || !careToggle.checked) {
        return {}; // Return empty object if care section is disabled
    }

    return {

        lunch: {

            time: document.getElementById('lunchTime').value,

            amount: document.getElementById('lunchAmount').value,

            food: getSelectedCheckboxValues('lunchFoodOptions', 'data-food-value').join(', '),

            foodOther: document.getElementById('lunchFoodOther').value

        },

        dinner: {

            time: document.getElementById('dinnerTime').value,

            amount: document.getElementById('dinnerAmount').value,

            food: getSelectedCheckboxValues('dinnerFoodOptions', 'data-food-value').join(', '),

            foodOther: document.getElementById('dinnerFoodOther').value

        }

    };

}



function collectCareData() {

    // Check if care section is enabled
    const careToggle = document.getElementById('toggle_care');
    if (!careToggle || !careToggle.checked) {
        return {}; // Return empty object if care section is disabled
    }

    return {

        bath: document.getElementById('care_bath').checked,

        brush: document.getElementById('care_brush').checked,

        wipe: document.getElementById('care_wipe').checked

    };

}



function collectHealthData() {

    // Check if care section is enabled
    const careToggle = document.getElementById('toggle_care');
    if (!careToggle || !careToggle.checked) {
        return {}; // Return empty object if care section is disabled
    }

    return {

        status: getSelectedRadioValue('health_status'),

        other: document.getElementById('health_other_text').value

    };

}

// Helper function to conditionally collect HLV comment
function collectHLVComment() {
    const trainingToggle = document.getElementById('toggle_training');
    if (!trainingToggle || !trainingToggle.checked) {
        return ''; // Return empty string if training section is disabled
    }
    return document.getElementById('journal_hlv_comment').value;
}

// Helper function to conditionally collect other issues
function collectOtherIssues() {
    const careToggle = document.getElementById('toggle_care');
    if (!careToggle || !careToggle.checked) {
        return ''; // Return empty string if care section is disabled
    }
    return document.getElementById('journal_other_issues').value;
}



// Helper functions for data collection

function getSelectedRadioValue(name) {

    const radio = document.querySelector('input[name="' + name + '"]:checked');

    return radio ? radio.value : '';

}



function getSelectedCheckboxValues(containerId, attribute) {

    const container = document.getElementById(containerId) || document.querySelector(containerId);

    if (!container) return [];

    const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');

    return Array.from(checkboxes).map(cb => cb.getAttribute(attribute) || cb.value);

}



// Helper functions cho journal actions

function createNewJournal() {

    if (confirm('T·∫°o nh·∫≠t k√Ω m·ªõi? D·ªØ li·ªáu hi·ªán t·∫°i s·∫Ω b·ªã x√≥a.')) {

        showJournalEditForm(currentDogForJournal);

    }

}



// S·ª¨A: Function viewOldJournals - CHUY·ªÇN SANG DATABASE API

async function viewOldJournals() {

    // Load journals from database
    const dogJournals = [];

    try {
        console.log('üîç Loading old journals for dog:', currentDogForJournal);

        // Get dog info first
        const dogInfo = await window.journalDBManager.getDogByName(currentDogForJournal);
        if (!dogInfo) {
            alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin ch√≥: ' + currentDogForJournal);
            return;
        }

        // Get all journals for this dog
        const response = await fetch(`${window.journalDBManager.apiBaseUrl}/api/journals/by-dog/${dogInfo.id}`);
        if (response.ok) {
            const result = await response.json();
            if (result.success && result.data) {
                result.data.forEach(journal => {
                    dogJournals.push({
                        key: `journal_${currentDogForJournal}_${journal.journal_date}`,
                        date: journal.journal_date,
                        data: journal,
                        id: journal.id
                    });
                });
                console.log('‚úÖ Loaded journals from database:', dogJournals.length);
            }
        } else {
            console.error('‚ùå Failed to load journals from database:', response.status);
        }
    } catch (error) {
        console.error('‚ùå Error loading journals from database:', error);
        alert('L·ªói khi t·∫£i nh·∫≠t k√Ω t·ª´ c∆° s·ªü d·ªØ li·ªáu: ' + error.message);
        return;
    }



    if (dogJournals.length === 0) {

        alert('Kh√¥ng c√≥ nh·∫≠t k√Ω c≈© n√†o cho CNV ' + currentDogForJournal);

        return;

    }



    // S·∫Øp x·∫øp theo ng√†y gi·∫£m d·∫ßn

    dogJournals.sort((a, b) => new Date(b.date) - new Date(a.date));



    // T·∫°o danh s√°ch ch·ªçn ng√†y v·ªõi th√¥ng tin chi ti·∫øt

    let dateOptions = '<option value="">Ch·ªçn ng√†y xem nh·∫≠t k√Ω</option>';

    dogJournals.forEach(journal => {
        const journalData = journal.data;

        // L·∫•y th√¥ng tin trainer
        const trainerName = journalData.trainer_name || 'Ch∆∞a x√°c ƒë·ªãnh';

        // L·∫•y tr·∫°ng th√°i duy·ªát
        let approvalStatus = 'Ch∆∞a duy·ªát';
        if (journalData.approval_status === 'APPROVED') {
            approvalStatus = '‚úÖ ƒê√£ duy·ªát';
        } else if (journalData.approval_status === 'REJECTED') {
            approvalStatus = '‚ùå B·ªã t·ª´ ch·ªëi';
        } else {
            approvalStatus = '‚è≥ Ch·ªù duy·ªát';
        }

        // L·∫•y tr·∫°ng th√°i s·ª©c kh·ªèe
        const healthStatus = journalData.health_status || 'Kh√¥ng c√≥ th√¥ng tin';

        // L·∫•y s·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông hu·∫•n luy·ªán
        let trainingCount = 0;
        if (journalData.training_activities) {
            try {
                const trainingData = JSON.parse(journalData.training_activities);
                trainingCount = trainingData.length || 0;
            } catch (e) {
                trainingCount = 0;
            }
        }

        // T·∫°o text hi·ªÉn th·ªã v·ªõi th√¥ng tin chi ti·∫øt
        const displayText = `${formatDateToDDMMYYYY(journal.date)} | ${trainerName} | ${approvalStatus} | S·ª©c kh·ªèe: ${healthStatus} | ${trainingCount} ho·∫°t ƒë·ªông`;

        dateOptions += `<option value="${journal.date}" title="${displayText}">${displayText}</option>`;
    });



    // Hi·ªÉn th·ªã modal ch·ªçn ng√†y ƒë·ªÉ xem A4 PDF

    const modalHtml = '<div id="viewOldJournalModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; display: flex; align-items: center; justify-content: center;"><div style="background: white; padding: 30px; border-radius: 10px; max-width: 800px; width: 95%; max-height: 80vh; overflow-y: auto;"><h3 style="margin-top: 0; color: #333;">üìã XEM NH·∫¨T K√ù C≈® - CNV ' + currentDogForJournal + '</h3><p style="color: #666; margin-bottom: 20px;">T√¨m th·∫•y <strong>' + dogJournals.length + '</strong> nh·∫≠t k√Ω. Ch·ªçn ng√†y ƒë·ªÉ xem b·∫£n PDF A4:</p><div style="margin-bottom: 15px;"><label style="display: block; margin-bottom: 5px; font-weight: bold; color: #333;">üìÖ Ch·ªçn nh·∫≠t k√Ω:</label><select id="oldJournalDateSelect" style="width: 100%; padding: 12px; margin: 5px 0; border: 2px solid #ddd; border-radius: 8px; font-size: 14px; background: white; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">' + dateOptions + '</select></div><div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #007bff;"><h4 style="margin: 0 0 10px 0; color: #333; font-size: 14px;">‚ÑπÔ∏è Th√¥ng tin hi·ªÉn th·ªã:</h4><ul style="margin: 0; padding-left: 20px; color: #666; font-size: 13px;"><li><strong>Ng√†y:</strong> Ng√†y c·ªßa nh·∫≠t k√Ω</li><li><strong>Hu·∫•n luy·ªán vi√™n:</strong> Ng∆∞·ªùi ph·ª• tr√°ch</li><li><strong>Tr·∫°ng th√°i:</strong> ƒê√£ duy·ªát/Ch·ªù duy·ªát/B·ªã t·ª´ ch·ªëi</li><li><strong>S·ª©c kh·ªèe:</strong> T√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa ch√≥</li><li><strong>Ho·∫°t ƒë·ªông:</strong> S·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông hu·∫•n luy·ªán</li></ul></div><div style="text-align: right; margin-top: 25px; padding-top: 20px; border-top: 1px solid #eee;"><button onclick="closeOldJournalModal()" style="background: #6c757d; color: white; border: none; padding: 12px 24px; border-radius: 6px; margin-right: 10px; cursor: pointer; font-size: 14px; transition: background 0.3s;">H·ªßy</button><button onclick="viewSelectedOldJournal()" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 14px; transition: background 0.3s;">üìÑ Xem PDF A4</button></div></div></div>';



    // Th√™m modal v√†o DOM

    document.body.insertAdjacentHTML('beforeend', modalHtml);

    // Initialize Select2 on the dropdown after modal is added to DOM
    setTimeout(() => {
        const selectElement = document.getElementById('oldJournalDateSelect');
        if (selectElement && typeof $ !== 'undefined' && $.fn.select2) {
            console.log('Initializing Select2 on oldJournalDateSelect');
            $(selectElement).select2({
                placeholder: 'Ch·ªçn ng√†y xem nh·∫≠t k√Ω',
                allowClear: true,
                width: '100%',
                dropdownParent: $('#viewOldJournalModal'),
                language: {
                    noResults: function () {
                        return 'Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω n√†o';
                    },
                    searching: function () {
                        return 'ƒêang t√¨m ki·∫øm...';
                    }
                },
                templateResult: function (data) {
                    if (!data.id) {
                        return data.text;
                    }

                    // Simple template without custom styling to avoid conflicts
                    return data.text;
                },
                templateSelection: function (data) {
                    return data.text;
                }
            });
            console.log('Select2 initialized successfully on oldJournalDateSelect');
        } else {
            console.error('Select2 initialization failed on oldJournalDateSelect:', {
                selectElement: !!selectElement,
                jquery: typeof $ !== 'undefined',
                select2: typeof $ !== 'undefined' && $.fn.select2
            });
        }
    }, 200);

}



// Helper functions cho view old journals

function closeOldJournalModal() {

    const modal = document.getElementById('viewOldJournalModal');

    if (modal) {
        // Destroy Select2 instance before removing modal
        const selectElement = document.getElementById('oldJournalDateSelect');
        if (selectElement && typeof $ !== 'undefined' && $.fn.select2 && $(selectElement).hasClass('select2-hidden-accessible')) {
            console.log('Destroying Select2 instance on oldJournalDateSelect');
            $(selectElement).select2('destroy');
        }

        modal.remove();
    }

}



function viewSelectedOldJournal() {

    const selectedDate = document.getElementById('oldJournalDateSelect').value;

    if (!selectedDate) {

        alert('Vui l√≤ng ch·ªçn ng√†y ƒë·ªÉ xem nh·∫≠t k√Ω!');

        return;

    }



    // ƒê√≥ng modal

    closeOldJournalModal();



    // S·ª¨A: CHUY·ªÇN TR·ª∞C TI·∫æP SANG PDF VIEW TRONG C√ôNG TAB

    showPureA4JournalView(currentDogForJournal, selectedDate);

}

// Function to show training journal modal for AI search results
function showTrainingJournalModal(journal) {
    // Close AI search modal first
    closeAISearch();

    // Create modal HTML similar to viewOldJournalModal
    const modalHtml = `
        <div id="viewTrainingJournalModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; display: flex; align-items: center; justify-content: center;">
            <div style="background: white; padding: 30px; border-radius: 10px; max-width: 900px; width: 95%; max-height: 80vh; overflow-y: auto;">
                <h3 style="margin-top: 0; color: #333;">üìã NH·∫¨T K√ù HU·∫§N LUY·ªÜN - ${journal.dog_name}</h3>
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #007bff;">
                    <h4 style="margin: 0 0 10px 0; color: #333; font-size: 14px;">‚ÑπÔ∏è Th√¥ng tin nh·∫≠t k√Ω:</h4>
                    <ul style="margin: 0; padding-left: 20px; color: #666; font-size: 13px;">
                        <li><strong>Ng√†y:</strong> ${formatDateToDDMMYYYY(journal.journal_date)}</li>
                        <li><strong>Hu·∫•n luy·ªán vi√™n:</strong> ${journal.trainer_name || 'N/A'}</li>
                        <li><strong>Tr·∫°ng th√°i:</strong> ${journal.approval_status}</li>
                        <li><strong>S·ª©c kh·ªèe:</strong> ${journal.health_status || 'N/A'}</li>
                        <li><strong>Th·ªùi ti·∫øt:</strong> ${journal.weather_conditions || 'N/A'}</li>
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px;">üèÉ Ho·∫°t ƒë·ªông hu·∫•n luy·ªán:</h4>
                    <div style="background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 10px 0;">
                        ${journal.training_activities || 'Ch∆∞a c√≥ th√¥ng tin'}
                    </div>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px;">üçΩÔ∏è ChƒÉm s√≥c & nu√¥i d∆∞·ª°ng:</h4>
                    <div style="background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 10px 0;">
                        ${journal.care_activities || 'Ch∆∞a c√≥ th√¥ng tin'}
                    </div>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px;">üöî Ho·∫°t ƒë·ªông t√°c nghi·ªáp:</h4>
                    <div style="background: #fff3cd; padding: 15px; border-radius: 5px; margin: 10px 0;">
                        ${journal.operation_activities || 'Ch∆∞a c√≥ th√¥ng tin'}
                    </div>
                </div>
                
                ${journal.behavior_notes ? `
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px;">üìù Ghi ch√∫ h√†nh vi:</h4>
                    <div style="background: #f8d7da; padding: 15px; border-radius: 5px; margin: 10px 0;">
                        ${journal.behavior_notes}
                    </div>
                </div>
                ` : ''}
                
                ${journal.challenges ? `
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px;">‚ö†Ô∏è Th√°ch th·ª©c:</h4>
                    <div style="background: #f8d7da; padding: 15px; border-radius: 5px; margin: 10px 0;">
                        ${journal.challenges}
                    </div>
                </div>
                ` : ''}
                
                ${journal.next_goals ? `
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px;">üéØ M·ª•c ti√™u ti·∫øp theo:</h4>
                    <div style="background: #d1ecf1; padding: 15px; border-radius: 5px; margin: 10px 0;">
                        ${journal.next_goals}
                    </div>
                </div>
                ` : ''}
                
                <div style="text-align: right; margin-top: 25px; padding-top: 20px; border-top: 1px solid #eee;">
                    <button onclick="closeTrainingJournalModal()" style="background: #6c757d; color: white; border: none; padding: 12px 24px; border-radius: 6px; margin-right: 10px; cursor: pointer; font-size: 14px; transition: background 0.3s;">ƒê√≥ng</button>
                    <button onclick="exportTrainingJournalToPDF(${journal.id})" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 14px; transition: background 0.3s;">üìÑ Xu·∫•t PDF</button>
                </div>
            </div>
        </div>
    `;

    // Add modal to DOM
    document.body.insertAdjacentHTML('beforeend', modalHtml);
}

// Function to close training journal modal
function closeTrainingJournalModal() {
    const modal = document.getElementById('viewTrainingJournalModal');
    if (modal) {
        modal.remove();
    }
}

// Function to export training journal to PDF
function exportTrainingJournalToPDF(journalId) {
    // Close modal first
    closeTrainingJournalModal();

    // For now, show an alert. In a real implementation, this would generate a PDF
    alert(`Ch·ª©c nƒÉng xu·∫•t PDF cho nh·∫≠t k√Ω ID ${journalId} s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong phi√™n b·∫£n ti·∫øp theo.`);
}



function resetJournal() {

    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën t·∫£i l·∫°i form? T·∫•t c·∫£ d·ªØ li·ªáu ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t.')) {

        showJournalEditForm(currentDogForJournal);

    }

}



// Function to export journal to PDF

async function exportJournalToPDF(dogName, date) {
    try {
        console.log('üìÑ Starting PDF export for:', dogName, date);

        // Get current journal data from the form (not from database)
        const journalData = collectJournalFormData();
        if (!journalData) {
            throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu nh·∫≠t k√Ω ƒë·ªÉ xu·∫•t');
        }

        console.log('‚úÖ Collected form data for PDF export:', journalData);
        console.log('üîç Journal data structure:', {
            generalInfo: journalData.generalInfo,
            trainingBlocks: journalData.trainingBlocks,
            operationBlocks: journalData.operationBlocks,
            meals: journalData.meals,
            care: journalData.care,
            health: journalData.health
        });

        // Use the same display format as showPureA4JournalView
        await generatePDFFromA4View(dogName, date, journalData);

    } catch (error) {
        console.error('‚ùå PDF Export Error:', error);
        alert('‚ùå L·ªói khi xu·∫•t PDF: ' + error.message + '\n\nS·ª≠ d·ª•ng Ctrl+P ƒë·ªÉ in th√†nh PDF.');
    }
}

// Generate PDF from A4 view (same format as viewSelectedManagerPastJournal)
async function generatePDFFromA4View(dogName, date, journalData) {
    try {
        console.log('üìÑ Generating PDF from A4 view for:', dogName, date);

        // Safe access to journal data with proper null checks
        const generalInfo = journalData.generalInfo || {};
        const approval = journalData.approval || {};
        const hlvSignature = approval.hlvSignature || {};
        const leaderSignature = approval.leaderSignature || {};
        const substituteSignature = approval.substituteSignature || {};
        const meals = journalData.meals || {};
        const health = journalData.health || {};
        const care = journalData.care || {};

        // Simple fallback HTML if data is missing
        if (!generalInfo.dogName) {
            // Use provided parameters as fallback
            generalInfo.dogName = dogName || 'N/A';
            generalInfo.date = date || 'N/A';
            generalInfo.hlv = 'N/A';
        }

        // Render signature images asynchronously (only if signatures exist)
        const hlvSignatureHTML = hlvSignature.name ? await renderSignatureImageForA4(hlvSignature, 'hlv') : '<div style="min-height: 60px; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center; color: #666;">Ch∆∞a k√Ω</div>';
        const leaderSignatureHTML = leaderSignature.name ? await renderSignatureImageForA4(leaderSignature, 'leader') : '<div style="min-height: 60px; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center; color: #666;">Ch∆∞a duy·ªát</div>';
        const substituteSignatureHTML = substituteSignature.name ? await renderSignatureImageForA4(substituteSignature, 'substitute') : '';

        // Build HTML template (same as showPureA4JournalView)
        const htmlTemplate = `
        <div class="a4-journal-view" style="background: white; max-width: 210mm; margin: 20px auto; padding: 20mm; font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.4; box-shadow: 0 0 20px rgba(0,0,0,0.1); min-height: 297mm;">
            <div class="a4-header" style="text-align: center; border-bottom: 2px solid #000; padding-bottom: 20px; margin-bottom: 30px;">
                <h1 style="font-size: 18px; font-weight: bold; margin: 0 0 10px 0;">T·ªîNG C·ª§C H·∫¢I QUAN</h1>
                <h2 style="font-size: 16px; font-weight: bold; margin: 0 0 20px 0;">S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN CH√ì NGHI·ªÜP V·ª§</h2>
                <div style="display: flex; justify-content: space-between; margin-top: 20px;">
                    <div><strong>CNV:</strong> ${generalInfo.dogName || 'N/A'}</div>
                    <div><strong>Ng√†y:</strong> ${formatDateToDDMMYYYY(generalInfo.date || '')}</div>
                </div>
                <div style="margin-top: 10px;"><strong>Hu·∫•n luy·ªán vi√™n:</strong> ${generalInfo.hlv || 'N/A'}</div>
            </div>
            
            <div class="a4-section" style="margin-bottom: 30px;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">I. HO·∫†T ƒê·ªòNG HU·∫§N LUY·ªÜN</h3>
                ${renderTrainingBlocks(journalData.trainingBlocks || [])}
                <div style="margin-top: 20px;">
                    <strong>ƒê√°nh gi√° chung c·ªßa Hu·∫•n luy·ªán vi√™n:</strong><br>
                    <div style="margin-top: 10px; padding: 10px; border: 1px solid #ccc; min-height: 60px;">
                        ${journalData.hlvComment || 'Ch∆∞a c√≥ ƒë√°nh gi√°'}
                    </div>
                </div>
            </div>
            
            <div class="a4-section" style="margin-bottom: 30px;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">II. CHƒÇM S√ìC & NU√îI D∆Ø·ª†NG</h3>
                <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px; width: 15%;"><strong>B·ªØa tr∆∞a:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.lunch?.time || ''} - ${meals.lunch?.amount || ''}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn tr∆∞a:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.lunch?.food || 'Ch∆∞a ghi'}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>B·ªØa chi·ªÅu:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.dinner?.time || ''} - ${meals.dinner?.amount || ''}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn chi·ªÅu:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${meals.dinner?.food || 'Ch∆∞a ghi'}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>ChƒÉm s√≥c:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${renderCareActivities(care)}</td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #000; padding: 8px;"><strong>S·ª©c kh·ªèe:</strong></td>
                        <td style="border: 1px solid #000; padding: 8px;">${health.status || 'B√¨nh th∆∞·ªùng'}</td>
                    </tr>
                </table>
                ${health.other ? `<p><strong>Ghi ch√∫ s·ª©c kh·ªèe:</strong> ${health.other}</p>` : ''}
            </div>
            
            <div class="a4-section" style="margin-bottom: 30px;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">III. HO·∫†T ƒê·ªòNG T√ÅC NGHI·ªÜP</h3>
                ${renderOperationBlocks(journalData.operationBlocks || [])}
            </div>
            
            <div class="a4-section" style="margin-bottom: 30px; page-break-inside: avoid;">
                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">IV. DUY·ªÜT & K√ù</h3>
                <div style="display: flex; justify-content: space-between; margin-top: 30px;">
                    <div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 150px;">
                        <strong>HU·∫§N LUY·ªÜN VI√äN</strong><br><br>
                        ${hlvSignatureHTML}
                    </div>
                    <div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 150px;">
                        <strong>L√ÉNH ƒê·∫†O ƒê∆†N V·ªä</strong><br><br>
                        ${leaderSignatureHTML}
                        ${leaderSignature.name && approval.leaderComment ?
                `<div style="margin-top: 10px; font-size: 12px; color: #666;">
                                <strong>Nh·∫≠n x√©t:</strong> ${approval.leaderComment}
                            </div>` : ''
            }
                    </div>
                </div>
                ${substituteSignature.name ?
                `<div style="width: 100%; text-align: center; border: 1px solid #000; padding: 20px; margin-top: 20px; min-height: 100px;">
                        <strong>HLV TR·ª∞C THAY</strong><br><br>
                        ${substituteSignatureHTML}
                        ${substituteSignature.comment ?
                    `<div style="margin-top: 10px; font-size: 12px; color: #666;">
                                <strong>√ù ki·∫øn:</strong> ${substituteSignature.comment}
                            </div>` : ''
                }
                    </div>` : ''
            }
                
                <!-- Add note for form data (no signatures yet) -->
                ${!hlvSignature.name && !leaderSignature.name ?
                `<div style="width: 100%; text-align: center; margin-top: 20px; padding: 10px; background: #f8f9fa; border: 1px dashed #ccc; color: #666;">
                        <strong>üìù Ghi ch√∫:</strong> ƒê√¢y l√† b·∫£n nh√°p t·ª´ form. Ch·ªØ k√Ω s·∫Ω ƒë∆∞·ª£c th√™m sau khi l∆∞u v√† duy·ªát.
                    </div>` : ''
            }
            </div>
        </div>`;

        // Create a temporary container for PDF generation
        const tempContainer = document.createElement('div');
        tempContainer.style.position = 'absolute';
        tempContainer.style.left = '-9999px';
        tempContainer.style.top = '0';
        tempContainer.innerHTML = htmlTemplate;
        document.body.appendChild(tempContainer);

        console.log('üîç HTML Template generated:', htmlTemplate.substring(0, 500) + '...');
        console.log('üîç Temp container content length:', tempContainer.innerHTML.length);

        // Add print styles
        const printStyles = `
            <style>
                @media print { 
                    .no-print { display: none !important; } 
                    body { margin: 0; padding: 0; } 
                    .a4-journal-view { 
                        max-width: none !important; 
                        margin: 0 !important; 
                        padding: 15mm !important; 
                        box-shadow: none !important; 
                        font-size: 12px !important; 
                    } 
                } 
                @media screen { 
                    .a4-journal-view { 
                        background: white; 
                        max-width: 210mm; 
                        margin: 20px auto; 
                        padding: 20mm; 
                        font-family: "Times New Roman", serif; 
                        font-size: 14px; 
                        line-height: 1.4; 
                        box-shadow: 0 0 20px rgba(0,0,0,0.1); 
                        min-height: 297mm; 
                    } 
                }
            </style>
        `;
        tempContainer.innerHTML += printStyles;

        // Wait a bit for images to load
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Show preview option first
        const showPreview = confirm('üìÑ PDF ƒë√£ s·∫µn s√†ng!\n\nB·∫°n mu·ªën:\n‚Ä¢ OK: Xem tr∆∞·ªõc PDF trong tab m·ªõi\n‚Ä¢ Cancel: T·∫£i PDF tr·ª±c ti·∫øp');

        if (showPreview) {
            // Show preview in new tab
            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <html>
                    <head>
                        <title>Xem tr∆∞·ªõc PDF - ${dogName} - ${date}</title>
                        ${printStyles}
                        <style>
                            body { margin: 0; padding: 20px; background: #f5f5f5; }
                            .preview-header { background: #2196F3; color: white; padding: 15px; margin: -20px -20px 20px -20px; text-align: center; }
                            .preview-actions { text-align: center; margin: 20px 0; }
                            .preview-actions button { margin: 0 10px; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
                            .btn-download { background: #4CAF50; color: white; }
                            .btn-print { background: #FF9800; color: white; }
                            .btn-close { background: #f44336; color: white; }
                        </style>
                    </head>
                    <body>
                        <div class="preview-header">
                            <h2>üìÑ Xem tr∆∞·ªõc PDF - Nh·∫≠t k√Ω ${dogName} - ${date}</h2>
                        </div>
                        <div class="preview-actions">
                            <button class="btn-download" onclick="downloadPDF()">üì• T·∫£i PDF</button>
                            <button class="btn-print" onclick="window.print()">üñ®Ô∏è In PDF</button>
                            <button class="btn-close" onclick="window.close()">‚ùå ƒê√≥ng</button>
                        </div>
                        ${htmlTemplate}
                        <script>
                            function downloadPDF() {
                                // Trigger download
                                window.print();
                            }
                        </script>
                    </body>
                </html>
            `);
            previewWindow.document.close();
            console.log('üîç PDF preview opened in new tab');
            return; // Don't proceed with automatic download
        }

        // Generate PDF using html2pdf
        if (typeof html2pdf !== 'undefined') {
            console.log('‚úÖ html2pdf library is available');
            const opt = {
                margin: 10,
                filename: `Nhat_ky_${dogName}_${date}.pdf`,
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2, useCORS: true },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
            };

            console.log('üîç Starting html2pdf generation...');
            await html2pdf().set(opt).from(tempContainer).save();
            console.log('‚úÖ PDF generated successfully');

            // Show success message with more details
            alert(`‚úÖ ƒê√£ xu·∫•t PDF th√†nh c√¥ng!\n\nüìÑ T√™n file: Nhat_ky_${dogName}_${date}.pdf\nüìÅ V·ªã tr√≠: Th∆∞ m·ª•c Downloads\n\nN·∫øu kh√¥ng th·∫•y file, h√£y ki·ªÉm tra th∆∞ m·ª•c Downloads ho·∫∑c thanh th√¥ng b√°o tr√¨nh duy·ªát.`);

            // Also try to open the PDF in a new tab for immediate viewing
            try {
                const pdfBlob = await html2pdf().set(opt).from(tempContainer).outputPdf('blob');
                const pdfUrl = URL.createObjectURL(pdfBlob);
                window.open(pdfUrl, '_blank');
                console.log('üîç PDF opened in new tab for immediate viewing');
            } catch (openError) {
                console.log('‚ö†Ô∏è Could not open PDF in new tab:', openError);
            }
        } else {
            console.log('‚ö†Ô∏è html2pdf library not available, using print fallback');
            // Fallback: open print dialog
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                    <head>
                        <title>Nh·∫≠t k√Ω ${dogName} - ${date}</title>
                        ${printStyles}
                    </head>
                    <body>
                        ${htmlTemplate}
                    </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        // Clean up
        document.body.removeChild(tempContainer);

    } catch (error) {
        console.error('‚ùå Error generating PDF from A4 view:', error);
        throw error;
    }
}

// Basic PDF export using html2canvas as fallback
function exportBasicJournalToPDF(dogName, date) {
    try {
        const content = document.getElementById('content');
        if (!content) {
            throw new Error('Kh√¥ng t√¨m th·∫•y n·ªôi dung ƒë·ªÉ xu·∫•t');
        }

        // Hide buttons during PDF generation
        const buttons = content.querySelectorAll('button');
        buttons.forEach(btn => btn.style.display = 'none');

        html2canvas(content, {
            scale: 2,
            useCORS: true,
            backgroundColor: '#ffffff',
            width: content.scrollWidth,
            height: content.scrollHeight
        }).then(canvas => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jspdf.jsPDF('p', 'mm', 'a4');

            const imgWidth = 210;
            const pageHeight = 295;
            const imgHeight = (canvas.height * imgWidth) / canvas.width;
            let heightLeft = imgHeight;
            let position = 0;

            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;

            while (heightLeft >= 0) {
                position = heightLeft - imgHeight;
                pdf.addPage();
                pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
            }

            const fileName = `Nhat_ky_${dogName}_${date}.pdf`;
            pdf.save(fileName);

            // Restore buttons
            buttons.forEach(btn => btn.style.display = '');

            alert('‚úÖ ƒê√£ xu·∫•t PDF th√†nh c√¥ng!');
        });

    } catch (error) {
        console.error('‚ùå Basic PDF Export Error:', error);
        alert('‚ùå L·ªói khi xu·∫•t PDF: ' + error.message + '\n\nS·ª≠ d·ª•ng Ctrl+P ƒë·ªÉ in th√†nh PDF.');
    }
}

// Helper function to collect current journal form data
function collectJournalFormData() {
    try {
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const hlv = document.getElementById('journal_hlv').value;

        console.log('üîç Form elements found:', {
            dogName: dogName,
            date: date,
            hlv: hlv,
            dogNameElement: document.getElementById('journal_dog_name'),
            dateElement: document.getElementById('journal_date'),
            hlvElement: document.getElementById('journal_hlv')
        });

        if (!dogName || !date) {
            console.log('‚ö†Ô∏è Missing required fields:', { dogName, date });
            return null;
        }

        const trainingBlocks = collectTrainingBlocksData();
        const operationBlocks = collectOperationBlocksData();
        const meals = collectMealsData();
        const care = collectCareData();
        const health = collectHealthData();

        console.log('üîç Collected data:', {
            trainingBlocks,
            operationBlocks,
            meals,
            care,
            health
        });

        return {
            generalInfo: {
                dogName: dogName,
                date: date,
                hlv: hlv
            },
            trainingBlocks: trainingBlocks,
            operationBlocks: operationBlocks,
            meals: meals,
            care: care,
            health: health,
            hlvComment: collectHLVComment(),
            otherIssues: collectOtherIssues()
        };
    } catch (error) {
        console.error('Error collecting journal form data:', error);
        return null;
    }
}



// Functions for viewing journal for approval (Manager mode) - S·ª¨A: FIX MANAGER WORKFLOW

function viewJournalForApproval(journalKey) {

    console.log('üëÄ Manager viewing journal for approval:', journalKey);



    // S·ª¨A: Chuy·ªÉn sang PDF view ƒë·ªÉ Manager c√≥ th·ªÉ xem v√† duy·ªát

    showA4JournalViewFromKey(journalKey);

}



async function approveJournalAsManager(journalKey) {

    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát nh·∫≠t k√Ω n√†y?\n\nSau khi duy·ªát, nh·∫≠t k√Ω s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh v√† HLV s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o.')) {

        try {

            // Get journal data from database instead of localStorage
            const journalData = await getJournalFromDatabase(journalKey);



            if (journalData) {

                const currentTime = new Date().toISOString();



                if (!journalData.approval) journalData.approval = {};



                // S·ª¨A: TH√äM CH·ªÆ K√ù MANAGER V·ªöI CH·ªÆ K√ù TH·ª∞C

                const signatureData = await getUserSignature(currentUserName, currentUserRole);



                journalData.approval.leaderComment = 'ƒê√£ duy·ªát b·ªüi ' + currentUserName;

                journalData.approval.leaderStatus = 'ƒê√£ duy·ªát';

                journalData.approval.leaderApprovalTime = currentTime;

                journalData.approval.status = 'APPROVED';

                journalData.approval.approvedBy = currentUserName;



                // Add manager signature v·ªõi ch·ªØ k√Ω th·ª±c

                journalData.approval.leaderSignature = {

                    name: currentUserName,

                    role: currentUserRole,

                    timestamp: currentTime,

                    id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),

                    hash: btoa(unescape(encodeURIComponent(currentUserName + '_MANAGER_' + currentTime))),

                    verified: true,

                    digitalSignature: generateDigitalSignature(currentUserName, currentUserRole, currentTime)

                };



                // TODO: Save to database



                // S·ª¨A: REMOVE T·ª™ PENDING APPROVALS

                // TODO: Get from database
                const pendingJournals = [];

                const filteredJournals = pendingJournals.filter(j => j.key !== journalKey);

                // Save pending journals to database
                await savePendingJournalsToDatabase(filteredJournals);



                // S·ª¨A: T·∫†O NOTIFICATION CHO HLV

                createTrainerNotification(journalData, 'APPROVED');



                // Notify dashboard v·ªÅ manager approval

                notifyDashboardUpdate();



                alert('üéâ Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!\n\n' +

                    '‚úÖ Ch·ªØ k√Ω Manager ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ\n' +

                    'üì¢ HLV ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o\n' +

                    'üìä Dashboard s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');



                console.log('‚úÖ Manager approval completed for:', journalKey);



                // Refresh manager view

                showAllPendingJournalsForManager();

            }

        } catch (error) {

            console.error('‚ùå Error in approveJournalAsManager:', error);

            alert('C√≥ l·ªói khi duy·ªát nh·∫≠t k√Ω: ' + error.message);

        }

    }

}



// S·ª¨A: Function T·∫†O NOTIFICATION CHO TRAINER

async function createTrainerNotification(journalData, action) {
    try {
        console.log('üì¢ Creating trainer notification for action:', action);

        // Load trainer notifications from database
        const trainerNotifications = await getTrainerNotificationsFromDatabase();

        const notification = {
            id: 'notif_trainer_' + Date.now(),
            type: 'JOURNAL_STATUS_UPDATE',
            title: action === 'APPROVED' ? 'Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c duy·ªát' : 'Nh·∫≠t k√Ω b·ªã t·ª´ ch·ªëi',
            message: `Nh·∫≠t k√Ω CNV ${journalData.generalInfo.dogName} (${journalData.generalInfo.date}) ƒë√£ ƒë∆∞·ª£c ${action === 'APPROVED' ? 'duy·ªát' : 't·ª´ ch·ªëi'} b·ªüi Manager`,
            journalKey: 'journal_' + journalData.generalInfo.dogName + '_' + journalData.generalInfo.date,
            action: action,
            approver: currentUserName,
            createdAt: new Date().toISOString(),
            read: false,
            forTrainer: journalData.generalInfo.hlv
        };

        trainerNotifications.unshift(notification);

        // Gi·ªõi h·∫°n s·ªë notification
        if (trainerNotifications.length > 100) {
            trainerNotifications.splice(100);
        }

        // Save trainer notifications to database
        await saveTrainerNotificationsToDatabase(trainerNotifications);

        console.log('üì¢ Created trainer notification:', notification.id);
    } catch (error) {
        // Don't fail the approval process if notifications fail
        console.warn('‚ö†Ô∏è Failed to create trainer notification (non-blocking):', error.message);
        console.log('üì¢ Approval process will continue without notification');
    }
}



// S·ª¨A CH·ªÆ K√ù TH·ª∞C: Load approval data - S·ª¨A: Hi·ªÉn th·ªã ch·ªØ k√Ω th·ª±c khi load l·∫°i

function loadApprovalData(approval) {

    // Load HLV signature

    if (approval.hvlSignature) {

        // S·ª¨A: ƒê·ª¢I DOM READY TR∆Ø·ªöC KHI THAO T√ÅC

        setTimeout(async () => {

            const hvlSignatureDisplay = document.getElementById('hvl-signature-display');

            const submissionStatus = document.querySelector('.submission-status');



            if (hvlSignatureDisplay) {

                // S·ª¨A: S·ª≠ d·ª•ng ch·ªØ k√Ω th·ª±c t·ª´ th∆∞ m·ª•c signatures

                const signatureData = getUserSignature(approval.hvlSignature.name, approval.hvlSignature.role);

                const signatureHTML = await generateSignatureHTML(signatureData, approval.hvlSignature.timestamp);

                hvlSignatureDisplay.innerHTML = signatureHTML;

            }



            if (submissionStatus) {

                submissionStatus.textContent = '‚úÖ ƒê√£ k√Ω';

                submissionStatus.style.color = 'green';

            }

        }, 300);

    }



    // Load leader signature

    if (approval.leaderSignature) {

        setTimeout(async () => {

            const leaderSignatureDisplay = document.getElementById('leader-signature-display');

            const approvalStatus = document.querySelector('.approval-status');



            if (leaderSignatureDisplay) {

                // S·ª¨A: S·ª≠ d·ª•ng ch·ªØ k√Ω th·ª±c t·ª´ th∆∞ m·ª•c signatures

                const signatureData = getUserSignature(approval.leaderSignature.name, approval.leaderSignature.role);

                const signatureHTML = await generateSignatureHTML(signatureData, approval.leaderSignature.timestamp);

                leaderSignatureDisplay.innerHTML = signatureHTML;

            }



            if (approvalStatus) {

                approvalStatus.textContent = '‚úÖ ƒê√£ duy·ªát';

                approvalStatus.style.color = 'green';

            }

        }, 300);

    }



    // Load substitute signature

    if (approval.substituteSignature) {

        setTimeout(async () => {

            const substituteSignatureDisplay = document.getElementById('substitute-signature-display');

            const substituteStatus = document.querySelector('.substitute-hvl-status');



            if (substituteSignatureDisplay) {

                // S·ª¨A: S·ª≠ d·ª•ng ch·ªØ k√Ω th·ª±c t·ª´ th∆∞ m·ª•c signatures

                const signatureData = getUserSignature(approval.substituteSignature.name, approval.substituteSignature.role);

                const signatureHTML = await generateSignatureHTML(signatureData, approval.substituteSignature.timestamp);

                substituteSignatureDisplay.innerHTML = signatureHTML;

            }



            if (substituteStatus) {

                substituteStatus.textContent = '‚úÖ ƒê√£ k√Ω';

                substituteStatus.style.color = 'green';

            }

        }, 300);

    }



    // Load leader comment

    setTimeout(() => {

        const leaderCommentField = document.getElementById('leader_comment');

        if (leaderCommentField && approval.leaderComment) {

            leaderCommentField.value = approval.leaderComment;

        }

    }, 300);

}



// TH√äM FUNCTION DEBUG CHO NG∆Ø·ªúI D√ôNG

function debugSignatureSystem() {






    // Check DOM elements

    const hvlDisplay = document.getElementById('hvl-signature-display');

    const submissionStatus = document.querySelector('.submission-status');

    const submitBtn = document.querySelector('.btn-submit-hvl');






    // Check signature database - now using database
    // Signatures are stored in database, no need to check localStorage



    // Test getUserSignature

    try {

        const testSig = getUserSignature(currentUserName || 'Test User', currentUserRole || 'TRAINER');


    } catch (error) {


    }




}



// Test function cho n√∫t K√Ω

function testHvlSignature() {





    // G·ªçi function th·ª±c

    submitHvlSignature();

}



// Script.js loaded successfully



// ===== T√ìM T·∫ÆT C√ÅC S·ª¨A ƒê·ªîI CH√çNH =====





// ===== KI·ªÇM TRA T√çNH NƒÇNG HO·∫†T ƒê·ªòNG =====

async function checkSystemHealth() {

    const issues = [];



    // Ki·ªÉm tra signature database - now using database
    // Signatures are stored in database, no need to check localStorage



    // Ki·ªÉm tra users database

    // Load users from database
    const users = await getUsersFromDatabase();

    const quynhUser = users.find(u => u.username === 'Quynh');



    if (!quynhUser) {

        issues.push('‚ùå User Quynh kh√¥ng t·ªìn t·∫°i');

    } else if (quynhUser.name !== 'Ho√†ng Tr·ªçng Qu·ª≥nh') {

        issues.push('‚ùå T√™n user Quynh ch∆∞a ƒë√∫ng: ' + quynhUser.name);

    }



    // Ki·ªÉm tra DOM elements quan tr·ªçng

    if (!document.getElementById('hvl-signature-display')) {

        issues.push('‚ùå Signature display element kh√¥ng t·ªìn t·∫°i');

    }



    if (issues.length === 0) {

        console.log('‚úÖ System Health Check: T·∫§T C·∫¢ T√çNH NƒÇNG HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG');

    } else {

        console.warn('‚ö†Ô∏è System Health Issues:', issues);

    }



    return issues.length === 0;

}



// Ch·∫°y ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng sau khi load xong

setTimeout(() => {

    checkSystemHealth();

}, 2000);



// S·ª¨A: Function ri√™ng ƒë·ªÉ update journal menu cho Manager

async function updateJournalSubMenuForManager() {

    const journalMenu = document.getElementById('journal-sub-menu');

    try {
        const response = await fetch('/api/journals');
        if (response.ok) {
            const result = await response.json();
            if (result.success && result.data) {
                result.data.forEach(journal => {
                    allJournals++;
                    const data = convertDatabaseToFrontendFormat(journal);




                    if (data.approval?.hvlSignature) {

                        signedJournals++;

                        if (!data.approval?.leaderSignature) {

                            pendingDetails.push({

                                key: `journal_${journal.dog_name}_${journal.journal_date}`,

                                dogName: data.generalInfo?.dogName,

                                date: data.generalInfo?.date,

                                trainer: data.generalInfo?.hlv

                            });

                        }

                    }

                    if (data.approval?.leaderSignature) {

                        approvedJournals++;

                    }

                });
            }
        }
    } catch (e) {
    }



    const pendingList = await getPendingJournalsFromDatabase();



    // Force refresh menu

    refreshDynamicMenus();

}



// S·ª¨A: Function ri√™ng ƒë·ªÉ update journal menu cho Manager

async function updateJournalSubMenuForManager() {

    const journalMenu = document.getElementById('journal-sub-menu');

    if (!journalMenu) {

        console.error('‚ùå journal-sub-menu element not found');

        return;

    }



    console.log('üîß Creating manager journal menu...');



    // ƒê·∫øm s·ªë journal pending th·ª±c t·∫ø t·ª´ database

    let actualPendingCount = 0;

    try {
        const response = await fetch('/api/journals/pending');
        if (response.ok) {
            const pendingJournals = await response.json();
            actualPendingCount = pendingJournals.length;
        }
    } catch (e) {
        console.error('Error fetching pending journals from database:', e);
    }



    console.log('üìä Found pending journals:', actualPendingCount);



    // S·ª¨A: T·∫°o HTML tr·ª±c ti·∫øp cho Manager menu

    journalMenu.innerHTML = `

        <li class="sub-item manager-approval" onclick="showAllPendingJournalsForManager()" style="color: #ff9800; font-weight: bold; cursor: pointer; padding: 12px; border-radius: 5px; background: linear-gradient(135deg, #fff3e0, #ffe0b2); border: 1px solid #ff9800; margin: 5px 0; display: block;">

            üìã Duy·ªát nh·∫≠t k√Ω ch·ªù ph√™ duy·ªát (${actualPendingCount})

        </li>

        <li class="sub-item manager-stats" onclick="showManagerStatistics()" style="color: #9c27b0; cursor: pointer; padding: 10px; border-radius: 5px; background: #f3e5f5; border: 1px solid #9c27b0; margin: 5px 0; display: block;">

            üìä Th·ªëng k√™ t·ªïng quan

        </li>

    `;



    console.log('‚úÖ Manager journal menu created successfully');

}



// Script.js loaded successfully



// S·ª¨A: Function kh√¥i ph·ª•c layout ho√†n to√†n

function restoreNormalLayout() {

    console.log('üîß Restoring normal layout...');



    // Kh√¥i ph·ª•c t·∫•t c·∫£ elements c√≥ th·ªÉ b·ªã ·∫©n

    const elementsToRestore = [

        '#toggleReadButton',

        '.header',

        '.sidebar',

        '#dashboardBanner',

        '.journal-header-actions',

        '.journal-action-buttons'

    ];



    elementsToRestore.forEach(selector => {

        const element = document.querySelector(selector);

        if (element) {

            element.style.display = '';

            element.style.visibility = '';

            element.style.opacity = '';

        }

    });



    // Reset content container

    const content = document.getElementById('content');

    if (content) {

        content.style.cssText = '';

        content.style.display = 'block';

        content.style.position = 'relative';

        content.style.zIndex = '1';

        content.style.width = 'auto';

        content.style.height = 'auto';

        content.style.margin = '0';

        content.style.padding = '20px';

        content.style.overflow = 'visible';

    }



    // Reset title

    const title = document.getElementById('title');

    if (title) {

        title.style.display = 'block';

    }



    console.log('‚úÖ Layout restored successfully');

}



// S·ª¨A: Function quay l·∫°i Manager view

function returnToManagerView() {

    console.log('üîÑ Returning to Manager view...');



    // Kh√¥i ph·ª•c layout ho√†n to√†n

    restoreNormalLayout();



    // Quay v·ªÅ manager pending journals view

    setTimeout(() => {

        if (currentUserRole === 'MANAGER') {

            showAllPendingJournalsForManager();

        } else {

            returnToJournalList();

        }

    }, 100);

}



// S·ª¨A: Function k√Ω duy·ªát v·ªõi nh·∫≠n x√©t v√† ch·ªØ k√Ω th·ª±c

async function approveJournalWithComment(journalKey) {

    // L·∫•y nh·∫≠n x√©t t·ª´ textarea

    const commentTextarea = document.getElementById(`managerComment_${journalKey}`);

    const managerComment = commentTextarea ? commentTextarea.value.trim() : '';



    if (!managerComment) {

        alert('Vui l√≤ng nh·∫≠p nh·∫≠n x√©t tr∆∞·ªõc khi k√Ω duy·ªát!');

        return;

    }



    if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën k√Ω duy·ªát nh·∫≠t k√Ω n√†y?\n\nNh·∫≠n x√©t: "${managerComment}"\n\nSau khi k√Ω, nh·∫≠t k√Ω s·∫Ω ƒë∆∞·ª£c ho√†n th√†nh v√† HLV s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o.`)) {

        try {
            console.log('üîç Starting approval process for journal:', journalKey);
            console.log('üîç Current user info:', { name: currentUserName, role: currentUserRole });

            // Check if user info is available
            if (!currentUserName || !currentUserRole) {
                throw new Error('Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng ƒë·∫ßy ƒë·ªß. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }

            // Get journal data from database instead of localStorage
            const journalData = await getJournalFromDatabase(journalKey);
            console.log('üîç Retrieved journal data:', journalData);



            if (journalData) {

                const currentTime = new Date().toISOString();



                if (!journalData.approval) journalData.approval = {};



                // S·ª¨A: L·∫•y ch·ªØ k√Ω th·ª±c c·ªßa Manager
                console.log('üîç Getting signature for user:', currentUserName, 'role:', currentUserRole);
                const signatureData = await getUserSignature(currentUserName, currentUserRole);
                console.log('üìã Manager signature data:', signatureData);



                // T·∫°o hash an to√†n cho Manager

                let hashString = '';

                try {

                    hashString = btoa(unescape(encodeURIComponent(currentUserName + '_MANAGER_' + currentTime)));

                } catch (error) {

                    console.warn('Hash encoding error, using fallback:', error);

                    hashString = 'HASH_MANAGER_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

                }



                // C·∫≠p nh·∫≠t th√¥ng tin duy·ªát

                journalData.approval.leaderComment = managerComment; // S·ª¨A: S·ª≠ d·ª•ng nh·∫≠n x√©t th·ª±c t·∫ø

                journalData.approval.leaderStatus = 'ƒê√£ duy·ªát';

                journalData.approval.leaderApprovalTime = currentTime;

                journalData.approval.status = 'APPROVED';

                journalData.approval.approvedBy = currentUserName;



                // S·ª¨A: T·∫°o ch·ªØ k√Ω Manager v·ªõi CH·ªÆ K√ù TH·ª∞C

                journalData.approval.leaderSignature = {

                    name: currentUserName,

                    role: currentUserRole,

                    timestamp: currentTime,

                    id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),

                    hash: hashString,

                    verified: true,

                    digitalSignature: generateDigitalSignature(currentUserName, currentUserRole, currentTime),

                    comment: managerComment, // S·ª¨A: L∆∞u nh·∫≠n x√©t v√†o ch·ªØ k√Ω

                    signatureImage: signatureData.signatureImage, // S·ª¨A: L∆∞u ƒë∆∞·ªùng d·∫´n ch·ªØ k√Ω th·ª±c

                    userId: signatureData.userId // S·ª¨A: L∆∞u ID ng∆∞·ªùi d√πng

                };



                // Save to database - get journal ID directly from journal key
                try {
                    // Extract journal ID directly from journal key (new format: journal_dogName_date_id)
                    const keyParts = journalKey.replace('journal_', '').split('_');
                    const journalId = keyParts[keyParts.length - 1]; // Last part is the journal ID

                    console.log('üîç Extracted journal ID from key:', journalId);
                    console.log('üîç Journal key:', journalKey);

                    // Use the proper approval API endpoint instead of full update
                    // Get current user ID from database
                    let approverId = 1; // Default fallback
                    try {
                        const userResponse = await fetch('/api/users');
                        if (userResponse.ok) {
                            const userData = await userResponse.json();
                            if (userData.success) {
                                const currentUser = userData.data.find(u => u.name === currentUserName || u.username === currentUserName);
                                if (currentUser) {
                                    approverId = currentUser.id;
                                }
                            }
                        }
                    } catch (error) {
                        console.warn('Could not get current user ID, using fallback:', error);
                    }

                    const approvalData = {
                        approver_id: approverId,
                        approved: true,
                        rejection_reason: null,
                        leader_signature: JSON.stringify(journalData.approval.leaderSignature),
                        leader_signature_timestamp: journalData.approval.leaderSignature.timestamp
                    };

                    console.log('üîç Sending approval data to API:', approvalData);
                    console.log('üîç Signature data being sent:', {
                        leader_signature: approvalData.leader_signature,
                        leader_signature_timestamp: approvalData.leader_signature_timestamp
                    });

                    const response = await fetch(`/api/journals/${journalId}/approve`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(approvalData)
                    });

                    if (response.ok) {
                        console.log('‚úÖ Journal approval saved to database');
                    } else {
                        const errorData = await response.json();
                        console.error('‚ùå Failed to save journal approval to database:', errorData);
                    }
                } catch (error) {
                    console.warn('Failed to save journal approval to database:', error);
                }

                // Remove t·ª´ pending approvals
                // TODO: Update journal status in database to APPROVED



                // T·∫°o notification cho HLV

                createTrainerNotification(journalData, 'APPROVED');



                // Notify dashboard

                notifyDashboardUpdate();



                alert('üéâ Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c k√Ω duy·ªát th√†nh c√¥ng!\n\n' +

                    '‚úÖ Ch·ªØ k√Ω Manager ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ\n' +

                    `üí¨ Nh·∫≠n x√©t: "${managerComment}"\n` +

                    'üì¢ HLV ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o\n' +

                    'üìä Dashboard s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');



                console.log('‚úÖ Manager approval with comment completed for:', journalKey);



                // Refresh manager view

                showAllPendingJournalsForManager();

            }

        } catch (error) {

            console.error('‚ùå Error in approveJournalWithComment:', error);
            console.error('‚ùå Error stack:', error.stack);

            alert('C√≥ l·ªói khi k√Ω duy·ªát nh·∫≠t k√Ω: ' + error.message + '\n\nChi ti·∫øt l·ªói: ' + error.stack);

        }
    }
}

// ===== PDF UPLOAD FUNCTIONALITY FOR CARE PLANS =====

let selectedCarePlanFile = null;

// Handle file selection
function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
        // Validate file type
        if (!file.type.includes('pdf')) {
            alert('Vui l√≤ng ch·ªçn file PDF h·ª£p l·ªá');
            event.target.value = '';
            return;
        }

        // Validate file size (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
            alert('File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB');
            event.target.value = '';
            return;
        }

        selectedCarePlanFile = file;
        document.getElementById('uploadBtn').disabled = false;

        // Update UI to show selected file
        const dropzone = document.querySelector('.upload-dropzone');
        dropzone.innerHTML = `
            <div class="upload-icon">‚úÖ</div>
            <p><strong>${file.name}</strong></p>
            <small>K√≠ch th∆∞·ªõc: ${(file.size / 1024 / 1024).toFixed(2)} MB</small>
        `;
    }
}

// Upload care plan PDF
async function uploadCarePlan() {
    if (!selectedCarePlanFile) {
        alert('Vui l√≤ng ch·ªçn file PDF tr∆∞·ªõc khi upload');
        return;
    }

    const formData = new FormData();
    formData.append('care_plan', selectedCarePlanFile);

    const uploadBtn = document.getElementById('uploadBtn');
    const progressDiv = document.getElementById('uploadProgress');
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');

    try {
        uploadBtn.disabled = true;
        uploadBtn.textContent = '‚è≥ ƒêang upload...';
        progressDiv.style.display = 'block';

        const response = await fetch('/api/upload-care-plan', {
            method: 'POST',
            headers: {
                'X-User-Role': currentUserRole
            },
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            alert('‚úÖ Upload th√†nh c√¥ng!');
            // Reset UI
            resetUploadUI();
            // Reload the viewer
            loadCurrentCarePlan();
        } else {
            alert('‚ùå Upload th·∫•t b·∫°i: ' + result.error);
        }

    } catch (error) {
        console.error('Upload error:', error);
        alert('‚ùå C√≥ l·ªói khi upload: ' + error.message);
    } finally {
        uploadBtn.disabled = false;
        uploadBtn.textContent = 'üì§ Upload PDF';
        progressDiv.style.display = 'none';
    }
}

// Reset upload UI
function resetUploadUI() {
    selectedCarePlanFile = null;
    document.getElementById('carePlanFile').value = '';
    document.getElementById('uploadBtn').disabled = true;

    const dropzone = document.querySelector('.upload-dropzone');
    dropzone.innerHTML = `
        <div class="upload-icon">üìÑ</div>
        <p>Nh·∫•p ƒë·ªÉ ch·ªçn file PDF ho·∫∑c k√©o th·∫£ v√†o ƒë√¢y</p>
        <small>Ch·ªâ ch·∫•p nh·∫≠n file PDF, t·ªëi ƒëa 10MB</small>
    `;
}

// Load current care plan PDF and display it directly
async function loadCurrentCarePlan() {
    const viewerDiv = document.getElementById('carePlanViewer');

    try {
        viewerDiv.innerHTML = '<div class="loading">ƒêang t·∫£i t√†i li·ªáu...</div>';

        const response = await fetch('/api/care-plans');
        const result = await response.json();

        if (result.success && result.data.length > 0) {
            // Get the most recent care plan (first in the list)
            const currentFile = result.data[0];

            viewerDiv.innerHTML = `
                <div class="care-plan-info">
                    <div class="file-details">
                        <div class="file-name">üìÑ ${currentFile.original_name || currentFile.filename}</div>
                        <div class="file-meta">
                            <span class="file-size">${(currentFile.size / 1024 / 1024).toFixed(2)} MB</span>
                            <span class="file-date">C·∫≠p nh·∫≠t: ${new Date(currentFile.upload_date).toLocaleDateString('vi-VN')}</span>
                        </div>
                        <div class="file-actions">
                            <button class="btn-download" onclick="downloadCarePlan('${currentFile.filename}', '${currentFile.original_name || currentFile.filename}')" title="T·∫£i v·ªÅ">
                                ‚¨áÔ∏è T·∫£i v·ªÅ
                            </button>
                            ${currentUserRole === 'ADMIN' ? `
                                <button class="btn-delete" onclick="deleteCarePlan('${currentFile.filename}')" title="X√≥a">
                                    üóëÔ∏è X√≥a
                                </button>
                            ` : ''}
                        </div>
                    </div>
                </div>
                <div class="pdf-viewer-container">
                    <iframe 
                        src="/care-plans/${currentFile.filename}" 
                        class="pdf-viewer"
                        title="K·∫ø ho·∫°ch ChƒÉm s√≥c v√† Hu·∫•n luy·ªán"
                        style="width: 100%; height: 80vh; border: none; border-radius: 8px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);">
                    </iframe>
                </div>
            `;
        } else {
            viewerDiv.innerHTML = `
                <div class="no-files">
                    <div class="no-files-icon">üìÑ</div>
                    <h4>Ch∆∞a c√≥ t√†i li·ªáu</h4>
                    <p>Ch∆∞a c√≥ t√†i li·ªáu PDF n√†o ƒë∆∞·ª£c upload. ${currentUserRole === 'ADMIN' ? 'Vui l√≤ng upload t√†i li·ªáu PDF v·ªÅ k·∫ø ho·∫°ch chƒÉm s√≥c v√† hu·∫•n luy·ªán.' : 'Li√™n h·ªá Admin ƒë·ªÉ upload t√†i li·ªáu.'}</p>
                </div>
            `;
        }

    } catch (error) {
        console.error('Load current care plan error:', error);
        viewerDiv.innerHTML = '<div class="error">‚ùå C√≥ l·ªói khi t·∫£i t√†i li·ªáu</div>';
    }
}

// View PDF in new tab
function viewCarePlan(filename) {
    const url = `/care-plans/${filename}`;
    window.open(url, '_blank');
}

// Download PDF
function downloadCarePlan(filename, originalName = null) {
    const url = `/care-plans/${filename}`;
    const link = document.createElement('a');
    link.href = url;
    link.download = originalName || filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// Delete PDF (Admin only)
async function deleteCarePlan(filename) {
    if (currentUserRole !== 'ADMIN') {
        alert('Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn x√≥a t√†i li·ªáu');
        return;
    }

    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i li·ªáu n√†y?')) {
        return;
    }

    try {
        const response = await fetch(`/api/care-plans/${filename}`, {
            method: 'DELETE',
            headers: {
                'X-User-Role': currentUserRole
            }
        });

        const result = await response.json();

        if (result.success) {
            alert('‚úÖ X√≥a th√†nh c√¥ng!');
            loadCurrentCarePlan(); // Reload the viewer
        } else {
            alert('‚ùå X√≥a th·∫•t b·∫°i: ' + result.error);
        }

    } catch (error) {
        console.error('Delete error:', error);
        alert('‚ùå C√≥ l·ªói khi x√≥a: ' + error.message);
    }
}
