// Log to confirm script loads and executes
console.log("script.js loaded and running - FIXED DIGITAL SIGNATURE & PDF VIEW VERSION");

// ===== TH√äM PH·∫¶N QU·∫¢N L√ù CH·ªÆ K√ù TH·ª∞C =====

// H·ªá th·ªëng qu·∫£n l√Ω ch·ªØ k√Ω - l∆∞u trong localStorage ho·∫∑c k·∫øt n·ªëi th∆∞ m·ª•c
const SIGNATURE_STORAGE_KEY = 'k9_signatures_database';

// Kh·ªüi t·∫°o database ch·ªØ k√Ω m·∫∑c ƒë·ªãnh
function initializeSignatureDatabase() {
    const existingSignatures = JSON.parse(localStorage.getItem(SIGNATURE_STORAGE_KEY)) || [];
    
    if (existingSignatures.length === 0) {
        const defaultSignatures = [
            {
                userId: 'admin',
                userName: 'Qu·∫£n tr·ªã vi√™n',
                role: 'ADMIN',
                signatureImage: 'signatures/admin_signature.png',
                signatureText: 'Qu·∫£n tr·ªã vi√™n',
                createdDate: new Date().toISOString()
            },
            {
                userId: 'Kien123',
                userName: 'Tr·∫ßn ƒê·ª©c Ki√™n',
                role: 'TRAINER',
                signatureImage: 'signatures/tran_duc_kien_signature.png',
                signatureText: 'Tr·∫ßn ƒê·ª©c Ki√™n',
                createdDate: new Date().toISOString()
            },
            {
                userId: 'Tuan123',
                userName: 'Nguy·ªÖn VƒÉn Tu·∫•n',
                role: 'TRAINER',
                signatureImage: 'signatures/nguyen_van_tuan_signature.png',
                signatureText: 'Nguy·ªÖn VƒÉn Tu·∫•n',
                createdDate: new Date().toISOString()
            },
            {
                userId: 'Quynh',
                userName: 'Ho√†ng Tr·ªçng Qu·ª≥nh', // S·ª¨A: ƒê√∫ng t√™n ƒëƒÉng nh·∫≠p
                role: 'MANAGER',
                signatureImage: 'signatures/hoang_trong_quynh_signature.png', // S·ª¨A: ƒê∆∞·ªùng d·∫´n ƒë√∫ng
                signatureText: 'Ho√†ng Tr·ªçng Qu·ª≥nh',
                createdDate: new Date().toISOString()
            },
            {
                userId: 'Quang',
                userName: 'L√™ VƒÉn Quang',
                role: 'TRAINER',
                signatureImage: 'signatures/le_van_quang_signature.png',
                signatureText: 'L√™ VƒÉn Quang',
                createdDate: new Date().toISOString()
            },
            {
                userId: 'Kien456',
                userName: 'Tr·∫ßn Ki√™n 456',
                role: 'ADMIN',
                signatureImage: 'signatures/tran_kien_456_signature.png',
                signatureText: 'Tr·∫ßn Ki√™n 456',
                createdDate: new Date().toISOString()
            }
        ];
        
        localStorage.setItem(SIGNATURE_STORAGE_KEY, JSON.stringify(defaultSignatures));
        console.log('‚úÖ Initialized signature database');
    }
}

// Function l·∫•y ch·ªØ k√Ω c·ªßa user - S·ª¨A: FIX USER MAPPING HO√ÄNG TR·ªåNG QU·ª≤NH
function getUserSignature(userName, role) {
    console.log('üîç Getting signature for:', userName, role);
    
    const signatures = JSON.parse(localStorage.getItem(SIGNATURE_STORAGE_KEY)) || [];
    console.log('üìã Available signatures:', signatures.map(s => s.userName));
    
    // S·ª¨A: T√¨m theo t√™n ch√≠nh x√°c tr∆∞·ªõc, b·ªè qua role n·∫øu c·∫ßn
    let signature = signatures.find(sig => sig.userName === userName);
    
    if (!signature) {
        // T√¨m theo userId t·ª´ dashboard users
        const dashboardUsers = JSON.parse(localStorage.getItem('k9_users')) || [];
        console.log('üë• Dashboard users:', dashboardUsers.map(u => u.name + ' (' + u.username + ')'));
        
        const user = dashboardUsers.find(u => u.name === userName || u.username === userName);
        console.log('üéØ Found user match:', user);
        
        if (user) {
            signature = signatures.find(sig => sig.userId === user.username || sig.userName === user.name);
            console.log('üîó Found signature via userId:', signature);
        }
    }
    
    // S·ª¨A: N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, t·∫°o ch·ªØ k√Ω t·∫°m th·ªùi v·ªõi user name ch√≠nh x√°c
    if (!signature) {
        // S·ª¨A: Mapping t√™n ch√≠nh x√°c theo username - FIX HO√ÄNG TR·ªåNG QU·ª≤NH
        let correctName = userName;
        if (userName === 'Quynh' || userName === 'Ho√†ng Tr·ªçng Qu·ª≥nh') {
            correctName = 'Ho√†ng Tr·ªçng Qu·ª≥nh'; // S·ª¨A: T√™n ch√≠nh x√°c
        }
        
        signature = {
            userId: 'temp_' + Date.now(),
            userName: correctName, // S·ª¨A: S·ª≠ d·ª•ng t√™n ch√≠nh x√°c
            role: role,
            signatureImage: 'signatures/' + correctName.toLowerCase().replace(/\s/g, '_').replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a').replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e').replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i').replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o').replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u').replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y').replace(/ƒë/g, 'd') + '_signature.png',
            signatureText: correctName,
            createdDate: new Date().toISOString()
        };
        
        // L∆∞u ch·ªØ k√Ω t·∫°m th·ªùi v√†o database
        signatures.push(signature);
        localStorage.setItem(SIGNATURE_STORAGE_KEY, JSON.stringify(signatures));
        console.log('üìù Created temporary signature for:', correctName, signature.signatureImage);
    }
    
    console.log('‚úÖ Final signature:', signature);
    return signature;
}

// Function ki·ªÉm tra file ch·ªØ k√Ω c√≥ t·ªìn t·∫°i kh√¥ng - S·ª¨A: FORCE HI·ªÇN TH·ªä CH·ªÆ K√ù
function checkSignatureImageExists(imagePath) {
    return new Promise((resolve) => {
        console.log('üîç Checking signature image:', imagePath);
        const img = new Image();
        img.onload = () => {
            console.log('‚úÖ Image loaded successfully:', imagePath);
            resolve(true);
        };
        img.onerror = () => {
            console.warn('‚ùå Image failed to load, will use text fallback:', imagePath);
            resolve(false); // S·ª¨A: Return false ƒë·ªÉ s·ª≠ d·ª•ng text fallback
        };
        // Set timeout ƒë·ªÉ tr√°nh hang
        setTimeout(() => {
            console.warn('‚è∞ Image check timeout:', imagePath);
            resolve(false); // S·ª¨A: Return false ƒë·ªÉ s·ª≠ d·ª•ng text fallback
        }, 3000);
        img.src = imagePath;
    });
}

// Function t·∫°o HTML hi·ªÉn th·ªã ch·ªØ k√Ω th·ª±c - S·ª¨A: C·∫¢I THI·ªÜN HI·ªÇN TH·ªä CH·ªÆ K√ù
async function generateSignatureHTML(signatureData, timestamp) {
    console.log('üé® Generating signature HTML for:', signatureData.userName, signatureData.signatureImage);
    
    // Ki·ªÉm tra xem ·∫£nh ch·ªØ k√Ω c√≥ t·ªìn t·∫°i kh√¥ng
    const imageExists = await checkSignatureImageExists(signatureData.signatureImage);
    
    let signatureImageHTML = '';
    if (imageExists) {
        // Hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω
        signatureImageHTML = `<div style="margin: 15px 0; text-align: center; position: relative;">
            <img src="${signatureData.signatureImage}" alt="Ch·ªØ k√Ω ${signatureData.userName}" 
                 style="max-width: 300px; max-height: 120px; border: 2px solid #2196F3; padding: 10px;
                        background: white; box-shadow: 0 2px 8px rgba(0,0,0,0.1); display: block; margin: 0 auto;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div style="display: none; margin-top: 10px; padding: 20px; border: 3px solid #2196F3;
                        background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;
                        font-size: 24px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 8px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                ${signatureData.signatureText}
            </div>
        </div>`;
        console.log('‚úÖ Generated image HTML for signature');
    } else {
        // Fallback to text signature
        signatureImageHTML = `<div style="margin: 15px 0; padding: 20px; border: 3px solid #2196F3;
            background: linear-gradient(135deg, #f8f9ff, #e3f2fd); font-family: 'Dancing Script', cursive;
            font-size: 24px; text-align: center; color: #1976d2; font-weight: bold; border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
            ${signatureData.signatureText}
        </div>`;
        console.log('‚úÖ Generated text fallback for signature');
    }
    
    const signatureId = 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    const digitalSig = generateDigitalSignature(signatureData.userName, signatureData.role, timestamp);
    
    return `<div class="signature-display" style="border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 8px; background: #f9f9f9;">
        <div style="display: flex; align-items: center; margin-bottom: 15px;">
            <span style="font-size: 24px; margin-right: 10px;">‚úÖ</span>
            <strong style="font-size: 18px; color: #2e7d32;">${signatureData.userName}</strong>
        </div>
        ${signatureImageHTML}
        <div style="margin-top: 15px; padding: 12px; background: #e8f5e8; border-left: 4px solid #4caf50; border-radius: 4px;">
            <div style="font-size: 14px; color: #2e7d32; margin-bottom: 8px;">
                <strong>üìÖ K√Ω ng√†y:</strong> ${new Date(timestamp).toLocaleString('vi-VN')}
            </div>
            <div style="font-size: 14px; color: #2e7d32; margin-bottom: 8px;">
                <strong>üÜî ID:</strong> ${signatureId}
            </div>
            <div style="font-size: 12px; color: #666; font-family: monospace; word-break: break-all;">
                <strong>üìù Ch·ªØ k√Ω s·ªë:</strong> ${digitalSig}
            </div>
        </div>
    </div>`;
}

// ===== TH√äM PH·∫¶N PH√ÇN QUY·ªÄN V√Ä DASHBOARD CONNECTION =====

let currentUserRole = 'GUEST'; // TRAINER, MANAGER, ADMIN
let currentUserName = '';
let currentUserAssignedDogs = [];
let isDashboardConnected = false;

// S·ª¨A: Kh·ªüi t·∫°o users m·∫∑c ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c√≥ data - FIX HO√ÄNG TR·ªåNG QU·ª≤NH
function initializeDefaultUsers() {
    const existingUsers = JSON.parse(localStorage.getItem('k9_users')) || [];
    
    if (existingUsers.length === 0) {
        const defaultUsers = [
            {
                id: 1,
                name: 'Qu·∫£n tr·ªã vi√™n',
                username: 'admin',
                password: 'admin',
                role: 'ADMIN',
                assignedDogs: ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'],
                status: 'ACTIVE'
            },
            {
                id: 2,
                name: 'Tr·∫ßn ƒê·ª©c Ki√™n',
                username: 'trainer1',
                password: 'trainer',
                role: 'TRAINER',
                assignedDogs: ['CNV BI'],
                status: 'ACTIVE'
            },
            {
                id: 3,
                name: 'V≈© VƒÉn H√†o',  // S·ª¨A: T·ª´ "Nguy·ªÖn VƒÉn Manager" ‚Üí "V≈© VƒÉn H√†o"
                username: 'manager1',
                password: 'manager',
                role: 'MANAGER',
                assignedDogs: ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'],
                status: 'ACTIVE'
            },
            {
                id: 4,
                name: 'Tr·∫ßn ƒê·ª©c Ki√™n (Kien123)',
                username: 'Kien123',
                password: '123456',
                role: 'TRAINER',
                assignedDogs: ['CNV BI', 'CNV LU'],
                status: 'ACTIVE'
            },
            {
                id: 5,
                name: 'Nguy·ªÖn VƒÉn Tu·∫•n',
                username: 'Tuan123',
                password: '123456',
                role: 'TRAINER',
                assignedDogs: ['CNV R·∫æCH'],
                status: 'ACTIVE'
            },
            {
                id: 6,
                name: 'Ho√†ng Tr·ªçng Qu·ª≥nh',
                username: 'Quynh',
                password: '123456',
                role: 'MANAGER',
                assignedDogs: ['CNV KY', 'CNV REX'],
                status: 'ACTIVE'
            },
            {
                id: 7,
                name: 'L√™ VƒÉn Quang',
                username: 'Quang',
                password: '123456',
                role: 'TRAINER',
                assignedDogs: ['CNV KY'],
                status: 'ACTIVE'
            },
            {
                id: 8,
                name: 'Tr·∫ßn Ki√™n 456',
                username: 'Kien456',
                password: '123456',
                role: 'ADMIN',
                assignedDogs: ['CNV BI', 'CNV LU', 'CNV R√ãCH', 'CNV KY', 'CNV REX'],
                status: 'ACTIVE'
            }
        ];
        
        localStorage.setItem('k9_users', JSON.stringify(defaultUsers));
        console.log('‚úÖ Initialized default users in localStorage');
    }
}

// X·ª≠ l√Ω URL parameters khi m·ªü t·ª´ Dashboard
function handleURLParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    const user = urlParams.get('user');
    const role = urlParams.get('role');
    const assignedDogs = urlParams.get('dogs');
    const journalKey = urlParams.get('journalKey');
    const viewMode = urlParams.get('view');
    
    // X·ª¨ L√ù XEM JOURNAL T·ª™ DASHBOARD
    if (journalKey && viewMode === 'journal') {
        // Auto login as admin ƒë·ªÉ xem journal
        currentUserRole = 'ADMIN';
        currentUserName = 'Dashboard Viewer';
        currentUserAssignedDogs = ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'];
        isDashboardConnected = true;
        autoLogin();
        setTimeout(() => {
            showA4JournalViewFromKey(journalKey);
        }, 500);
        return true;
    }
    
    if (user && role) {
        currentUserName = decodeURIComponent(user);
        currentUserRole = role.toUpperCase();
        currentUserAssignedDogs = assignedDogs ? decodeURIComponent(assignedDogs).split(',') : [];
        isDashboardConnected = true;
        autoLogin();
        return true;
    }
    
    return false;
}

// Auto login khi ƒë∆∞·ª£c m·ªü t·ª´ Dashboard
function autoLogin() {
    document.getElementById('loginPage').classList.add('hidden');
    document.getElementById('mainApp').classList.remove('hidden');
    showDashboardBanner();
    applyRoleBasedRestrictions();
    refreshDynamicMenus();
    showDefaultImage();
    updateUserDisplay();
}

// ===== S·ª¨A L·ªñI LOGOUT - ƒê√ìNG T·∫§T C·∫¢ DROPDOWN V√Ä RESET UI =====
function closeAllDropdowns() {
    // ƒê√≥ng user dropdown
    const userDropdown = document.getElementById('dynamicUserDropdown');
    if (userDropdown) {
        userDropdown.remove();
    }
    
    // ƒê√≥ng t·∫•t c·∫£ custom dropdowns
    document.querySelectorAll('.custom-dropdown-options').forEach(dropdown => {
        dropdown.classList.add('hidden');
    });
    
    // ƒê√≥ng food dropdowns
    document.querySelectorAll('.custom-food-select-wrapper .custom-dropdown-options').forEach(dropdown => {
        dropdown.classList.add('hidden');
    });
    
    console.log('‚úÖ Closed all dropdowns');
}

// ===== GI·∫¢I PH√ÅP CU·ªêI C√ôNG - THAY TH·∫æ H√ÄM updateUserDisplay() - S·ª¨A: FIX T√äN HI·ªÇN TH·ªä HO√ÄNG TR·ªåNG QU·ª≤NH =====
function updateUserDisplay() {
    const userInfoDisplay = document.getElementById('userInfoDisplay');
    const userInitials = document.getElementById('userInitials');
    
    if (currentUserName && currentUserRole !== 'GUEST') {
        if (!userInfoDisplay || !userInitials) {
            console.warn('User display elements not found');
            return;
        }
        
        // S·ª¨A: ƒê·∫£m b·∫£o t√™n hi·ªÉn th·ªã ƒë√∫ng theo mapping - HO√ÄNG TR·ªåNG QU·ª≤NH
        let displayName = currentUserName;
        
        // Fix mapping t√™n ch√≠nh x√°c
        const dashboardUsers = JSON.parse(localStorage.getItem('k9_users')) || [];
        const currentUser = dashboardUsers.find(u => u.username === 'Quynh' || u.name === currentUserName);
        
        if (currentUser) {
            displayName = currentUser.name; // S·ª≠ d·ª•ng t√™n t·ª´ database
            console.log('üîÑ Updated display name from dashboard:', displayName);
        }
        
        // S·ª¨A: Override cho user Quynh - ƒê·∫¢M B·∫¢O T√äN CH√çNH X√ÅC
        if (currentUserName === 'Quynh' || currentUserName.includes('Qu·ª≥nh') || currentUserName === 'Ho√†ng Tr·ªçng Qu·ª≥nh') {
            displayName = 'Ho√†ng Tr·ªçng Qu·ª≥nh'; // S·ª¨A: T√™n ch√≠nh x√°c
        }
        
        // Hi·ªÉn th·ªã t√™n ƒë·∫ßy ƒë·ªß trong khung √¥ m√†u xanh
        userInitials.textContent = displayName;
        userInitials.style.cssText = 'background: #4CAF50; color: white; cursor: pointer; padding: 8px 15px; border-radius: 5px; font-size: 14px; font-weight: bold; border: none; outline: none; white-space: nowrap; min-width: 150px; text-align: center; display: block;';
        
        // X√ìA dropdown c≈© n·∫øu c√≥
        const oldDropdown = document.getElementById('userDropdown');
        if (oldDropdown) {
            oldDropdown.remove();
        }
        
        // T√çNH TO√ÅN V·ªä TR√ç CH√çNH X√ÅC C·ª¶A N√öT USER
        userInitials.onclick = function(e) {
            e.stopPropagation();
            
            // X√≥a dropdown c≈©
            const existingDropdown = document.getElementById('dynamicUserDropdown');
            if (existingDropdown) {
                existingDropdown.remove();
                return;
            }
            
            // T√çNH TO√ÅN V·ªä TR√ç TH·ª∞C C·ª¶A N√öT USER BUTTON
            const rect = userInitials.getBoundingClientRect();
            const dropdownTop = rect.bottom + 8; // Ngay d∆∞·ªõi n√∫t user + 8px
            const dropdownRight = window.innerWidth - rect.right; // CƒÉn ph·∫£i theo n√∫t user
            
            // T·∫°o dropdown m·ªõi v·ªõi v·ªã tr√≠ ch√≠nh x√°c v√† z-index cao
            const dropdown = document.createElement('div');
            dropdown.id = 'dynamicUserDropdown';
            dropdown.style.cssText = 'position: fixed; top: ' + dropdownTop + 'px; right: ' + dropdownRight + 'px; background: white; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 8px 25px rgba(0,0,0,0.3); padding: 0; min-width: 280px; z-index: 999999; font-family: Arial, sans-serif;';
            
            dropdown.innerHTML = '<div style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;"><div style="font-weight: bold; font-size: 16px; margin-bottom: 5px;">' + displayName + '</div><div style="font-size: 14px; opacity: 0.9;">HLV - H·∫£i quan c·ª≠a kh·∫©u qu·ªëc t·∫ø M√≥ng C√°i</div></div><div style="padding: 15px;"><div class="dropdown-item" onclick="showDashboardConnection()" style="display: flex; align-items: center; gap: 10px; padding: 12px; cursor: pointer; border-radius: 6px; transition: background 0.2s;"><span>üìä</span><span>Dashboard</span></div><div class="dropdown-item" onclick="logout()" style="display: flex; align-items: center; gap: 10px; padding: 12px; cursor: pointer; border-radius: 6px; transition: background 0.2s; color: #f44336; border-top: 1px solid #eee; margin-top: 10px;"><span>üö™</span><span>ƒêƒÉng xu·∫•t</span></div></div>';
            
            // Th√™m hover effects
            const items = dropdown.querySelectorAll('.dropdown-item');
            items.forEach(item => {
                item.addEventListener('mouseenter', () => {
                    item.style.background = '#f8f9fa';
                });
                item.addEventListener('mouseleave', () => {
                    item.style.background = 'transparent';
                });
            });
            
            // Th√™m v√†o body
            document.body.appendChild(dropdown);
            
            // ƒê√≥ng dropdown khi click b√™n ngo√†i
            setTimeout(() => {
                document.addEventListener('click', function closeDropdown(e) {
                    if (!dropdown.contains(e.target)) {
                        dropdown.remove();
                        document.removeEventListener('click', closeDropdown);
                    }
                });
            }, 100);
        };
        
        userInfoDisplay.style.display = 'inline-block';
        userInfoDisplay.style.position = 'relative';
        
        // S·ª¨A: C·∫≠p nh·∫≠t currentUserName v·ªõi t√™n ch√≠nh x√°c - HO√ÄNG TR·ªåNG QU·ª≤NH
        currentUserName = displayName;
        
        console.log('‚úÖ Updated user display: ' + displayName + ' (' + currentUserRole + ')');
    } else {
        if (userInfoDisplay) {
            userInfoDisplay.style.display = 'none';
        }
    }
}

// S·ª¨A: Function toggle user dropdown
function toggleUserDropdown(e) {
    e.stopPropagation();
    const dropdown = document.getElementById('userDropdown');
    if (dropdown) {
        dropdown.classList.toggle('hidden');
    }
}

// Close dropdown khi click outside - S·ª¨A: Th√™m cleanup cho t·∫•t c·∫£ dropdowns
document.addEventListener('click', (e) => {
    // Close user dropdown
    const dropdown = document.getElementById('userDropdown');
    if (dropdown && !e.target.closest('#userInfoDisplay')) {
        dropdown.classList.add('hidden');
    }
    
    // Close dynamic user dropdown
    const dynamicDropdown = document.getElementById('dynamicUserDropdown');
    if (dynamicDropdown && !e.target.closest('#userInitials')) {
        dynamicDropdown.remove();
    }
    
    // Close all custom dropdowns
    if (!e.target.closest('.custom-dropdown-trigger')) {
        document.querySelectorAll('.custom-dropdown-options').forEach(dropdown => {
            dropdown.classList.add('hidden');
        });
    }
});

// Hi·ªÉn th·ªã banner k·∫øt n·ªëi Dashboard
function showDashboardBanner() {
    const banner = document.getElementById('dashboardBanner');
    const connectedUser = document.getElementById('connectedUser');
    const userRole = document.getElementById('userRole');
    const mainApp = document.getElementById('mainApp');
    
    if (banner && connectedUser && userRole) {
        banner.style.display = 'block';
        connectedUser.textContent = currentUserName;
        userRole.textContent = currentUserRole;
        userRole.className = 'role-indicator role-' + currentUserRole.toLowerCase();
        mainApp.classList.add('with-banner');
        
        // Th√™m n√∫t refresh dashboard
        if (!document.getElementById('refreshDashboardBtn')) {
            const refreshBtn = document.createElement('button');
            refreshBtn.id = 'refreshDashboardBtn';
            refreshBtn.innerHTML = 'üîÑ C·∫≠p nh·∫≠t Dashboard';
            refreshBtn.style.cssText = 'background: #2196F3; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; margin-left: 10px;';
            refreshBtn.onclick = refreshDashboardData;
            banner.appendChild(refreshBtn);
        }
    }
}

// Function refresh dashboard data
function refreshDashboardData() {
    if (confirm('C·∫≠p nh·∫≠t d·ªØ li·ªáu v·ªõi Dashboard?')) {
        if (window.opener) {
            window.opener.postMessage({
                type: 'REFRESH_DASHBOARD'
            }, '*');
        }
        refreshDynamicMenus();
        localStorage.setItem('dashboard_refresh_trigger', Date.now().toString());
        alert('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!');
    }
}

// √Åp d·ª•ng ph√¢n quy·ªÅn theo role v·ªõi ƒë·ªìng b·ªô dashboard
function applyRoleBasedRestrictions() {
    if (currentUserRole === 'TRAINER') {
        filterDogMenuForTrainer();
        restrictTrainerAccess();
    } else if (currentUserRole === 'MANAGER') {
        setupManagerView();
        restrictManagerAccess();
    }
    refreshDynamicMenus();
}

// H·∫°n ch·∫ø Manager - ch·ªâ duy·ªát nh·∫≠t k√Ω
function restrictManagerAccess() {
    const createJournalButtons = document.querySelectorAll('.btn-create-new-journal');
    createJournalButtons.forEach(btn => {
        btn.style.display = 'none';
    });
    
    const journalSubMenu = document.getElementById('journal-sub-menu');
    if (journalSubMenu) {
        journalSubMenu.innerHTML = '<li class="sub-item manager-notice" style="color: orange; font-style: italic; padding: 10px;">üëÅÔ∏è Ch·∫ø ƒë·ªô duy·ªát - B·∫°n ch·ªâ c√≥ th·ªÉ xem v√† duy·ªát nh·∫≠t k√Ω</li>';
    }
    
    console.log('‚úÖ Manager access restricted - approval only mode');
}

// Function refreshDynamicMenus ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi dashboard
function refreshDynamicMenus() {
    const dashboardUsers = JSON.parse(localStorage.getItem('k9_users')) || [];
    const dashboardDogs = JSON.parse(localStorage.getItem('k9_dogs')) || [];
    
    let currentUser = null;
    const loginUsername = document.getElementById('username')?.value;
    
    if (loginUsername) {
        currentUser = dashboardUsers.find(u => u.username === loginUsername);
    }
    
    if (!currentUser && currentUserName) {
        currentUser = dashboardUsers.find(u => u.name === currentUserName || u.username === currentUserName);
    }
    
    if (currentUser) {
        currentUserAssignedDogs = currentUser.assignedDogs || [];
        console.log('‚úÖ Updated assigned dogs for ' + currentUser.name + ':', currentUserAssignedDogs);
    }
    
    updateDogSubMenu(dashboardDogs);
    
    if (currentUserRole !== 'MANAGER') {
        updateJournalSubMenu(dashboardDogs);
    }
}

// Function c·∫≠p nh·∫≠t dog sub-menu ƒë·ªông THEO DASHBOARD DATA
function updateDogSubMenu(dashboardDogs) {
    const dogMenu = document.getElementById('dog-sub-menu');
    if (!dogMenu) return;
    
    dogMenu.querySelectorAll('.sub-item').forEach(item => {
        if (!item.textContent.includes('‚ûï')) {
            item.remove();
        }
    });
    
    const addNewButton = dogMenu.querySelector('.sub-item:last-child');
    
    dashboardDogs.forEach(dog => {
        if (currentUserRole === 'TRAINER' && !currentUserAssignedDogs.includes(dog.name)) {
            return;
        }
        
        const li = document.createElement('li');
        li.className = 'sub-item';
        li.innerHTML = 'üê∂' + dog.name;
        li.onclick = () => showDogProfileForm(dog.name);
        dogMenu.insertBefore(li, addNewButton);
    });
    
    console.log('‚úÖ Updated dog sub-menu with ' + dashboardDogs.length + ' dogs from dashboard');
}

// Function c·∫≠p nh·∫≠t journal sub-menu ƒë·ªông THEO DASHBOARD DATA - S·ª¨A: MANAGER WORKFLOW
function updateJournalSubMenu(dashboardDogs) {
    const journalMenu = document.getElementById('journal-sub-menu');
    if (!journalMenu) return;
    
    console.log('üîÑ Updating journal sub-menu for role:', currentUserRole);
    console.log('üîç Current user name:', currentUserName);
    
    if (currentUserRole === 'MANAGER') {
        // S·ª¨A: Manager menu v·ªõi ki·ªÉm tra pending journals
        const pendingJournals = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
        let actualPendingCount = 0;
        
        // ƒê·∫øm s·ªë journal th·ª±c s·ª± c·∫ßn duy·ªát
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.startsWith('journal_')) {
                try {
                    const journalData = JSON.parse(localStorage.getItem(key));
                    if (journalData?.approval?.hvlSignature && !journalData?.approval?.leaderSignature) {
                        actualPendingCount++;
                    }
                } catch (e) {
                    console.error('Error checking journal:', key, e);
                }
            }
        }
        
        console.log('üìä Pending journals count:', actualPendingCount);
        
        journalMenu.innerHTML = `<li class="sub-item manager-approval" onclick="showAllPendingJournalsForManager()" style="color: #ff9800; font-weight: bold; cursor: pointer; padding: 12px; border-radius: 5px; background: linear-gradient(135deg, #fff3e0, #ffe0b2); border: 1px solid #ff9800; margin: 5px 0;">üìã Duy·ªát nh·∫≠t k√Ω ch·ªù ph√™ duy·ªát (${actualPendingCount})</li><li class="sub-item manager-stats" onclick="showManagerStatistics()" style="color: #9c27b0; cursor: pointer; padding: 10px; border-radius: 5px; background: #f3e5f5; border: 1px solid #9c27b0; margin: 5px 0;">üìä Th·ªëng k√™ t·ªïng quan</li><li class="sub-item debug-btn" onclick="debugManagerSystem()" style="color: #f44336; cursor: pointer; padding: 10px; border-radius: 5px; background: #ffebee; border: 1px solid #f44336; margin: 5px 0;">üîß DEBUG - Ki·ªÉm tra h·ªá th·ªëng</li>`;
        
        console.log('‚úÖ Set manager-specific journal menu with pending count:', actualPendingCount);
        return;
    }
    
    // Cho TRAINER v√† ADMIN: hi·ªÉn th·ªã menu t·∫°o nh·∫≠t k√Ω theo ch√≥
    journalMenu.innerHTML = '';
    
    dashboardDogs.forEach(dog => {
        if (currentUserRole === 'TRAINER' && !currentUserAssignedDogs.includes(dog.name)) {
            return; // Skip dogs not assigned to trainer
        }
        
        const li = document.createElement('li');
        li.className = 'sub-item';
        li.textContent = dog.name;
        li.onclick = () => showJournalEditForm(dog.name);
        journalMenu.appendChild(li);
    });
    
    console.log('‚úÖ Updated journal sub-menu for role ' + currentUserRole + ' with dashboard data');
}

// L·ªçc menu ch√≥ cho Trainer
function filterDogMenuForTrainer() {
    const dogMenu = document.getElementById('dog-sub-menu');
    const journalMenu = document.getElementById('journal-sub-menu');
    
    if (currentUserAssignedDogs.length > 0) {
        if (dogMenu) {
            dogMenu.querySelectorAll('.sub-item').forEach(item => {
                const dogName = item.textContent.replace('üê∂', '').replace('‚ûï Th√™m ch√≥ m·ªõi', '').trim();
                if (!currentUserAssignedDogs.includes(dogName) && !item.textContent.includes('‚ûï')) {
                    item.style.display = 'none';
                }
            });
        }
        
        if (journalMenu) {
            journalMenu.querySelectorAll('.sub-item').forEach(item => {
                const dogName = item.textContent.trim();
                if (!currentUserAssignedDogs.includes(dogName)) {
                    item.style.display = 'none';
                }
            });
        }
    }
}

// H·∫°n ch·∫ø quy·ªÅn truy c·∫≠p cho Trainer
function restrictTrainerAccess() {
    const restrictedSections = document.querySelectorAll('[onclick*="Th√™m ch√≥ m·ªõi"]');
    restrictedSections.forEach(section => {
        section.classList.add('trainer-restricted');
    });
}

// Thi·∫øt l·∫≠p view cho Manager
function setupManagerView() {
    // Manager t·∫≠p trung v√†o vi·ªác duy·ªát nh·∫≠t k√Ω
}

// H√†m m·ªü Dashboard connection
function showDashboardConnection() {
    if (isDashboardConnected) {
        returnToDashboard();
    } else {
        window.open('dashboard_complete.html', '_blank');
    }
}

// Tr·ªü v·ªÅ Dashboard
function returnToDashboard() {
    if (confirm('B·∫°n c√≥ mu·ªën quay v·ªÅ Dashboard kh√¥ng?')) {
        if (window.opener) {
            window.close();
        } else {
            window.location.href = 'dashboard_complete.html';
        }
    }
}

// Global variable to track the currently selected dog for the journal
let currentDogForJournal = '';
let blockCounter = 0;
let trainingSessionCounter = 0;
let operationSessionCounter = 0;

// Dummy data for Trainer (HLV) and Dogs
const HLV_INFO_KEY = 'hvl_current_user_info';
let hlvInfo = JSON.parse(localStorage.getItem(HLV_INFO_KEY)) || {
    name: 'Tr·∫ßn ƒê·ª©c Ki√™n',
    id: 'HLV001',
    image: 'images/hlv_tran_duc_kien.jpg'
};

if (!localStorage.getItem(HLV_INFO_KEY)) {
    localStorage.setItem(HLV_INFO_KEY, JSON.stringify(hlvInfo));
}

// Dog profiles data
const DOG_PROFILES_KEY = 'dog_profiles_data';
let dogProfiles = JSON.parse(localStorage.getItem(DOG_PROFILES_KEY)) || {
    'CNV BI': { name: 'CNV BI', image: 'images/dog_bi.jpg' },
    'CNV LU': { name: 'CNV LU', image: 'images/dog_lu.jpg' },
    'CNV R·∫æCH': { name: 'CNV R·∫æCH', image: 'images/dog_rech.jpg' },
    'CNV KY': { name: 'CNV KY', image: 'images/dog_ky.jpg' },
    'CNV REX': { name: 'CNV REX', image: 'images/dog_rex.jpg' }
};

if (!localStorage.getItem(DOG_PROFILES_KEY)) {
    localStorage.setItem(DOG_PROFILES_KEY, JSON.stringify(dogProfiles));
}

// Define drug types, food types, health manifestations, operation locations
const DRUG_TYPES = ['C·∫ßn sa', 'Heroin', 'Cocain', 'MDMA', 'Methamfetamin', 'Kh√°c'];
const HEALTH_MANIFESTATIONS = ['C√†o', 'S·ªßa', 'N·∫Øm', 'Ng·ªìi', 'Kh√°c'];
const FOOD_TYPES = ['C∆°m', 'Th·ªãt', 'Rau', 'Tr·ª©ng', 'S·ªØa', 'H·∫°t', 'Kh√°c'];
const OPERATION_LOCATIONS = ['C·ª¨A KH·∫®U B·∫ÆC LU√ÇN I', 'B√ÉI KI·ªÇM TRA H√ÄNG H√ìA B·∫ÆC LU√ÇN II', 'C·∫¢NG ICD TH√ÄNH ƒê·∫†T KM 3+4'];

// Function to hide all main content sections
function hideAllContentSections() {
    document.getElementById('content').style.display = 'none';
    document.getElementById('searchResults').style.display = 'none';
}

// Function to show the login page
function showLoginPage() {
    document.getElementById('loginPage').classList.remove('hidden');
    document.getElementById('mainApp').classList.add('hidden');
    
    const userInfoDisplay = document.getElementById('userInfoDisplay');
    if (userInfoDisplay) {
        userInfoDisplay.style.display = 'none';
    }
}

// S·ª¨A QUAN TR·ªåNG: Function to handle login - FIX AUTHENTICATION HO√ÄN TO√ÄN - HO√ÄNG TR·ªåNG QU·ª≤NH
function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    console.log('üîë Attempting login: ' + username);
    
    // S·ª¨A: ƒê·∫£m b·∫£o c√≥ data users trong localStorage
    initializeDefaultUsers();
    
    // Load users from localStorage (t·ª´ Dashboard)
    const dashboardUsers = JSON.parse(localStorage.getItem('k9_users')) || [];
    console.log('üìã Found ' + dashboardUsers.length + ' users in localStorage:', dashboardUsers.map(u => u.username));
    
    // S·ª¨A: T√¨m user trong dashboard users tr∆∞·ªõc
    const dashboardUser = dashboardUsers.find(u => u.username === username && u.password === password);
    
    if (dashboardUser) {
        console.log('‚úÖ Found dashboard user: ' + dashboardUser.name + ' (' + dashboardUser.role + ')');
        
        currentUserRole = dashboardUser.role;
        currentUserName = dashboardUser.name;
        currentUserAssignedDogs = dashboardUser.assignedDogs || [];
        
        // S·ª¨A: C·∫≠p nh·∫≠t hlvInfo v·ªõi t√™n user th·∫≠t - HO√ÄNG TR·ªåNG QU·ª≤NH
        hlvInfo.name = dashboardUser.name;
        localStorage.setItem(HLV_INFO_KEY, JSON.stringify(hlvInfo));
        
        showMainApp();
        return;
    }
    
    // S·ª¨A: Enhanced fallback accounts v·ªõi debugging - FIX HO√ÄNG TR·ªåNG QU·ª≤NH
    const fallbackAccounts = [
        { username: 'admin', password: 'admin', role: 'ADMIN', name: 'Administrator', dogs: ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'] },
        { username: 'Kien123', password: '123456', role: 'TRAINER', name: 'Tr·∫ßn ƒê·ª©c Ki√™n', dogs: ['CNV BI', 'CNV LU'] },
        { username: 'Tuan123', password: '123456', role: 'TRAINER', name: 'Nguy·ªÖn VƒÉn Tu·∫•n', dogs: ['CNV R·∫æCH'] },
        { username: 'Quynh', password: '123456', role: 'MANAGER', name: 'Ho√†ng Tr·ªçng Qu·ª≥nh', dogs: ['CNV KY', 'CNV REX'] }, // S·ª¨A: T√™n ch√≠nh x√°c
        { username: 'Quang', password: '123456', role: 'TRAINER', name: 'L√™ VƒÉn Quang', dogs: ['CNV KY'] },
        { username: 'Kien456', password: '123456', role: 'ADMIN', name: 'Tr·∫ßn Ki√™n 456', dogs: ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'] },
        { username: 'trainer', password: 'trainer', role: 'TRAINER', name: 'Hu·∫•n luy·ªán vi√™n', dogs: ['CNV BI'] },
        { username: 'manager', password: 'manager', role: 'MANAGER', name: 'Qu·∫£n l√Ω', dogs: ['CNV BI', 'CNV LU', 'CNV R·∫æCH', 'CNV KY', 'CNV REX'] }
    ];
    
    const fallbackUser = fallbackAccounts.find(u => u.username === username && u.password === password);
    
    if (fallbackUser) {
        console.log('‚úÖ Found fallback user: ' + fallbackUser.name + ' (' + fallbackUser.role + ')');
        
        currentUserRole = fallbackUser.role;
        currentUserName = fallbackUser.name;
        currentUserAssignedDogs = fallbackUser.dogs;
        
        hlvInfo.name = fallbackUser.name;
        
        showMainApp();
        return;
    }
    
    console.log('‚ùå Login failed for: ' + username);
    console.log('Available usernames:', [...dashboardUsers.map(u => u.username), ...fallbackAccounts.map(u => u.username)]);
    alert('T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.\n\nC√°c t√†i kho·∫£n c√≥ s·∫µn:\n- admin/admin\n- Kien123/123456\n- Tuan123/123456\n- Quynh/123456 (Ho√†ng Tr·ªçng Qu·ª≥nh)\n- Quang/123456\n- Kien456/123456');
}

// Function to toggle password visibility
function togglePasswordVisibility() {
    const passwordInput = document.getElementById('password');
    const toggleSpan = document.querySelector('.password-toggle');
    
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        toggleSpan.innerText = 'üôà';
    } else {
        passwordInput.type = 'password';
        toggleSpan.innerText = 'üëÅÔ∏è';
    }
}

// Function to show the main application
function showMainApp() {
    document.getElementById('loginPage').classList.add('hidden');
    document.getElementById('mainApp').classList.remove('hidden');
    
    setTimeout(() => {
        applyRoleBasedRestrictions();
        refreshDynamicMenus();
        updateUserDisplay();
        
        // S·ª¨A: Force update journal menu cho Manager
        if (currentUserRole === 'MANAGER') {
            updateJournalSubMenuForManager();
        }
    }, 100);
    
    showDefaultImage();
}

// S·ª¨A L·ªñI LOGOUT: Function to handle logout - ƒê√ìNG T·∫§T C·∫¢ DROPDOWN V√Ä RESET HO√ÄN TO√ÄN
function logout() {
    console.log('üîì Logout initiated');
    
    // S·ª¨A: ƒê√≥ng t·∫•t c·∫£ dropdown tr∆∞·ªõc khi logout
    closeAllDropdowns();
    
    const banner = document.getElementById('dashboardBanner');
    if (banner && banner.style.display !== 'none') {
        if (confirm('B·∫°n c√≥ mu·ªën tr·ªü v·ªÅ Dashboard kh√¥ng?')) {
            returnToDashboard();
            return;
        }
    }
    
    // S·ª¨A: Reset t·∫•t c·∫£ bi·∫øn global
    currentUserRole = 'GUEST';
    currentUserName = '';
    currentUserAssignedDogs = [];
    isDashboardConnected = false;
    
    // S·ª¨A: ·∫®n banner dashboard
    if (document.getElementById('dashboardBanner')) {
        document.getElementById('dashboardBanner').style.display = 'none';
    }
    
    // S·ª¨A: Reset CSS class c·ªßa mainApp
    const mainApp = document.getElementById('mainApp');
    if (mainApp) {
        mainApp.classList.remove('with-banner');
    }
    
    // S·ª¨A: ·∫®n ho√†n to√†n user info display
    const userInfoDisplay = document.getElementById('userInfoDisplay');
    if (userInfoDisplay) {
        userInfoDisplay.style.display = 'none';
    }
    
    // S·ª¨A: Reset user initials
    const userInitials = document.getElementById('userInitials');
    if (userInitials) {
        userInitials.textContent = '';
        userInitials.onclick = null; // Remove click handler
        userInitials.style.display = 'none';
    }
    
    // S·ª¨A: Clear input fields
    const usernameField = document.getElementById('username');
    const passwordField = document.getElementById('password');
    if (usernameField) usernameField.value = '';
    if (passwordField) passwordField.value = '';
    
    console.log('‚úÖ Logout completed - all UI reset');
    
    showLoginPage();
}

// Function to display a default image
function showDefaultImage() {
    hideAllContentSections();
    document.getElementById('toggleReadButton').style.display = 'none';
    
    const title = document.getElementById('title');
    const content = document.getElementById('content');
    
    title.innerText = 'S·ªî TAY CH√ì NGHI·ªÜP V·ª§';
    content.style.display = 'flex';
    content.style.justifyContent = 'center';
    content.style.alignItems = 'center';
    content.style.height = 'calc(100vh - 100px)';
    
    content.innerHTML = '<img src="images/my_welcome_image.jpg" alt="Ch√†o m·ª´ng ƒë·∫øn v·ªõi S·ªï tay Ch√≥ nghi·ªáp v·ª•" style="max-width: 100%; max-height: 100%; object-fit: fill;">';
}

// Function showA4JournalViewFromKey ƒë·ªÉ xem journal t·ª´ Dashboard - S·ª¨A: FORCE PDF VIEW
function showA4JournalViewFromKey(journalKey) {
    try {
        const journalData = JSON.parse(localStorage.getItem(journalKey));
        if (journalData) {
            const dogName = journalData.generalInfo.dogName;
            const date = journalData.generalInfo.date;
            currentDogForJournal = dogName;
            
            // S·ª¨A: FORCE chuy·ªÉn sang pure PDF view ngay l·∫≠p t·ª©c
            setTimeout(() => {
                showPureA4JournalView(dogName, date);
            }, 200);
        } else {
            alert('Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω!');
        }
    } catch (error) {
        console.error('Error loading journal:', error);
        alert('C√≥ l·ªói khi t·∫£i nh·∫≠t k√Ω!');
    }
}

// S·ª¨A: Kh·ªüi t·∫°o khi DOM load xong v·ªõi enhanced debugging
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM Content Loaded - Initializing K9 Management System');
    
    // S·ª¨A: Kh·ªüi t·∫°o users v√† signatures ngay khi load trang
    initializeDefaultUsers();
    initializeSignatureDatabase();
    
    // S·ª¨A: ·∫®n n√∫t Dashboard b√™n ngo√†i navigation n·∫øu c√≥
    hideDashboardButtonFromNavigation();
    
    // Ki·ªÉm tra URL parameters tr∆∞·ªõc
    if (!handleURLParameters()) {
        showLoginPage();
    }
    
    // Add event listeners for "Enter" key press
    document.getElementById('username').addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            login();
        }
    });
    
    document.getElementById('password').addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            login();
        }
    });
    
    // Refresh menu khi focus window
    window.addEventListener('focus', () => {
        if (currentUserRole !== 'GUEST') {
            refreshDynamicMenus();
            console.log('‚úÖ Refreshed menus on window focus');
        }
    });
    
    // Listen cho dashboard refresh trigger
    window.addEventListener('storage', (e) => {
        if (e.key === 'dashboard_refresh_trigger') {
            if (currentUserRole !== 'GUEST') {
                refreshDynamicMenus();
                console.log('‚úÖ Refreshed menus from dashboard trigger');
            }
        }
    });
    
    console.log('‚úÖ K9 Management System initialized successfully!');
});

// Function ƒë·ªÉ ·∫©n n√∫t Dashboard b√™n ngo√†i navigation
function hideDashboardButtonFromNavigation() {
    // T√¨m v√† ·∫©n n√∫t Dashboard standalone n·∫øu c√≥
    const dashboardButton = document.querySelector('button[onclick*="showDashboardConnection"], .dashboard-btn, #dashboardButton');
    if (dashboardButton && !dashboardButton.closest('#userDropdown')) {
        dashboardButton.style.display = 'none';
    }
    
    // ·∫®n t·∫•t c·∫£ c√°c n√∫t c√≥ text "Dashboard" kh√¥ng n·∫±m trong dropdown
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach(btn => {
        if (btn.textContent.includes('Dashboard') && !btn.closest('#userDropdown')) {
            btn.style.display = 'none';
        }
    });
}

// S·ª¨A Z-INDEX: Function to display main content v·ªõi z-index th·∫•p h∆°n navigation
function showContent(type) {
    hideAllContentSections();
    document.getElementById('toggleReadButton').style.display = 'block';
    
    const content = document.getElementById('content');
    content.style.display = "block";
    content.style.justifyContent = 'flex-start';
    content.style.alignItems = 'flex-start';
    content.style.height = 'auto';
    // S·ª¨A: ƒê·∫£m b·∫£o content kh√¥ng ƒë√® l√™n navigation
    content.style.position = 'relative';
    content.style.zIndex = '1';
    
    const title = document.getElementById('title');
    
    // Hide submenus when navigating to other sections
    document.getElementById('dog-sub-menu').classList.remove('open');
    document.getElementById('journal-sub-menu').classList.remove('open');
    
    // Remove dynamic dog sub-items if any
    document.querySelectorAll('.sub-item-dynamic').forEach(el => el.remove());
    
    if (type === 'T·ªîNG QUAN') {
        title.innerText = 'T·ªîNG QUAN';
        content.innerHTML = '<p>Trong b·ªëi c·∫£nh t√¨nh h√¨nh bu√¥n l·∫≠u, v·∫≠n chuy·ªÉn tr√°i ph√©p h√†ng h√≥a, ma t√∫y v√† c√°c h√†nh vi vi ph·∫°m ph√°p lu·∫≠t qua bi√™n gi·ªõi ng√†y c√†ng di·ªÖn bi·∫øn ph·ª©c t·∫°p, tinh vi v√† c√≥ t·ªï ch·ª©c, c√¥ng t√°c ki·ªÉm so√°t, ph√°t hi·ªán, ƒë·∫•u tranh ph√≤ng ch·ªëng t·ªôi ph·∫°m ƒë·∫∑t ra nhi·ªÅu y√™u c·∫ßu, th√°ch th·ª©c m·ªõi ƒë·ªëi v·ªõi l·ª±c l∆∞·ª£ng H·∫£i quan Vi·ªát Nam. M·ªôt trong nh·ªØng bi·ªán ph√°p nghi·ªáp v·ª• quan tr·ªçng, c√≥ t√≠nh ƒë·∫∑c th√π v√† hi·ªáu qu·∫£ cao l√† s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• trong c√¥ng t√°c ki·ªÉm tra, gi√°m s√°t h·∫£i quan, ƒë·∫∑c bi·ªát trong ph√°t hi·ªán ch·∫•t ma t√∫y, h√†ng c·∫•m, v≈© kh√≠, v√† v·∫≠t ph·∫©m nguy hi·ªÉm.</p><p>Ch√≥ nghi·ªáp v·ª• kh√¥ng ch·ªâ l√† m·ªôt ph∆∞∆°ng ti·ªán k·ªπ thu·∫≠t ƒë·∫∑c bi·ªát m√† c√≤n l√† m·ªôt l·ª±c l∆∞·ª£ng h·ªó tr·ª£ tr·ª±c ti·∫øp cho c√°n b·ªô c√¥ng ch·ª©c H·∫£i quan t·∫°i c√°c c·ª≠a kh·∫©u, s√¢n bay, b·∫øn c·∫£ng, n∆°i c√≥ nguy c∆° cao v·ªÅ bu√¥n l·∫≠u v√† v·∫≠n chuy·ªÉn tr√°i ph√©p. Vi·ªác hu·∫•n luy·ªán, nu√¥i d∆∞·ª°ng, s·ª≠ d·ª•ng hi·ªáu qu·∫£ ch√≥ nghi·ªáp v·ª• ƒë√≤i h·ªèi s·ª± ƒë·∫ßu t∆∞ b√†i b·∫£n, khoa h·ªçc, v√† ƒë·ªôi ng≈© c√°n b·ªô hu·∫•n luy·ªán vi√™n chuy√™n tr√°ch c√≥ chuy√™n m√¥n s√¢u v√† t√¢m huy·∫øt.</p><p>Nh·∫±m h·ªá th·ªëng h√≥a c√°c quy ƒë·ªãnh, quy tr√¨nh, nghi·ªáp v·ª• li√™n quan ƒë·∫øn c√¥ng t√°c qu·∫£n l√Ω v√† s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• trong ng√†nh H·∫£i quan, T·ªïng c·ª•c H·∫£i quan bi√™n so·∫°n cu·ªën S·ªï tay qu·∫£n l√Ω v√† s·ª≠ d·ª•ng ch√≥ nghi·ªáp v·ª• H·∫£i quan. Cu·ªën s·ªï tay g·ªìm c√°c n·ªôi dung: gi·ªõi thi·ªáu ch·ª©c nƒÉng, nhi·ªám v·ª• c·ªßa t·ªï ch·ª©c qu·∫£n l√Ω ch√≥ nghi·ªáp v·ª•; quy tr√¨nh chƒÉm s√≥c, nu√¥i d∆∞·ª°ng, hu·∫•n luy·ªán ch√≥; ph∆∞∆°ng ph√°p khai th√°c s·ª≠ d·ª•ng trong th·ª±c t·∫ø; h·ªì s∆° qu·∫£n l√Ω t·ª´ng c√° th·ªÉ ch√≥; c√¥ng t√°c ki·ªÉm tra, ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng; v√† nh·ªØng l∆∞u √Ω trong ph·ªëi h·ª£p v·ªõi c√°c ƒë∆°n v·ªã li√™n quan.</p><p>T·ªïng c·ª•c H·∫£i quan ghi nh·∫≠n v√† ƒë√°nh gi√° cao nh·ªØng ƒë√≥ng g√≥p t√¢m huy·∫øt c·ªßa c√°c ƒë∆°n v·ªã, c√°n b·ªô, hu·∫•n luy·ªán vi√™n ch√≥ nghi·ªáp v·ª• ƒë√£ v√† ƒëang tr·ª±c ti·∫øp tham gia x√¢y d·ª±ng l·ª±c l∆∞·ª£ng n√†y ng√†y c√†ng ch√≠nh quy, hi·ªán ƒë·∫°i v√† hi·ªáu qu·∫£. ƒê·ªìng th·ªùi, ch√∫ng t√¥i mong mu·ªën ti·∫øp t·ª•c nh·∫≠n ƒë∆∞·ª£c c√°c √Ω ki·∫øn ƒë√≥ng g√≥p t·ª´ c√°c chuy√™n gia, c√°n b·ªô trong v√† ngo√†i ng√†nh nh·∫±m ho√†n thi·ªán h∆°n n·ªØa h·ªá th·ªëng t√†i li·ªáu ph·ª•c v·ª• c√¥ng t√°c n√†y.</p><p>S·ªï tay l√† t√†i li·ªáu nghi·ªáp v·ª• n·ªôi b·ªô, ph·ª•c v·ª• cho c√¥ng ch·ª©c, hu·∫•n luy·ªán vi√™n v√† c√°c ƒë∆°n v·ªã li√™n quan trong ng√†nh H·∫£i quan. Trong tr∆∞·ªùng h·ª£p c√°c vƒÉn b·∫£n ph√°p l√Ω c√≥ thay ƒë·ªïi, c√°c n·ªôi dung trong s·ªï tay s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† ƒëi·ªÅu ch·ªânh cho ph√π h·ª£p.</p><p><strong>Xin tr√¢n tr·ªçng c·∫£m ∆°n!</strong></p>';
    } else if (type === 'H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§') {
        title.innerText = 'H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§';
        content.innerHTML = '<p>Vui l√≤ng ch·ªçn t·ª´ng ch√≥ nghi·ªáp v·ª• ·ªü menu b√™n tr√°i.</p><p>ƒê√¢y l√† H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§:</p><ul><li>H·ªì s∆° CNV BI</li><li>H·ªì s∆° CNV LU</li><li>H·ªì s∆° CNV R·∫æCH</li><li>H·ªì s∆° CNV KY</li><li>H·ªì s∆° CNV REX</li></ul>';
    } else if (type === 'QUY TR√åNH CHƒÇM S√ìC') {
        title.innerText = 'QUY TR√åNH CHƒÇM S√ìC';
        content.innerHTML = '<h3>ƒêi·ªÅu 12. Nguy√™n t·∫Øc chƒÉm s√≥c, hu·∫•n luy·ªán ch√≥ nghi·ªáp v·ª•</h3><p>1. Vi·ªác chƒÉm s√≥c, hu·∫•n luy·ªán CNV l√† c√¥ng vi·ªác ph·∫£i th·ª±c hi·ªán h·∫±ng ng√†y. Hu·∫•n luy·ªán vi√™n ch·ªãu tr√°ch nhi·ªám ho√†n to√†n vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe v√† hu·∫•n luy·ªán CNV do m√¨nh qu·∫£n l√Ω.</p><p>2. Hu·∫•n luy·ªán th∆∞·ªùng xuy√™n, li√™n t·ª•c trong su·ªët qu√° tr√¨nh s·ª≠ d·ª•ng CNV.</p><p>3. Coi tr·ªçng c·∫£ ba n·ªôi dung: hu·∫•n luy·ªán th·ªÉ l·ª±c - k·ªπ lu·∫≠t, hu·∫•n luy·ªán c·ªßng c·ªë v√† hu·∫•n luy·ªán n√¢ng cao nƒÉng l·ª±c.</p><p>4. Hu·∫•n luy·ªán s√°t th·ª±c t·∫ø ƒë·ªãa b√†n n∆°i c√¥ng t√°c c·ªßa hu·∫•n luy·ªán vi√™n v√† m√¥i tr∆∞·ªùng t√°c nghi·ªáp c·ªßa CNV.</p><p>5. Quy ƒë·ªãnh n√†y kh√¥ng √°p d·ª•ng ƒë·ªëi v·ªõi hu·∫•n luy·ªán vi√™n, CNV ƒëang t·∫≠p hu·∫•n t·∫°i c√°c c∆° s·ªü s∆° hu·∫•n luy·ªán CNV.</p><p>6. M·ªçi tr∆∞·ªùng h·ª£p CNV b·ªã b·ªánh, suy gi·∫£m s·ª©c kh·ªèe, ho·∫∑c b·ªã ch·∫øt b·ªüi y·∫øu t·ªë ch·ªß quan, thi·∫øu tr√°ch nhi·ªám; CNV b·ªã suy gi·∫£m nƒÉng l·ª±c t√°c nghi·ªáp, ho·∫∑c kh√¥ng ƒë∆∞·ª£c hu·∫•n luy·ªán v√† s·ª≠ d·ª•ng theo quy ƒë·ªãnh ƒë·ªÅu ph·∫£i ki·ªÉm ƒëi·ªÉm, xem x√©t tr√°ch nhi·ªám hu·∫•n luy·ªán vi√™n, c√°c ƒë∆°n v·ªã li√™n quan v√† ƒë∆°n v·ªã qu·∫£n l√Ω. N·∫øu c√≥ vi ph·∫°m c√°c quy ƒë·ªãnh do l·ªói ch·ªß quan th√¨ b·ªã b·∫Øt ƒë∆∞a, xem x√©t k·ª∑ lu·∫≠t.</p>';
    } else {
        title.innerText = type;
        content.innerHTML = '<p>ƒê√¢y l√† n·ªôi dung c·ªßa m·ª•c "' + type + '". B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t n·ªôi dung sau.</p>';
    }
    
    document.getElementById("searchResults").style.display = "none";
}

// Function hi·ªÉn th·ªã dog profile t·ª´ DASHBOARD DATA v·ªõi t√™n ƒë√∫ng HLV
function showDogProfileForm(dogName) {
    // Ki·ªÉm tra quy·ªÅn c·ªßa Trainer
    if (currentUserRole === 'TRAINER' && !currentUserAssignedDogs.includes(dogName)) {
        alert('B·∫°n ch·ªâ c√≥ th·ªÉ xem h·ªì s∆° ch√≥ ƒë∆∞·ª£c ph√¢n c√¥ng!');
        return;
    }
    
    hideAllContentSections();
    document.getElementById('toggleReadButton').style.display = 'block';
    
    const content = document.getElementById('content');
    content.style.display = "block";
    content.style.justifyContent = 'flex-start';
    content.style.alignItems = 'flex-start';
    content.style.height = 'auto';
    // S·ª¨A: ƒê·∫£m b·∫£o content kh√¥ng ƒë√® l√™n navigation
    content.style.position = 'relative';
    content.style.zIndex = '1';
    
    const title = document.getElementById('title');
    title.innerText = dogName;
    
    // L·∫•y data t·ª´ dashboard thay v√¨ hardcode
    const dashboardDogs = JSON.parse(localStorage.getItem('k9_dogs')) || [];
    const currentDog = dashboardDogs.find(d => d.name === dogName);
    
    // READ-ONLY cho Trainer
    const isReadOnly = currentUserRole === 'TRAINER';
    const readOnlyAttr = isReadOnly ? 'readonly' : '';
    const saveButtonDisplay = isReadOnly ? 'style="display: none;"' : '';
    
    // Enhanced dog profile display with better styling
    content.innerHTML = `
        <div class="dog-profile-container">
            ${isReadOnly ? '<div class="read-only-banner">CH·∫æ ƒê·ªò XEM - Kh√¥ng th·ªÉ ch·ªânh s·ª≠a</div>' : ''}
            
            <div class="dog-profile-header">
                <img id="dog_profile_image" src="${dogProfiles[dogName]?.image || 'images/default_dog.jpg'}" alt="·∫¢nh CNV" class="profile-dog-image">
                <div>
                    <h3>S∆† Y·∫æU L√ù L·ªäCH</h3>
                    <div class="status-indicator status-active">HO·∫†T ƒê·ªòNG</div>
                </div>
            </div>

            <div class="profile-section">
                <h3>Th√¥ng tin c∆° b·∫£n</h3>
                <div class="profile-field">
                    <label>1. T√™n CNV:</label>
                    <input type="text" id="syll_name" value="${currentDog?.name || dogName}" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>2. S·ªë hi·ªáu:</label>
                    <input type="text" id="syll_sohieu" value="${currentDog?.chipId || ''}" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>3. Ng√†y sinh:</label>
                    <input type="date" id="syll_ngaysinh" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>4. N∆°i sinh:</label>
                    <input type="text" id="syll_noisinh" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>5. Gi·ªëng CNV:</label>
                    <input type="text" id="syll_giong" value="${currentDog?.breed || ''}" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>6. T√≠nh bi·ªát:</label>
                    <input type="text" id="syll_tinhbiet" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>7. ƒê·∫∑c ƒëi·ªÉm ngo·∫°i h√¨nh:</label>
                    <input type="text" id="syll_dacdiem" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>8. M√†u l√¥ng:</label>
                    <input type="text" id="syll_maulong" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>9. S·ªë gi√° tr·ªã:</label>
                    <input type="text" id="syll_giatri" ${readOnlyAttr}>
                </div>
            </div>

            <div class="profile-section">
                <h3>D√≤ng h·ªç</h3>
                <div class="profile-field">
                    <label>1. T√™n b·ªë:</label>
                    <input type="text" id="dongho_ba" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>2. Ng√†y sinh:</label>
                    <input type="date" id="dongho_ngaysinh" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>3. N∆°i sinh:</label>
                    <input type="text" id="dongho_noisinh" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>4. Gi·ªëng:</label>
                    <input type="text" id="dongho_giong" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>5. ƒê·∫∑c ƒëi·ªÉm ngo·∫°i h√¨nh:</label>
                    <input type="text" id="dongho_dacdiem" ${readOnlyAttr}>
                </div>
            </div>

            <div class="profile-section">
                <div class="hlv-profile-header">
                    <img id="hlv_profile_image" src="${hlvInfo.image || 'images/default_hvl.jpg'}" alt="·∫¢nh HLV" class="profile-hlv-image">
                    <h3>HU·∫§N LUY·ªÜN VI√äN QU·∫¢N L√ù</h3>
                </div>
                <div class="profile-field">
                    <label>1. H·ªç v√† t√™n HLV:</label>
                    <input type="text" id="hlv_ten" value="${currentUserName || hlvInfo.name}" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>2. Ng√†y th√°ng nƒÉm sinh HLV:</label>
                    <input type="date" id="hlv_ngaysinh" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>3. C·∫•p b·∫≠c:</label>
                    <input type="text" id="hlv_capbac" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>4. Ch·ª©c v·ª•:</label>
                    <input type="text" id="hlv_chucvu" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>5. ƒê∆°n v·ªã:</label>
                    <input type="text" id="hlv_donvi" ${readOnlyAttr}>
                </div>
                <div class="profile-field">
                    <label>6. Qua tr∆∞·ªùng ƒë√†o t·∫°o:</label>
                    <input type="text" id="hlv_daotao" ${readOnlyAttr}>
                </div>
            </div>

            <div class="profile-actions">
                <button onclick="saveDogProfile('${dogName}')" class="profile-btn profile-btn-success" ${saveButtonDisplay}>
                    üíæ L∆∞u h·ªì s∆°
                </button>
                <button onclick="exportDogProfile('${dogName}')" class="profile-btn profile-btn-primary">
                    üìÑ Xu·∫•t PDF
                </button>
                <button onclick="printDogProfile('${dogName}')" class="profile-btn profile-btn-secondary">
                    üñ®Ô∏è In h·ªì s∆°
                </button>
            </div>
        </div>
    `;
    
    loadDogProfile(dogName);
}

// Function to save dog profile
function saveDogProfile(dogName) {
    if (currentUserRole === 'TRAINER') {
        alert('B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a h·ªì s∆°!');
        return;
    }
    
    const data = {
        name: document.getElementById('syll_name').value,
        sohieu: document.getElementById('syll_sohieu').value,
        ngaysinh: document.getElementById('syll_ngaysinh').value,
        noisinh: document.getElementById('syll_noisinh').value,
        giong: document.getElementById('syll_giong').value,
        tinhbiet: document.getElementById('syll_tinhbiet').value,
        dacdiem: document.getElementById('syll_dacdiem').value,
        maulong: document.getElementById('syll_maulong').value,
        giatri: document.getElementById('syll_giatri').value,
        dongho_ba: document.getElementById('dongho_ba').value,
        dongho_ngaysinh: document.getElementById('dongho_ngaysinh').value,
        dongho_noisinh: document.getElementById('dongho_noisinh').value,
        dongho_giong: document.getElementById('dongho_giong').value,
        dongho_dacdiem: document.getElementById('dongho_dacdiem').value,
        hlv_ten: document.getElementById('hlv_ten').value,
        hlv_ngaysinh: document.getElementById('hlv_ngaysinh').value,
        hlv_capbac: document.getElementById('hlv_capbac').value,
        hlv_chucvu: document.getElementById('hlv_chucvu').value,
        hlv_donvi: document.getElementById('hlv_donvi').value,
        hlv_daotao: document.getElementById('hlv_daotao').value
    };
    
    localStorage.setItem('profile_' + dogName, JSON.stringify(data));
    console.log('H·ªì s∆° ' + dogName + ' ƒë√£ ƒë∆∞·ª£c l∆∞u!');
}

// Function to load dog profile
function loadDogProfile(dogName) {
    const data = localStorage.getItem('profile_' + dogName);
    if (data) {
        const profile = JSON.parse(data);
        document.getElementById('syll_name').value = profile.name || '';
        document.getElementById('syll_sohieu').value = profile.sohieu || '';
        document.getElementById('syll_ngaysinh').value = profile.ngaysinh || '';
        document.getElementById('syll_noisinh').value = profile.noisinh || '';
        document.getElementById('syll_giong').value = profile.giong || '';
        document.getElementById('syll_tinhbiet').value = profile.tinhbiet || '';
        document.getElementById('syll_dacdiem').value = profile.dacdiem || '';
        document.getElementById('syll_maulong').value = profile.maulong || '';
        document.getElementById('syll_giatri').value = profile.giatri || '';
        document.getElementById('dongho_ba').value = profile.dongho_ba || '';
        document.getElementById('dongho_ngaysinh').value = profile.dongho_ngaysinh || '';
        document.getElementById('dongho_noisinh').value = profile.noisinh || '';
        document.getElementById('dongho_giong').value = profile.dongho_giong || '';
        document.getElementById('dongho_dacdiem').value = profile.dongho_dacdiem || '';
        document.getElementById('hlv_ten').value = profile.hlv_ten || currentUserName || hlvInfo.name;
        document.getElementById('hlv_ngaysinh').value = profile.hlv_ngaysinh || '';
        document.getElementById('hlv_capbac').value = profile.hlv_capbac || '';
        document.getElementById('hlv_chucvu').value = profile.hlv_chucvu || '';
        document.getElementById('hlv_donvi').value = profile.hlv_donvi || '';
        document.getElementById('hlv_daotao').value = profile.hlv_daotao || '';
    } else {
        document.getElementById('hlv_ten').value = currentUserName || hlvInfo.name;
    }
}

// Function to export dog profile to PDF
function exportDogProfile(dogName) {
    const profileContainer = document.querySelector('.dog-profile-container');
    if (!profileContainer) {
        alert('Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒë·ªÉ xu·∫•t PDF!');
        return;
    }

    // Hide action buttons for PDF export
    const actionButtons = profileContainer.querySelector('.profile-actions');
    if (actionButtons) {
        actionButtons.style.display = 'none';
    }

    // Generate PDF
    html2canvas(profileContainer, {
        scale: 2,
        useCORS: true,
        backgroundColor: '#ffffff'
    }).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jspdf.jsPDF('p', 'mm', 'a4');
        
        const imgWidth = 210;
        const pageHeight = 295;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        let heightLeft = imgHeight;

        let position = 0;

        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;

        while (heightLeft >= 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
        }

        pdf.save(`Ho_so_${dogName}_${new Date().toISOString().split('T')[0]}.pdf`);
        
        // Show action buttons again
        if (actionButtons) {
            actionButtons.style.display = 'flex';
        }
        
        alert('‚úÖ H·ªì s∆° ƒë√£ ƒë∆∞·ª£c xu·∫•t PDF th√†nh c√¥ng!');
    }).catch(error => {
        console.error('L·ªói khi xu·∫•t PDF:', error);
        alert('‚ùå C√≥ l·ªói khi xu·∫•t PDF. Vui l√≤ng th·ª≠ l·∫°i!');
        
        // Show action buttons again
        if (actionButtons) {
            actionButtons.style.display = 'flex';
        }
    });
}

// Function to print dog profile
function printDogProfile(dogName) {
    const profileContainer = document.querySelector('.dog-profile-container');
    if (!profileContainer) {
        alert('Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒë·ªÉ in!');
        return;
    }

    // Hide action buttons for printing
    const actionButtons = profileContainer.querySelector('.profile-actions');
    if (actionButtons) {
        actionButtons.style.display = 'none';
    }

    // Create print window
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>H·ªì s∆° ${dogName}</title>
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        margin: 20px; 
                        color: #333;
                    }
                    .dog-profile-container { 
                        max-width: 100%; 
                        margin: 0 auto; 
                    }
                    .dog-profile-header { 
                        background: #007bff; 
                        color: white; 
                        padding: 20px; 
                        border-radius: 10px; 
                        margin-bottom: 20px;
                        display: flex;
                        align-items: center;
                        gap: 20px;
                    }
                    .profile-dog-image { 
                        width: 80px; 
                        height: 80px; 
                        border-radius: 50%; 
                        border: 3px solid white;
                    }
                    .profile-section { 
                        background: #f8f9fa; 
                        padding: 20px; 
                        margin: 15px 0; 
                        border-radius: 8px; 
                        border-left: 4px solid #007bff;
                    }
                    .profile-section h3 { 
                        color: #007bff; 
                        margin-bottom: 15px; 
                        border-bottom: 2px solid #dee2e6; 
                        padding-bottom: 10px;
                    }
                    .profile-field { 
                        display: flex; 
                        margin: 10px 0; 
                        padding: 10px; 
                        background: white; 
                        border-radius: 5px;
                    }
                    .profile-field label { 
                        font-weight: bold; 
                        min-width: 200px; 
                        margin-right: 15px;
                    }
                    .profile-field input { 
                        flex: 1; 
                        border: none; 
                        background: transparent; 
                        font-size: 14px;
                    }
                    .hlv-profile-header { 
                        background: #28a745; 
                        color: white; 
                        padding: 15px; 
                        border-radius: 8px; 
                        margin-bottom: 15px;
                        display: flex;
                        align-items: center;
                        gap: 15px;
                    }
                    .profile-hlv-image { 
                        width: 60px; 
                        height: 60px; 
                        border-radius: 50%; 
                        border: 2px solid white;
                    }
                    @media print {
                        body { margin: 0; }
                        .dog-profile-container { box-shadow: none; }
                    }
                </style>
            </head>
            <body>
                ${profileContainer.outerHTML}
            </body>
        </html>
    `);
    
    printWindow.document.close();
    printWindow.focus();
    
    // Wait for content to load then print
    setTimeout(() => {
        printWindow.print();
        printWindow.close();
        
        // Show action buttons again
        if (actionButtons) {
            actionButtons.style.display = 'flex';
        }
    }, 500);
}

// Function to perform search
function performSearch() {
    const keyword = document.getElementById("searchInput").value.trim().toLowerCase();
    const sidebarItems = document.querySelectorAll('.sidebar ul li');
    const contentDiv = document.getElementById("content");
    const searchDiv = document.getElementById("searchResults");
    
    if (keyword === "") {
        console.log("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a!");
        return;
    }
    
    let found = false;
    
    sidebarItems.forEach(item => {
        item.style.backgroundColor = '';
    });
    
    sidebarItems.forEach(item => {
        const text = item.innerText.toLowerCase();
        if (text.includes(keyword)) {
            item.style.backgroundColor = '#4e8cff';
            item.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });
            if (item.onclick) {
                item.click();
            } else if (item.querySelector('.sub-menu')) {
                const submenu = item.querySelector('.sub-menu');
                if (submenu) {
                    submenu.classList.toggle('open');
                }
            } else if (item.closest('.sub-menu')) {
                const parentLi = item.closest('.sub-menu').previousElementSibling;
                if (parentLi && parentLi.querySelector('.sub-menu')) {
                    parentLi.querySelector('.sub-menu').classList.add('open');
                    item.click();
                }
            } else {
                const contentName = item.innerText.replace(/üê∂|‚ûï|üîß|üß†/g, '').trim();
                if (contentName === 'T·ªîNG QUAN' || contentName === 'QUY TR√åNH CHƒÇM S√ìC' || contentName === 'QUY TR√åNH S·ª¨ D·ª§NG' || contentName === 'QUY TR√åNH HU·∫§N LUY·ªÜN' || contentName === 'VIDEO H∆Ø·ªöNG D·∫™N') {
                    showContent(contentName);
                }
            }
            found = true;
        }
    });
    
    if (!found) {
        const currentContentHtml = contentDiv.innerHTML;
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = currentContentHtml;
        const allParagraphs = tempDiv.querySelectorAll("p, h1, h2, h3, h4, li");
        
        let resultHTML = "";
        let contentFound = false;
        
        allParagraphs.forEach(el => {
            const text = el.innerText.toLowerCase();
            if (text.includes(keyword)) {
                const regex = new RegExp('(' + keyword + ')', 'gi');
                const highlighted = el.innerHTML.replace(regex, '<mark>$1</mark>');
                resultHTML += '<p>' + highlighted + '</p>';
                contentFound = true;
            }
        });
        
        if (contentFound) {
            contentDiv.style.display = 'none';
            searchDiv.style.display = 'block';
            searchDiv.innerHTML = '<h3>K·∫øt qu·∫£ t√¨m ki·∫øm cho "' + keyword + '":</h3><div class="search-results-content">' + resultHTML + '</div><button onclick="backToMainContent()">Quay l·∫°i</button>';
            found = true;
        }
    }
    
    if (!found) {
        console.log('Kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a "' + keyword + '"!');
    }
}

// Function to go back to main content
function backToMainContent() {
    document.getElementById("searchResults").style.display = "none";
    document.getElementById("content").style.display = "block";
    showContent(document.getElementById('title').innerText);
}

let isSpeaking = false;
let currentUtterance = null;

// Function to toggle speech
function toggleSpeech() {
    const contentText = document.getElementById('content').innerText;
    const toggleButton = document.getElementById('toggleReadButton');
    
    if (isSpeaking) {
        speechSynthesis.cancel();
        isSpeaking = false;
        toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
    } else {
        currentUtterance = new SpeechSynthesisUtterance(contentText);
        const voices = speechSynthesis.getVoices();
        const vietnameseVoice = voices.find(v => v.lang === 'vi-VN');
        
        if (vietnameseVoice) {
            currentUtterance.voice = vietnameseVoice;
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát. ƒêang d√πng gi·ªçng m·∫∑c ƒë·ªãnh.");
        }
        
        currentUtterance.onend = () => {
            isSpeaking = false;
            toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
        };
        
        currentUtterance.onerror = (event) => {
            console.error('L·ªói khi ƒë·ªçc:', event.error);
            isSpeaking = false;
            toggleButton.innerText = 'üîä ƒê·ªçc n·ªôi dung';
        };
        
        speechSynthesis.speak(currentUtterance);
        isSpeaking = true;
        toggleButton.innerText = '‚èπÔ∏è D·ª´ng ƒë·ªçc';
    }
}

// Function to toggle "H·ªí S∆† QU·∫¢N L√ù CH√ì NGHI·ªÜP V·ª§" submenu
function toggleSubMenu() {
    const submenu = document.getElementById('dog-sub-menu');
    const journalSubmenu = document.getElementById('journal-sub-menu');
    
    // ƒê√≥ng journal submenu n·∫øu ƒëang m·ªü
    journalSubmenu.classList.remove('open');
    
    // Toggle dog submenu
    submenu.classList.toggle('open');
}

// Function to toggle "S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN" submenu
function toggleJournalMenu() {
    const submenu = document.getElementById('journal-sub-menu');
    const dogSubmenu = document.getElementById('dog-sub-menu');
    
    // ƒê√≥ng dog submenu n·∫øu ƒëang m·ªü
    dogSubmenu.classList.remove('open');
    
    // S·ª¨A: Force update journal menu cho Manager tr∆∞·ªõc khi toggle
    if (currentUserRole === 'MANAGER') {
        console.log('üîÑ Force updating journal menu for Manager');
        updateJournalSubMenuForManager();
    }
    
    // Toggle journal submenu
    submenu.classList.toggle('open');
}

// Function showJournalEditForm - S·ª¨A: MANAGER T·ª∞ ƒê·ªòNG V√ÄO CH·∫æ ƒê·ªò DUY·ªÜT
function showJournalEditForm(dogName, date = null) {
    // S·ª¨A: Manager t·ª± ƒë·ªông chuy·ªÉn sang ch·∫ø ƒë·ªô duy·ªát nh·∫≠t k√Ω
    if (currentUserRole === 'MANAGER') {
        console.log('üè¢ Manager detected - redirecting to approval mode');
        showAllPendingJournalsForManager();
        return;
    }
    
    // Ki·ªÉm tra quy·ªÅn c·ªßa Trainer
    if (currentUserRole === 'TRAINER' && !currentUserAssignedDogs.includes(dogName)) {
        alert('B·∫°n ch·ªâ c√≥ th·ªÉ vi·∫øt nh·∫≠t k√Ω cho ch√≥ ƒë∆∞·ª£c ph√¢n c√¥ng!');
        return;
    }
    
    hideAllContentSections();
    document.getElementById('toggleReadButton').style.display = 'block';
    
    const content = document.getElementById('content');
    content.style.display = 'block';
    content.style.justifyContent = 'flex-start';
    content.style.alignItems = 'flex-start';
    content.style.height = 'auto';
    // S·ª¨A: ƒê·∫£m b·∫£o form kh√¥ng ƒë√® l√™n navigation
    content.style.position = 'relative';
    content.style.zIndex = '1';
    
    const title = document.getElementById('title');
    currentDogForJournal = dogName;
    title.innerText = 'S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN - CNV ' + dogName;
    
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    const defaultDate = yyyy + '-' + mm + '-' + dd;
    
    // Ki·ªÉm tra role ƒë·ªÉ hi·ªÉn th·ªã form t∆∞∆°ng ·ª©ng
    const roleInfo = currentUserRole === 'TRAINER' ? '<p style="color: blue; font-weight: bold;">üéØ TRAINER MODE - Ch·ªâ vi·∫øt nh·∫≠t k√Ω cho ' + dogName + '</p>' : '';
    
    // ·∫®n "L√£nh ƒë·∫°o ƒë∆°n v·ªã duy·ªát" cho TRAINER
    const leaderApprovalSection = currentUserRole === 'TRAINER' ? '' : '<div class="approval-box leader-approval"><h3>L√£nh ƒë·∫°o ƒë∆°n v·ªã duy·ªát</h3><div class="signature-area"><label for="leader_comment">√ù ki·∫øn:</label><textarea id="leader_comment" rows="3"></textarea><p>Tr·∫°ng th√°i: <span class="approval-status">[Ch∆∞a duy·ªát]</span></p><div id="leader-signature-display"></div><button class="btn-approve" onclick="approveJournal()">K√Ω</button></div></div>';
    
    const foodTypesOptions1 = FOOD_TYPES.map(food => '<label><input type="checkbox" data-food-value="' + food + '" onchange="updateFoodDisplay(\'lunchFoodDisplayBox\', \'lunchFoodOptions\', \'lunchFoodOther\')">' + food + '</label>').join('');
    
    const foodTypesOptions2 = FOOD_TYPES.map(food => '<label><input type="checkbox" data-food-value="' + food + '" onchange="updateFoodDisplay(\'dinnerFoodDisplayBox\', \'dinnerFoodOptions\', \'dinnerFoodOther\')">' + food + '</label>').join('');
    
    content.innerHTML = roleInfo + '<div class="journal-header-actions"><button class="btn-create-new-journal" onclick="createNewJournal()">Nh·∫≠t k√Ω m·ªõi +</button><button class="btn-view-old-journals" onclick="viewOldJournals()">Xem nh·∫≠t k√Ω c≈©</button></div><div class="journal-section info-general"><h2>I. TH√îNG TIN CHUNG</h2><div class="info-general-grid"><div class="info-item-group journal-date-field"><label for="journal_date">Ng√†y ghi:</label><input type="date" id="journal_date" value="' + (date || defaultDate) + '" required></div><div class="info-item-group"><label for="journal_hlv">Hu·∫•n luy·ªán vi√™n:</label><input type="text" id="journal_hlv" value="' + (currentUserName || hlvInfo.name) + ' (S·ªë hi·ªáu: ' + hlvInfo.id + ')" readonly></div><div class="info-item-group"><label for="journal_dog_name">T√™n CNV:</label><input type="text" id="journal_dog_name" value="' + dogName + '" readonly></div></div></div><div class="journal-section training-activity"><h2>II. HO·∫†T ƒê·ªòNG HU·∫§N LUY·ªÜN</h2><div id="training-blocks-container"><!-- Training blocks will be dynamically added here --></div><div class="training-activity-buttons"><button class="add-block add-training-block" onclick="addTrainingBlock()">Th√™m Ca +</button><button class="remove-block remove-training-block" onclick="removeLastTrainingBlock()">X√≥a Ca HL</button></div><div class="textarea-block"><label for="journal_hlv_comment">ƒê√°nh gi√° chung c·ªßa Hu·∫•n luy·ªán vi√™n:</label><textarea id="journal_hlv_comment" rows="4"></textarea></div></div><div class="journal-section care-block"><h2>III. CHƒÇM S√ìC & NU√îI D∆Ø·ª†NG</h2><!-- Care and feeding section content --><div class="meal-row"><div class="meal-part"><div class="meal-header-time"><h3>B·ªØa tr∆∞a:</h3><label for="lunchTime">Th·ªùi gian:</label><input type="time" id="lunchTime" value="11:00"></div><div class="meal-food-details-row"><div class="meal-item"><label for="lunchAmount">S·ª©c ƒÉn:</label><select id="lunchAmount" class="appetite-select"><option value="ƒÇn h·∫øt">ƒÇn h·∫øt</option><option value="ƒÇn √≠t">ƒÇn √≠t</option><option value="Kh√¥ng ƒÉn">Kh√¥ng ƒÉn</option></select></div><div class="meal-item food-selection-group"><label>Th·ª©c ƒÉn:</label><div class="custom-food-select-wrapper"><div class="custom-dropdown-trigger" onclick="toggleFoodDropdown(\'lunchFoodOptions\')"><span class="selected-text" id="lunchFoodTriggerText">Ch·ªçn th·ª©c ƒÉn</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="lunchFoodOptions">' + foodTypesOptions1 + '</div></div><span class="food-selected-display-box" id="lunchFoodDisplayBox">Ch∆∞a ch·ªçn</span><input type="text" id="lunchFoodOther" class="hidden" placeholder="Th·ª©c ƒÉn kh√°c" onchange="updateFoodDisplay(\'lunchFoodDisplayBox\', \'lunchFoodOptions\', \'lunchFoodOther\')"></div></div></div><div class="meal-part"><div class="meal-header-time"><h3>B·ªØa chi·ªÅu:</h3><label for="dinnerTime">Th·ªùi gian:</label><input type="time" id="dinnerTime" value="17:00"></div><div class="meal-food-details-row"><div class="meal-item"><label for="dinnerAmount">S·ª©c ƒÉn:</label><select id="dinnerAmount" class="appetite-select"><option value="ƒÇn h·∫øt">ƒÇn h·∫øt</option><option value="ƒÇn √≠t">ƒÇn √≠t</option><option value="Kh√¥ng ƒÉn">Kh√¥ng ƒÉn</option></select></div><div class="meal-item food-selection-group"><label>Th·ª©c ƒÉn:</label><div class="custom-food-select-wrapper"><div class="custom-dropdown-trigger" onclick="toggleFoodDropdown(\'dinnerFoodOptions\')"><span class="selected-text" id="dinnerFoodTriggerText">Ch·ªçn th·ª©c ƒÉn</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="dinnerFoodOptions">' + foodTypesOptions2 + '</div></div><span class="food-selected-display-box" id="dinnerFoodDisplayBox">Ch∆∞a ch·ªçn</span><input type="text" id="dinnerFoodOther" class="hidden" placeholder="Th·ª©c ƒÉn kh√°c" onchange="updateFoodDisplay(\'dinnerFoodDisplayBox\', \'dinnerFoodOptions\', \'dinnerFoodOther\')"></div></div></div></div><div class="care-checks"><label><input type="checkbox" id="care_bath"> T·∫Øm r·ª≠a</label><label><input type="checkbox" id="care_brush"> Ch·∫£i l√¥ng</label><label><input type="checkbox" id="care_wipe"> Lau l√¥ng</label></div><div class="health-status"><label><input type="radio" name="health_status" value="B√¨nh th∆∞·ªùng" checked> B√¨nh th∆∞·ªùng</label><label><input type="radio" name="health_status" value="C√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng" data-health-type="abnormal"> C√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng</label><label><input type="radio" name="health_status" value="B·ªã ·ªëm/Ch·∫•n th∆∞∆°ng" data-health-type="sick"> B·ªã ·ªëm/Ch·∫•n th∆∞∆°ng</label><input type="text" id="health_other_text" class="health-other-input hidden" placeholder="Ghi r√µ t√¨nh tr·∫°ng"></div><div class="textarea-block"><label for="journal_other_issues" class="other-issues-label">V·∫•n ƒë·ªÅ kh√°c (n·∫øu c√≥):</label><textarea id="journal_other_issues" rows="3"></textarea></div></div><div class="journal-section operation-activity"><h2>IV. HO·∫†T ƒê·ªòNG T√ÅC NGHI·ªÜP</h2><div id="operation-blocks-container"><!-- Operation blocks will be dynamically added here --></div><div class="operation-activity-buttons"><button class="add-block add-operation-block" onclick="addOperationBlock()">Th√™m Ca T√°c Nghi·ªáp</button><button class="remove-block remove-operation-block" onclick="removeLastOperationBlock()">X√≥a Ca T√°c Nghi·ªáp</button></div></div><div class="journal-section approval-section"><h2>DUY·ªÜT & K√ù</h2><div class="approval-flex-container">' + leaderApprovalSection + '<div class="approval-box hvl-submission"><h3>Hu·∫•n luy·ªán vi√™n x√°c nh·∫≠n</h3><div class="signature-area"><p>H·ªç v√† t√™n: <span id="hvl_name_display">' + (currentUserName || hlvInfo.name) + '</span></p><p>Tr·∫°ng th√°i: <span class="submission-status">(Ch∆∞a g·ª≠i duy·ªát)</span></p><div id="hvl-signature-display"></div><button class="btn-submit-hvl" onclick="submitHvlSignature()">K√Ω</button></div></div><div class="approval-box substitute-hvl-section"><h3>HLV tr·ª±c thay (n·∫øu c√≥)</h3><div class="signature-area"><label for="substitute_hvl_name">H·ªç v√† t√™n:</label><input type="text" id="substitute_hvl_name"><label for="substitute_hvl_comment">√ù ki·∫øn:</label><textarea id="substitute_hvl_comment" rows="3"></textarea><p>Tr·∫°ng th√°i: <span class="substitute-hvl-status">[Ch∆∞a k√Ω]</span></p><div id="substitute-signature-display"></div><button class="btn-substitute-hvl-approve" onclick="substituteHvlApprove()">K√Ω</button></div></div></div></div><div class="journal-action-buttons"><button class="save-journal" onclick="saveJournalData()">L∆∞u Nh·∫≠t K√Ω</button><button class="export-pdf" onclick="exportJournalToPDF(\'' + dogName + '\', document.getElementById(\'journal_date\').value)">Xu·∫•t PDF</button></div>';
    
    // Reset counters khi t·∫°o form m·ªõi
    trainingSessionCounter = 0;
    operationSessionCounter = 0;
    blockCounter = 0;
    
    loadJournalData(dogName, date || defaultDate, true);
    initializeHiddenInputs();
    setupFormEventListeners();
}

// S·ª¨A: Function showAllPendingJournalsForManager - T√åM T·∫§T C·∫¢ JOURNAL ƒê√É K√ù CH∆ØA DUY·ªÜT - FIX MANAGER WORKFLOW
function showAllPendingJournalsForManager() {
    hideAllContentSections();
    document.getElementById('toggleReadButton').style.display = 'block';
    
    const content = document.getElementById('content');
    content.style.display = 'block';
    content.style.position = 'relative';
    content.style.zIndex = '1';
    
    const title = document.getElementById('title');
    title.innerText = 'DUY·ªÜT NH·∫¨T K√ù - CH·∫æ ƒê·ªò MANAGER';
    
    console.log('üîç Manager checking for journals requiring approval...');
    
    // S·ª¨A: T√åM JOURNALS T·ª™NG C·∫¢ localStorage V√Ä pending_manager_approvals
    const allPendingJournals = [];
    const pendingList = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
    
    console.log('üìã Pending journals list:', pendingList.length);
    
    // Ki·ªÉm tra t·ª´ng journal trong danh s√°ch pending
    pendingList.forEach(pendingEntry => {
        try {
            const journalData = JSON.parse(localStorage.getItem(pendingEntry.key));
            if (journalData && journalData.approval?.hvlSignature && !journalData.approval?.leaderSignature) {
                allPendingJournals.push({
                    key: pendingEntry.key,
                    date: journalData.generalInfo.date,
                    dogName: journalData.generalInfo.dogName,
                    trainer: journalData.generalInfo.hlv,
                    submittedAt: pendingEntry.submittedAt,
                    data: journalData
                });
            }
        } catch (e) {
            console.error('Error loading pending journal:', pendingEntry.key, e);
        }
    });
    
    // S·ª¨A: BACKUP SEARCH - T√¨m th√™m trong localStorage n·∫øu c√≥ journal missed
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('journal_')) {
            try {
                const journalData = JSON.parse(localStorage.getItem(key));
                if (journalData?.approval?.hvlSignature && !journalData?.approval?.leaderSignature) {
                    // Ki·ªÉm tra xem ƒë√£ c√≥ trong danh s√°ch ch∆∞a
                    const exists = allPendingJournals.find(j => j.key === key);
                    if (!exists) {
                        allPendingJournals.push({
                            key: key,
                            date: journalData.generalInfo.date,
                            dogName: journalData.generalInfo.dogName,
                            trainer: journalData.generalInfo.hlv,
                            submittedAt: journalData.approval.submittedAt || new Date().toISOString(),
                            data: journalData
                        });
                        console.log('üìå Found missed journal:', key);
                    }
                }
            } catch (e) {
                console.error('Error checking journal:', key, e);
            }
        }
    }
    
    console.log('üìä Total journals requiring manager approval:', allPendingJournals.length);
    
    if (allPendingJournals.length === 0) {
        content.innerHTML = `<div style="text-align: center; padding: 50px; background: white; border-radius: 10px; margin: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
            <h3 style="color: #2196F3; margin-bottom: 20px;">üìã CH·∫æ ƒê·ªò MANAGER - DUY·ªÜT NH·∫¨T K√ù</h3>
            <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 20px; border-radius: 8px;">
                <h4 style="color: #155724; margin-top: 0;">‚úÖ Kh√¥ng c√≥ nh·∫≠t k√Ω n√†o c·∫ßn duy·ªát</h4>
                <p style="color: #155724;">T·∫•t c·∫£ nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c ch∆∞a c√≥ nh·∫≠t k√Ω n√†o ƒë∆∞·ª£c g·ª≠i duy·ªát.</p>
            </div>
            <button onclick="refreshManagerView()" style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; margin-top: 20px;">üîÑ L√†m m·ªõi</button>
        </div>`;
        return;
    }
    
    // S·∫Øp x·∫øp theo ng√†y g·ª≠i m·ªõi nh·∫•t
    allPendingJournals.sort((a, b) => new Date(b.submittedAt || b.date) - new Date(a.submittedAt || a.date));
    
    // S·ª¨A: HI·ªÇN THI DANH S√ÅCH V·ªöI NOTIFICATION V√Ä URGENCY
    let html = `<div style="background: white; border-radius: 10px; margin: 20px; padding: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
        <div style="background: #e3f2fd; border: 1px solid #2196f3; padding: 20px; margin-bottom: 25px; border-radius: 8px; text-align: center;">
            <h3 style="color: #1976d2; margin-top: 0;">üö® CH·∫æ ƒê·ªò MANAGER - DUY·ªÜT NH·∫¨T K√ù</h3>
            <p style="color: #1976d2; font-size: 18px; font-weight: bold;">B·∫°n c√≥ ${allPendingJournals.length} nh·∫≠t k√Ω C·∫¶N DUY·ªÜT NGAY t·ª´ c√°c hu·∫•n luy·ªán vi√™n</p>
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px; margin-top: 15px;">
                <strong>‚ö†Ô∏è L∆ØU √ù:</strong> C√°c nh·∫≠t k√Ω n√†y ƒë√£ ƒë∆∞·ª£c HLV k√Ω v√† ƒëang ch·ªù b·∫°n duy·ªát
            </div>
        </div>
        <div class="pending-journals-list">
            <h4 style="color: #333; border-bottom: 2px solid #2196f3; padding-bottom: 10px;">üìã Danh s√°ch nh·∫≠t k√Ω ch·ªù duy·ªát:</h4>`;
    
    allPendingJournals.forEach((journal, index) => {
        const isUrgent = journal.submittedAt && (new Date() - new Date(journal.submittedAt)) < 24 * 60 * 60 * 1000; // Urgent n·∫øu g·ª≠i trong 24h
        const urgentBadge = isUrgent ? '<div style="position: absolute; top: 15px; right: 15px; background: #ff4444; color: white; padding: 5px 12px; border-radius: 15px; font-size: 12px; font-weight: bold; animation: blink 1s infinite;">üö® M·ªöI</div>' : '';
        
        const signatureDate = journal.data.approval?.hvlSignature?.timestamp ? 
            new Date(journal.data.approval.hvlSignature.timestamp).toLocaleDateString('vi-VN') : 'N/A';
        
        html += `<div style="background: white; border: 2px solid ${isUrgent ? '#ff4444' : '#e3f2fd'}; padding: 20px; margin: 15px 0; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.2s; position: relative;" onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
    ${urgentBadge}
    <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: wrap;">
        <div style="flex: 1; min-width: 300px;">
            <div style="display: flex; align-items: center; margin-bottom: 12px;">
                <span style="font-size: 24px; margin-right: 10px;">üìÖ</span>
                <strong style="color: #1976d2; font-size: 18px;">Ng√†y: ${journal.date}</strong>
            </div>
            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                <span style="font-size: 20px; margin-right: 10px;">üêï</span>
                <strong style="color: #2e7d32;">CNV: ${journal.dogName}</strong>
            </div>
            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                <span style="font-size: 20px; margin-right: 10px;">üë®‚Äçüíº</span>
                <span style="color: #666;">HLV: ${journal.trainer}</span>
            </div>
            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                <span style="font-size: 20px; margin-right: 10px;">üñäÔ∏è</span>
                <span style="color: #2e7d32;">‚úÖ HLV ƒë√£ k√Ω ng√†y: ${signatureDate}</span>
            </div>
            <div style="display: flex; align-items: center; margin-bottom: 15px;">
                <span style="font-size: 20px; margin-right: 10px;">‚è∞</span>
                <span style="color: #666; font-size: 14px;">G·ª≠i l√∫c: ${new Date(journal.submittedAt || journal.date).toLocaleString('vi-VN')}</span>
            </div>
            <!-- S·ª¨A: TH√äM √î NH·∫¨N X√âT CHO MANAGER -->
            <div style="margin-top: 15px;">
                <label style="font-weight: bold; color: #1976d2; display: block; margin-bottom: 8px;">üí¨ Nh·∫≠n x√©t c·ªßa Manager:</label>
                <textarea id="managerComment_${journal.key}" rows="3" style="width: 100%; border: 1px solid #ddd; border-radius: 5px; padding: 8px; font-size: 14px; resize: vertical;" placeholder="Nh·∫≠p nh·∫≠n x√©t tr∆∞·ªõc khi k√Ω duy·ªát..."></textarea>
            </div>
        </div>
        <div style="display: flex; flex-direction: column; gap: 10px; min-width: 200px; align-items: flex-end;">
            <button class="btn-info" onclick="viewJournalForManagerApproval('${journal.key}')" style="background: #2196F3; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: background 0.3s;" onmouseover="this.style.background='#1976d2'" onmouseout="this.style.background='#2196F3'">üëÄ Xem nh·∫≠t k√Ω</button>
            <button class="btn-success" onclick="approveJournalWithComment('${journal.key}')" style="background: #4CAF50; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: background 0.3s;" onmouseover="this.style.background='#388e3c'" onmouseout="this.style.background='#4CAF50'">‚úÖ K√Ω duy·ªát</button>
        </div>
    </div>
</div>`;
    });
    
    html += `</div>
        <div style="text-align: center; margin-top: 30px; padding: 20px; border-top: 2px solid #e3f2fd;">
            <button onclick="refreshManagerView()" style="background: #ff9800; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; margin-right: 15px;">üîÑ L√†m m·ªõi danh s√°ch</button>
            <button onclick="showManagerStatistics()" style="background: #9c27b0; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold;">üìä Xem th·ªëng k√™</button>
        </div>
    </div>
    <style>
        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.5; }
        }
    </style>`;
    
    content.innerHTML = html;
    
    // S·ª¨A: MARK NOTIFICATIONS AS READ
    markManagerNotificationsAsRead();
    
    // Auto refresh m·ªói 30 gi√¢y
    setTimeout(() => {
        if (currentUserRole === 'MANAGER' && document.getElementById('title').innerText.includes('MANAGER')) {
            console.log('üîÑ Auto-refreshing manager view...');
            showAllPendingJournalsForManager();
        }
    }, 30000);
}

// S·ª¨A: Function MARK NOTIFICATIONS AS READ
function markManagerNotificationsAsRead() {
    const notifications = JSON.parse(localStorage.getItem('manager_notifications')) || [];
    const updatedNotifications = notifications.map(notif => ({
        ...notif,
        read: true
    }));
    localStorage.setItem('manager_notifications', JSON.stringify(updatedNotifications));
}

// S·ª¨A: Function XEM JOURNAL CHO MANAGER APPROVAL
// S·ª¨A: Function XEM JOURNAL CHO MANAGER APPROVAL
function viewJournalForManagerApproval(journalKey) {
    console.log('üëÄ Manager viewing journal for approval:', journalKey);
    
    // S·ª¨A: L∆∞u tr·∫°ng th√°i tr∆∞·ªõc khi chuy·ªÉn sang PDF view
    window.previousManagerView = 'PENDING_JOURNALS';
    
    // Chuy·ªÉn sang PDF view ƒë·ªÉ Manager c√≥ th·ªÉ xem chi ti·∫øt
    showA4JournalViewFromKey(journalKey);
}

// Function h·ªó tr·ª£ Manager
function refreshManagerView() {
    console.log('üîÑ Manual refresh requested by Manager');
    showAllPendingJournalsForManager();
}

function showManagerStatistics() {
    // Th·ªëng k√™ t·ªïng quan cho Manager
    let totalJournals = 0;
    let approvedJournals = 0;
    let pendingJournals = 0;
    
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('journal_')) {
            totalJournals++;
            try {
                const journalData = JSON.parse(localStorage.getItem(key));
                if (journalData.approval?.leaderSignature) {
                    approvedJournals++;
                } else if (journalData.approval?.hvlSignature) {
                    pendingJournals++;
                }
            } catch (e) {
                console.error('Error parsing journal stats:', e);
            }
        }
    }
    
    alert('üìä TH·ªêNG K√ä QU·∫¢N L√ù NH·∫¨T K√ù\n\n' +
          'üìã T·ªïng s·ªë nh·∫≠t k√Ω: ' + totalJournals + '\n' +
          '‚úÖ ƒê√£ duy·ªát: ' + approvedJournals + '\n' +
          '‚è≥ Ch·ªù duy·ªát: ' + pendingJournals + '\n' +
          'üìù Ch∆∞a ho√†n th√†nh: ' + (totalJournals - approvedJournals - pendingJournals));
}

// Function to initialize AI chat interface (placeholder) - KO GI·ªöI H·∫†N ROLE
function chatWithAI() {
    alert('ü§ñ Ch·ª©c nƒÉng Tra c·ª©u AI:\n\n‚úÖ T·∫•t c·∫£ vai tr√≤ ƒë·ªÅu c√≥ th·ªÉ truy c·∫≠p\n‚úÖ Tra c·ª©u to√†n b·ªô knowledge base\n‚úÖ Kh√¥ng b·ªã gi·ªõi h·∫°n theo ph√¢n quy·ªÅn\n\nüöß ƒêang ƒë∆∞·ª£c ph√°t tri·ªÉn...');
}

// ===== JOURNAL FUNCTIONALITY - KH√îI PH·ª§C T·ª™ FILE C≈® =====

// Generic function to handle "Other" input visibility for checkboxes
function handleCheckboxOther(checkboxElement, otherInputElement) {
    if (checkboxElement && otherInputElement) {
        const toggleOtherInput = () => {
            if (checkboxElement.checked) {
                otherInputElement.classList.remove('hidden');
            } else {
                otherInputElement.classList.add('hidden');
                otherInputElement.value = '';
            }
        };
        checkboxElement.addEventListener('change', toggleOtherInput);
        toggleOtherInput();
    }
}

// Function to initialize visibility for "Other" inputs
function initializeHiddenInputs(container = document) {
    // "Other" in Training Activity
    container.querySelectorAll('.training-block .training-other-input').forEach(input => {
        const relatedCheckbox = input.closest('.field-group')?.querySelector('.training-checkbox[value="Kh√°c"]');
        if (relatedCheckbox) {
            handleCheckboxOther(relatedCheckbox, input);
        }
    });
    
    // Training Location "Other"
    container.querySelectorAll('input[name^="training-location-group-"]').forEach(radio => {
        const otherInput = radio.closest('.field-group')?.querySelector('.location-other-input');
        if (otherInput) {
            radio.addEventListener('change', () => {
                if (radio.value === 'Kh√°c' && radio.checked) {
                    otherInput.classList.remove('hidden');
                } else {
                    otherInput.classList.add('hidden');
                    otherInput.value = '';
                }
            });
            if (radio.value === 'Kh√°c' && radio.checked) {
                otherInput.classList.remove('hidden');
            }
        }
    });
    
    // Health Status "Abnormal" or "Sick/Injured"
    container.querySelectorAll('input[name="health_status"]').forEach(radio => {
        const healthOtherTextInput = document.getElementById('health_other_text');
        if (healthOtherTextInput) {
            radio.addEventListener('change', () => {
                if (radio.checked && (radio.dataset.healthType === 'abnormal' || radio.dataset.healthType === 'sick')) {
                    healthOtherTextInput.classList.remove('hidden');
                } else {
                    healthOtherTextInput.classList.add('hidden');
                    healthOtherTextInput.value = '';
                }
            });
            if (radio.checked && (radio.dataset.healthType === 'abnormal' || radio.dataset.healthType === 'sick')) {
                healthOtherTextInput.classList.remove('hidden');
            }
        }
    });
    
    // "Other" in Operation Activity
    container.querySelectorAll('.operation-activity-row-1 .operation-other-input-1').forEach(input => {
        const relatedCheckbox = input.closest('.operation-activity-row-1')?.querySelector('.operation-checkbox-1[value="Kh√°c"]');
        if (relatedCheckbox) {
            handleCheckboxOther(relatedCheckbox, input);
        }
    });
    
    container.querySelectorAll('.operation-activity-row-2 .operation-other-input-2').forEach(input => {
        const relatedCheckbox = input.closest('.operation-activity-row-2')?.querySelector('.operation-checkbox-2[value="Kh√°c"]');
        if (relatedCheckbox) {
            handleCheckboxOther(relatedCheckbox, input);
        }
    });
}

// Function toggleFoodDropdown
function toggleFoodDropdown(optionsId) {
    const dropdown = document.getElementById(optionsId);
    if (dropdown) {
        dropdown.classList.toggle('hidden');
        // ƒê√≥ng c√°c dropdown kh√°c
        document.querySelectorAll('.custom-dropdown-options').forEach(other => {
            if (other.id !== optionsId) {
                other.classList.add('hidden');
            }
        });
    }
}

// Function updateFoodDisplay
function updateFoodDisplay(displayBoxId, optionsListId, otherFoodInputId) {
    const optionsList = document.getElementById(optionsListId);
    const displayBox = document.getElementById(displayBoxId);
    const otherFoodInput = document.getElementById(otherFoodInputId);
    
    if (!optionsList || !displayBox || !otherFoodInput) {
        console.warn('Missing elements for updateFoodDisplay: displayBoxId=' + displayBoxId + ', optionsListId=' + optionsListId + ', otherFoodInputId=' + otherFoodInputId);
        return;
    }
    
    const selectedFoods = [];
    let hasOtherSelected = false;
    
    optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        if (checkbox.checked) {
            if (checkbox.dataset.foodValue === 'Kh√°c') {
                hasOtherSelected = true;
            } else {
                selectedFoods.push(checkbox.dataset.foodValue);
            }
        }
    });
    
    if (hasOtherSelected) {
        otherFoodInput.classList.remove('hidden');
    } else {
        otherFoodInput.classList.add('hidden');
        otherFoodInput.value = '';
    }
    
    let displayText = selectedFoods.join(', ');
    if (hasOtherSelected && otherFoodInput.value.trim() !== '') {
        if (displayText !== '') {
            displayText += ', ' + otherFoodInput.value.trim();
        } else {
            displayText = otherFoodInput.value.trim();
        }
    } else if (hasOtherSelected && otherFoodInput.value.trim() === '') {
        if (displayText === '') {
            displayText = 'Kh√°c';
        } else {
            displayText += ', Kh√°c';
        }
    }
    
    displayBox.innerText = displayText || 'Ch∆∞a ch·ªçn';
    
    const triggerText = optionsList.closest('.custom-food-select-wrapper').querySelector('.selected-text');
    if (triggerText) {
        triggerText.textContent = displayText || 'Ch·ªçn th·ª©c ƒÉn';
    }
}

// Function to add a new training block
function addTrainingBlock(data = {}) {
    const container = document.getElementById('training-blocks-container');
    if (!container) {
        console.error("Error: 'training-blocks-container' not found in DOM.");
        return;
    }
    
    trainingSessionCounter++;
    const trainingNumber = trainingSessionCounter;
    blockCounter++;
    const currentBlockId = blockCounter;
    
    const newBlock = document.createElement('div');
    newBlock.classList.add('training-block');
    newBlock.setAttribute('data-block-id', currentBlockId);
    
    const drugOptionsHtml = DRUG_TYPES.map(drug => '<label><input type="checkbox" data-drug-value="' + drug + '" onchange="updateDrugDisplay(' + currentBlockId + ', 1)">' + drug + '</label>').join('');
    
    const drugOptionsHtml2 = DRUG_TYPES.map(drug => '<label><input type="checkbox" data-drug-value="' + drug + '" onchange="updateDrugDisplay(' + currentBlockId + ', 2)">' + drug + '</label>').join('');
    
    const drugOptionsHtml3 = DRUG_TYPES.map(drug => '<label><input type="checkbox" data-drug-value="' + drug + '" onchange="updateDrugDisplay(' + currentBlockId + ', 3)">' + drug + '</label>').join('');
    
    const healthManifestationsHtml1 = HEALTH_MANIFESTATIONS.map(manifest => '<label><input type="checkbox" data-manifestation-type="' + manifest.toLowerCase().replace(/\s/g, '-') + '" value="' + manifest + '" ' + (data.drugDetection && data.drugDetection[0] && data.drugDetection[0].manifestation?.includes(manifest) ? 'checked' : '') + '> ' + manifest + '</label>').join('');
    
    const healthManifestationsHtml2 = HEALTH_MANIFESTATIONS.map(manifest => '<label><input type="checkbox" data-manifestation-type="' + manifest.toLowerCase().replace(/\s/g, '-') + '" value="' + manifest + '" ' + (data.drugDetection && data.drugDetection[1] && data.drugDetection[1].manifestation?.includes(manifest) ? 'checked' : '') + '> ' + manifest + '</label>').join('');
    
    const healthManifestationsHtml3 = HEALTH_MANIFESTATIONS.map(manifest => '<label><input type="checkbox" data-manifestation-type="' + manifest.toLowerCase().replace(/\s/g, '-') + '" value="' + manifest + '" ' + (data.drugDetection && data.drugDetection[2] && data.drugDetection[2].manifestation?.includes(manifest) ? 'checked' : '') + '> ' + manifest + '</label>').join('');
    
    newBlock.innerHTML = '<div class="training-first-row"><h3>Ca ' + trainingNumber + ':</h3><div class="field-group"><label for="trainingFromTime-' + currentBlockId + '">Th·ªùi gian:</label><input type="time" id="trainingFromTime-' + currentBlockId + '" value="' + (data.fromTime || '08:00') + '"></div><div class="field-group"><label for="trainingToTime-' + currentBlockId + '">ƒê·∫øn:</label><input type="time" id="trainingToTime-' + currentBlockId + '" value="' + (data.toTime || '09:00') + '"></div><div class="field-group"><label>ƒê·ªãa ƒëi·ªÉm:</label><label><input type="radio" name="training-location-group-' + currentBlockId + '" value="S√¢n t·∫≠p" ' + (data.locationType === 'S√¢n t·∫≠p' ? 'checked' : '') + ' onchange="updateLocationVisibility(' + currentBlockId + ')"> S√¢n t·∫≠p</label><label><input type="radio" name="training-location-group-' + currentBlockId + '" value="Kh√°c" data-location-type="khac" ' + (data.locationType === 'Kh√°c' ? 'checked' : '') + ' onchange="updateLocationVisibility(' + currentBlockId + ')"> Kh√°c</label><input type="text" class="location-other-input ' + (data.locationType !== 'Kh√°c' ? 'hidden' : '') + '" id="trainingLocationOther-' + currentBlockId + '" placeholder="Ghi ƒë·ªãa ƒëi·ªÉm kh√°c" value="' + (data.locationOther || '') + '"></div></div><div class="training-second-row"><div class="field-group"><label>N·ªôi dung:</label><div class="training-content-checkboxes"><label><input type="checkbox" class="training-checkbox" id="hlNangCaoCheckbox-' + currentBlockId + '" value="HL n√¢ng cao" ' + (data.advancedTraining ? 'checked' : '') + '> HL n√¢ng cao</label><label><input type="checkbox" class="training-checkbox" id="hlCoBanCheckbox-' + currentBlockId + '" value="HL ƒë·ªông t√°c c∆° b·∫£n" ' + (data.basicTraining ? 'checked' : '') + '> HL ƒë·ªông t√°c c∆° b·∫£n</label><label><input type="checkbox" class="training-checkbox" id="hlTheLucCheckbox-' + currentBlockId + '" value="HL th·ªÉ l·ª±c" ' + (data.physicalTraining ? 'checked' : '') + '> HL th·ªÉ l·ª±c</label><label><input type="checkbox" class="training-checkbox" id="hlKhacCheckbox-' + currentBlockId + '" value="Kh√°c" ' + (data.otherTraining ? 'checked' : '') + ' onchange="toggleOtherTrainingInput(' + currentBlockId + ')"> Kh√°c</label><input type="text" class="training-other-input ' + (!data.otherTraining ? 'hidden' : '') + '" id="hlKhacText-' + currentBlockId + '" placeholder="Ghi n·ªôi dung kh√°c" value="' + (data.otherTraining || '') + '"></div></div></div><div class="drug-detection-section"><h4>HL ph√°t hi·ªán ngu·ªìn h∆°i ma t√∫y:</h4><div class="drug-detection-row"><label>L·∫ßn 1:</label><div class="custom-location-select-wrapper drug-select-wrapper-' + currentBlockId + '-1"><div class="custom-dropdown-trigger" onclick="toggleDrugDropdown(\'drugTypeOptions-' + currentBlockId + '-1\')"><span class="selected-text" id="drugTypeTriggerText-' + currentBlockId + '-1">Ch·ªçn lo·∫°i ma t√∫y</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="drugTypeOptions-' + currentBlockId + '-1">' + drugOptionsHtml + '</div></div><span class="location-selected-display-box" id="drugTypeDisplayBox-' + currentBlockId + '-1">Ch∆∞a ch·ªçn</span><input type="text" class="location-other-input hidden" id="drugTypeOther-' + currentBlockId + '-1" placeholder="Lo·∫°i ma t√∫y kh√°c" value="' + (data.drugDetection && data.drugDetection[0] ? (data.drugDetection[0].drugTypeOther || '') : '') + '" onchange="updateDrugDisplay(' + currentBlockId + ', 1)"><label>Bi·ªÉu hi·ªán:</label><div class="detection-manifestation-checkboxes detection-manifestation-1">' + healthManifestationsHtml1 + '</div><input type="text" class="detection-manifestation-other-1 hidden" id="manifestationOther-' + currentBlockId + '-1" placeholder="Bi·ªÉu hi·ªán kh√°c" value="' + (data.drugDetection && data.drugDetection[0] ? (data.drugDetection[0].manifestationOther || '') : '') + '"></div><div class="drug-detection-row"><label>L·∫ßn 2:</label><div class="custom-location-select-wrapper drug-select-wrapper-' + currentBlockId + '-2"><div class="custom-dropdown-trigger" onclick="toggleDrugDropdown(\'drugTypeOptions-' + currentBlockId + '-2\')"><span class="selected-text" id="drugTypeTriggerText-' + currentBlockId + '-2">Ch·ªçn lo·∫°i ma t√∫y</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="drugTypeOptions-' + currentBlockId + '-2">' + drugOptionsHtml2 + '</div></div><span class="location-selected-display-box" id="drugTypeDisplayBox-' + currentBlockId + '-2">Ch∆∞a ch·ªçn</span><input type="text" class="location-other-input hidden" id="drugTypeOther-' + currentBlockId + '-2" placeholder="Lo·∫°i ma t√∫y kh√°c" value="' + (data.drugDetection && data.drugDetection[1] ? (data.drugDetection[1].drugTypeOther || '') : '') + '" onchange="updateDrugDisplay(' + currentBlockId + ', 2)"><label>Bi·ªÉu hi·ªán:</label><div class="detection-manifestation-checkboxes detection-manifestation-2">' + healthManifestationsHtml2 + '</div><input type="text" class="detection-manifestation-other-2 hidden" id="manifestationOther-' + currentBlockId + '-2" placeholder="Bi·ªÉu hi·ªán kh√°c" value="' + (data.drugDetection && data.drugDetection[1] ? (data.drugDetection[1].manifestationOther || '') : '') + '"></div><div class="drug-detection-row"><label>L·∫ßn 3:</label><div class="custom-location-select-wrapper drug-select-wrapper-' + currentBlockId + '-3"><div class="custom-dropdown-trigger" onclick="toggleDrugDropdown(\'drugTypeOptions-' + currentBlockId + '-3\')"><span class="selected-text" id="drugTypeTriggerText-' + currentBlockId + '-3">Ch·ªçn lo·∫°i ma t√∫y</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="drugTypeOptions-' + currentBlockId + '-3">' + drugOptionsHtml3 + '</div></div><span class="location-selected-display-box" id="drugTypeDisplayBox-' + currentBlockId + '-3">Ch∆∞a ch·ªçn</span><input type="text" class="location-other-input hidden" id="drugTypeOther-' + currentBlockId + '-3" placeholder="Lo·∫°i ma t√∫y kh√°c" value="' + (data.drugDetection && data.drugDetection[2] ? (data.drugDetection[2].drugTypeOther || '') : '') + '" onchange="updateDrugDisplay(' + currentBlockId + ', 3)"><label>Bi·ªÉu hi·ªán:</label><div class="detection-manifestation-checkboxes detection-manifestation-3">' + healthManifestationsHtml3 + '</div><input type="text" class="detection-manifestation-other-3 hidden" id="manifestationOther-' + currentBlockId + '-3" placeholder="Bi·ªÉu hi·ªán kh√°c" value="' + (data.drugDetection && data.drugDetection[2] ? (data.drugDetection[2].manifestationOther || '') : '') + '"></div></div>';
    
    container.appendChild(newBlock);
    
    // Initialize drug displays for all attempts
    for (let i = 1; i <= 3; i++) {
        if (data.drugDetection && data.drugDetection[i-1] && data.drugDetection[i-1].selectedDrugs) {
            const optionsList = document.getElementById('drugTypeOptions-' + currentBlockId + '-' + i);
            if (optionsList) {
                optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                    checkbox.checked = data.drugDetection[i-1].selectedDrugs.includes(checkbox.dataset.drugValue);
                });
            }
        }
        updateDrugDisplay(currentBlockId, i);
    }
}

// Functions ƒë·ªÉ handle interactions trong training block
function updateLocationVisibility(blockId) {
    const otherRadio = document.querySelector('input[name="training-location-group-' + blockId + '"][value="Kh√°c"]');
    const otherInput = document.getElementById('trainingLocationOther-' + blockId);
    
    if (otherRadio && otherInput) {
        if (otherRadio.checked) {
            otherInput.classList.remove('hidden');
        } else {
            otherInput.classList.add('hidden');
            otherInput.value = '';
        }
    }
}

function toggleOtherTrainingInput(blockId) {
    const checkbox = document.getElementById('hlKhacCheckbox-' + blockId);
    const input = document.getElementById('hlKhacText-' + blockId);
    
    if (checkbox && input) {
        if (checkbox.checked) {
            input.classList.remove('hidden');
        } else {
            input.classList.add('hidden');
            input.value = '';
        }
    }
}

function toggleDrugDropdown(optionsId) {
    const dropdown = document.getElementById(optionsId);
    if (dropdown) {
        dropdown.classList.toggle('hidden');
        // ƒê√≥ng c√°c dropdown kh√°c
        document.querySelectorAll('.custom-dropdown-options').forEach(other => {
            if (other.id !== optionsId) {
                other.classList.add('hidden');
            }
        });
    }
}

// Function to add a new operation block
function addOperationBlock(data = {}) {
    const container = document.getElementById('operation-blocks-container');
    if (!container) {
        console.error("Error: 'operation-blocks-container' not found in DOM.");
        return;
    }
    
    operationSessionCounter++;
    const operationNumber = operationSessionCounter;
    blockCounter++;
    const currentBlockId = blockCounter;
    
    const newBlock = document.createElement('div');
    newBlock.classList.add('operation-block');
    newBlock.setAttribute('data-block-id', currentBlockId);
    
    const locationOptionsHtml = OPERATION_LOCATIONS.map(loc => '<label><input type="checkbox" data-location-value="' + loc + '" ' + (data.selectedLocations?.includes(loc) ? 'checked' : '') + ' onchange="updateOperationLocationDisplay(' + currentBlockId + ')">' + loc + '</label>').join('');
    
    newBlock.innerHTML = '<div class="operation-header-line" style="display: flex; align-items: center; gap: 20px; flex-wrap: wrap; margin-bottom: 10px;"><h3 style="margin: 0;">Ca ' + operationNumber + '</h3><div style="display: flex; align-items: center; gap: 8px;"><label for="operationFromTime-' + currentBlockId + '">Th·ªùi gian:</label><input type="time" id="operationFromTime-' + currentBlockId + '" value="' + (data.fromTime || '09:00') + '"></div><div style="display: flex; align-items: center; gap: 8px;"><span>ƒê·∫øn:</span><input type="time" id="operationToTime-' + currentBlockId + '" value="' + (data.toTime || '10:00') + '"></div></div><div class="operation-location-line"><label>ƒê·ªãa ƒëi·ªÉm:</label><div class="custom-location-select-wrapper"><div class="custom-dropdown-trigger" onclick="toggleOperationLocationDropdown(\'operationLocationOptions-' + currentBlockId + '\')"><span class="selected-text" id="operationLocationTriggerText-' + currentBlockId + '">Ch·ªçn ƒë·ªãa ƒëi·ªÉm</span><span class="dropdown-arrow">‚ñº</span></div><div class="custom-dropdown-options hidden" id="operationLocationOptions-' + currentBlockId + '">' + locationOptionsHtml + '<label><input type="checkbox" data-location-value="KHO NGO·∫†I QUAN" ' + (data.selectedLocations?.includes('KHO NGO·∫†I QUAN') ? 'checked' : '') + ' onchange="updateOperationLocationDisplay(' + currentBlockId + ')"> KHO NGO·∫†I QUAN</label><label><input type="checkbox" data-location-value="Khac" ' + (data.selectedLocations?.includes('Khac') ? 'checked' : '') + ' onchange="updateOperationLocationDisplay(' + currentBlockId + ')"> Kh√°c</label></div></div><span class="location-selected-display-box" id="operationLocationDisplayBox-' + currentBlockId + '">Ch∆∞a ch·ªçn</span><input type="text" class="location-kho-input hidden" id="operationLocationKho-' + currentBlockId + '" placeholder="Ghi s·ªë Kho" value="' + (data.locationKhoText || '') + '" onchange="updateOperationLocationDisplay(' + currentBlockId + ')"><input type="text" class="location-other-input hidden" id="operationLocationOther-' + currentBlockId + '" placeholder="Ghi ƒë·ªãa ƒëi·ªÉm kh√°c" value="' + (data.locationOtherText || '') + '" onchange="updateOperationLocationDisplay(' + currentBlockId + ')"></div><div class="operation-activity-row-1"><label>N·ªôi dung:</label><label><input type="checkbox" class="operation-checkbox-1" id="checkGoods-' + currentBlockId + '" value="Ki·ªÉm tra h√†ng h√≥a XNK" ' + (data.checkGoods ? 'checked' : '') + '> Ki·ªÉm tra h√†ng h√≥a XNK</label><label><input type="checkbox" class="operation-checkbox-1" id="checkLuggage-' + currentBlockId + '" value="Ki·ªÉm tra h√†nh l√Ω, ph∆∞∆°ng ti·ªán XNC" ' + (data.checkLuggage ? 'checked' : '') + '> Ki·ªÉm tra h√†nh l√Ω, ph∆∞∆°ng ti·ªán XNC</label><label><input type="checkbox" class="operation-checkbox-1" id="opKhacCheckbox1-' + currentBlockId + '" value="Kh√°c" ' + (data.otherOperation1 ? 'checked' : '') + ' onchange="toggleOperationOtherInput(' + currentBlockId + ', 1)"> Kh√°c</label><input type="text" class="operation-other-input-1 ' + (!data.otherOperation1 ? 'hidden' : '') + '" id="opKhacText1-' + currentBlockId + '" placeholder="Ghi n·ªôi dung kh√°c" value="' + (data.otherOperation1 || '') + '"></div><div class="operation-activity-row-2"><label><input type="checkbox" class="operation-checkbox-2" id="fieldTraining-' + currentBlockId + '" value="HL n√¢ng cao t·∫°i hi·ªán tr∆∞·ªùng" ' + (data.fieldTraining ? 'checked' : '') + '> HL n√¢ng cao t·∫°i hi·ªán tr∆∞·ªùng</label><label><input type="checkbox" class="operation-checkbox-2" id="patrol-' + currentBlockId + '" value="Tu·∫ßn tra ki·ªÉm so√°t" ' + (data.patrol ? 'checked' : '') + '> Tu·∫ßn tra ki·ªÉm so√°t</label><label><input type="checkbox" class="operation-checkbox-2" id="opKhacCheckbox2-' + currentBlockId + '" value="Kh√°c" ' + (data.otherOperation2 ? 'checked' : '') + ' onchange="toggleOperationOtherInput(' + currentBlockId + ', 2)"> Kh√°c</label><input type="text" class="operation-other-input-2 ' + (!data.otherOperation2 ? 'hidden' : '') + '" id="opKhacText2-' + currentBlockId + '" placeholder="Ghi n·ªôi dung kh√°c" value="' + (data.otherOperation2 || '') + '"></div><div class="textarea-block operation-issues-block"><label for="operation_other_issues_' + currentBlockId + '">V·∫•n ƒë·ªÅ kh√°c:</label><textarea id="operation_other_issues_' + currentBlockId + '" rows="3">' + (data.otherIssues || '') + '</textarea></div>';
    
    container.appendChild(newBlock);
    updateOperationLocationDisplay(currentBlockId);
}

// Functions ƒë·ªÉ handle operation block interactions
function toggleOperationLocationDropdown(optionsId) {
    const dropdown = document.getElementById(optionsId);
    if (dropdown) {
        dropdown.classList.toggle('hidden');
        document.querySelectorAll('.custom-dropdown-options').forEach(other => {
            if (other.id !== optionsId) {
                other.classList.add('hidden');
            }
        });
    }
}

function toggleOperationOtherInput(blockId, rowNumber) {
    const checkbox = document.getElementById('opKhacCheckbox' + rowNumber + '-' + blockId);
    const input = document.getElementById('opKhacText' + rowNumber + '-' + blockId);
    
    if (checkbox && input) {
        if (checkbox.checked) {
            input.classList.remove('hidden');
        } else {
            input.classList.add('hidden');
            input.value = '';
        }
    }
}

// Function: Update drug type display for detection attempts
function updateDrugDisplay(blockId, attemptNumber) {
    console.log('Updating drug display for block ' + blockId + ', attempt ' + attemptNumber);
    
    const optionsList = document.getElementById('drugTypeOptions-' + blockId + '-' + attemptNumber);
    const displayBox = document.getElementById('drugTypeDisplayBox-' + blockId + '-' + attemptNumber);
    const otherInput = document.getElementById('drugTypeOther-' + blockId + '-' + attemptNumber);
    
    if (!optionsList || !displayBox || !otherInput) {
        console.warn('Missing elements for updateDrugDisplay for block ' + blockId + ', attempt ' + attemptNumber + '.');
        return;
    }
    
    const selectedDrugs = [];
    let isKhacSelected = false;
    
    optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        if (checkbox.checked) {
            if (checkbox.dataset.drugValue === 'Kh√°c') {
                isKhacSelected = true;
            } else {
                selectedDrugs.push(checkbox.dataset.drugValue);
            }
        }
    });
    
    // Toggle visibility of other input
    if (isKhacSelected) {
        otherInput.classList.remove('hidden');
    } else {
        otherInput.classList.add('hidden');
        otherInput.value = '';
    }
    
    // Construct the display text
    let displayTextParts = [];
    selectedDrugs.forEach(drug => displayTextParts.push(drug));
    
    if (isKhacSelected) {
        displayTextParts.push(otherInput.value.trim() !== '' ? otherInput.value.trim() : 'Kh√°c');
    }
    
    const finalText = displayTextParts.join(', ') || 'Ch∆∞a ch·ªçn';
    displayBox.innerText = finalText;
    
    // Update the trigger text
    const triggerTextElement = document.getElementById('drugTypeTriggerText-' + blockId + '-' + attemptNumber);
    if (triggerTextElement) {
        triggerTextElement.innerText = displayTextParts.length > 0 ? displayTextParts.join(', ') : 'Ch·ªçn lo·∫°i ma t√∫y';
    }
}

// Function to update the displayed selected location for operation blocks
function updateOperationLocationDisplay(blockId) {
    const optionsList = document.getElementById('operationLocationOptions-' + blockId);
    const displayBox = document.getElementById('operationLocationDisplayBox-' + blockId);
    const khoInput = document.getElementById('operationLocationKho-' + blockId);
    const otherInput = document.getElementById('operationLocationOther-' + blockId);
    
    if (!optionsList || !displayBox || !khoInput || !otherInput) {
        console.warn('Missing elements for updateOperationLocationDisplay for block ' + blockId + '.');
        return;
    }
    
    const selectedLocations = [];
    let isKhoSelected = false;
    let isKhacSelected = false;
    
    optionsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        if (checkbox.checked) {
            if (checkbox.dataset.locationValue === 'KHO NGO·∫†I QUAN') {
                isKhoSelected = true;
                selectedLocations.push('KHO NGO·∫†I QUAN');
            } else if (checkbox.dataset.locationValue === 'Khac') {
                isKhacSelected = true;
            } else {
                selectedLocations.push(checkbox.dataset.locationValue);
            }
        }
    });
    
    // Toggle visibility of inputs
    if (isKhoSelected) {
        khoInput.classList.remove('hidden');
    } else {
        khoInput.classList.add('hidden');
        khoInput.value = '';
    }
    
    if (isKhacSelected) {
        otherInput.classList.remove('hidden');
    } else {
        otherInput.classList.add('hidden');
        otherInput.value = '';
    }
    
    // Construct display text
    let displayTextParts = [...selectedLocations];
    
    if (isKhoSelected && khoInput.value.trim() !== '') {
        displayTextParts.push('KHO ' + khoInput.value.trim());
    } else if (isKhoSelected) {
        displayTextParts.push('KHO NGO·∫†I QUAN');
    }
    
    if (isKhacSelected && otherInput.value.trim() !== '') {
        displayTextParts.push(otherInput.value.trim());
    } else if (isKhacSelected) {
        displayTextParts.push('Kh√°c');
    }
    
    const finalText = displayTextParts.join(', ') || 'Ch∆∞a ch·ªçn';
    displayBox.innerText = finalText;
    
    // Update trigger text
    const triggerTextElement = document.getElementById('operationLocationTriggerText-' + blockId);
    if (triggerTextElement) {
        triggerTextElement.innerText = displayTextParts.length > 0 ? displayTextParts.join(', ') : 'Ch·ªçn ƒë·ªãa ƒëi·ªÉm';
    }
}

// S·ª¨A: Function to show pure A4 journal view - CH·ªà PDF, KH√îNG WEB CONTROLS - ƒê·∫¢M B·∫¢O HI·ªÇN TH·ªä PDF ƒê√öNG C√ÅCH
function showPureA4JournalView(dogName, date) {
    console.log('üéØ STARTING PURE A4 PDF VIEW MODE');
    
    // S·ª¨A: FORCE ·∫®N T·∫§T C·∫¢ web navigation elements NGAY L·∫¨P T·ª®C
    hideAllContentSections();
    
    // S·ª¨A: ·∫®n HO√ÄN TO√ÄN t·∫•t c·∫£ navigation elements
    const elementsToHide = [
        'toggleReadButton',
        '.header',
        '.sidebar',
        '#loginPage',
        '#dashboardBanner',
        '.journal-header-actions',
        '.journal-action-buttons'
    ];
    
    elementsToHide.forEach(selector => {
        const element = selector.startsWith('.') || selector.startsWith('#') 
            ? document.querySelector(selector) 
            : document.getElementById(selector);
        if (element) {
            element.style.display = 'none';
            console.log('‚úÖ ƒê√£ ·∫©n: ' + selector);
        }
    });
    
    const content = document.getElementById('content');
    const title = document.getElementById('title');
    
    // S·ª¨A: FORCE thi·∫øt l·∫≠p ch·∫ø ƒë·ªô pure PDF view
    content.style.cssText = 'display: block !important; margin: 0 !important; padding: 0 !important; width: 100vw !important; max-width: none !important; height: 100vh !important; overflow-y: auto !important; background: #f5f5f5 !important; position: relative !important; z-index: 1 !important;';
    
    // ·∫®n title web
    title.style.display = 'none';
    
    // S·ª¨A: Load journal data v·ªõi error handling t·ªët h∆°n
    const journalKey = 'journal_' + dogName + '_' + date;
    const journalData = JSON.parse(localStorage.getItem(journalKey));
    
    if (!journalData) {
        content.innerHTML = '<div style="text-align: center; padding: 50px; background: white;"><h3>‚ùå KH√îNG T√åM TH·∫§Y NH·∫¨T K√ù</h3><p>Kh√¥ng c√≥ nh·∫≠t k√Ω cho CNV ' + dogName + ' ng√†y ' + date + '</p></div>';
        return;
    }
    
    // S·ª¨A: Hi·ªÉn th·ªã pure A4 PDF view ho√†n ch·ªânh
 content.innerHTML = '<div class="a4-journal-view" style="background: white; max-width: 210mm; margin: 20px auto; padding: 20mm; font-family: \'Times New Roman\', serif; font-size: 14px; line-height: 1.4; box-shadow: 0 0 20px rgba(0,0,0,0.1); min-height: 297mm;"><div class="a4-header" style="text-align: center; border-bottom: 2px solid #000; padding-bottom: 20px; margin-bottom: 30px;"><h1 style="font-size: 18px; font-weight: bold; margin: 0 0 10px 0;">T·ªîNG C·ª§C H·∫¢I QUAN</h1><h2 style="font-size: 16px; font-weight: bold; margin: 0 0 20px 0;">S·ªî NH·∫¨T K√ù HU·∫§N LUY·ªÜN CH√ì NGHI·ªÜP V·ª§</h2><div style="display: flex; justify-content: space-between; margin-top: 20px;"><div><strong>CNV:</strong> ' + journalData.generalInfo.dogName + '</div><div><strong>Ng√†y:</strong> ' + journalData.generalInfo.date + '</div></div><div style="margin-top: 10px;"><strong>Hu·∫•n luy·ªán vi√™n:</strong> ' + journalData.generalInfo.hlv + '</div></div><div class="a4-section" style="margin-bottom: 30px;"><h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">I. HO·∫†T ƒê·ªòNG HU·∫§N LUY·ªÜN</h3>' + renderTrainingBlocks(journalData.trainingBlocks || []) + '<div style="margin-top: 20px;"><strong>ƒê√°nh gi√° chung c·ªßa Hu·∫•n luy·ªán vi√™n:</strong><br><div style="margin-top: 10px; padding: 10px; border: 1px solid #ccc; min-height: 60px;">' + (journalData.hlvComment || 'Ch∆∞a c√≥ ƒë√°nh gi√°') + '</div></div></div><div class="a4-section" style="margin-bottom: 30px;"><h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">II. CHƒÇM S√ìC & NU√îI D∆Ø·ª†NG</h3><table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;"><tr><td style="border: 1px solid #000; padding: 8px; width: 15%;"><strong>B·ªØa tr∆∞a:</strong></td><td style="border: 1px solid #000; padding: 8px;">' + (journalData.meals?.lunch?.time || '') + ' - ' + (journalData.meals?.lunch?.amount || '') + '</td></tr><tr><td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn tr∆∞a:</strong></td><td style="border: 1px solid #000; padding: 8px;">' + (journalData.meals?.lunch?.food || 'Ch∆∞a ghi') + '</td></tr><tr><td style="border: 1px solid #000; padding: 8px;"><strong>B·ªØa chi·ªÅu:</strong></td><td style="border: 1px solid #000; padding: 8px;">' + (journalData.meals?.dinner?.time || '') + ' - ' + (journalData.meals?.dinner?.amount || '') + '</td></tr><tr><td style="border: 1px solid #000; padding: 8px;"><strong>Th·ª©c ƒÉn chi·ªÅu:</strong></td><td style="border: 1px solid #000; padding: 8px;">' + (journalData.meals?.dinner?.food || 'Ch∆∞a ghi') + '</td></tr><tr><td style="border: 1px solid #000; padding: 8px;"><strong>ChƒÉm s√≥c:</strong></td><td style="border: 1px solid #000; padding: 8px;">' + renderCareActivities(journalData.care || {}) + '</td></tr><tr><td style="border: 1px solid #000; padding: 8px;"><strong>S·ª©c kh·ªèe:</strong></td><td style="border: 1px solid #000; padding: 8px;">' + (journalData.health?.status || 'B√¨nh th∆∞·ªùng') + '</td></tr></table>' + (journalData.health?.other ? '<p><strong>Ghi ch√∫ s·ª©c kh·ªèe:</strong> ' + journalData.health.other + '</p>' : '') + '</div><div class="a4-section" style="margin-bottom: 30px;"><h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">III. HO·∫†T ƒê·ªòNG T√ÅC NGHI·ªÜP</h3>' + renderOperationBlocks(journalData.operationBlocks || []) + '</div><div class="a4-section" style="margin-bottom: 30px; page-break-inside: avoid;"><h3 style="font-size: 16px; font-weight: bold; margin-bottom: 15px; border-bottom: 1px solid #ccc; padding-bottom: 5px;">IV. DUY·ªÜT & K√ù</h3><div style="display: flex; justify-content: space-between; margin-top: 30px;"><div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 120px;"><strong>HU·∫§N LUY·ªÜN VI√äN</strong><br><br>' + (journalData.approval?.hvlSignature ? '<div style="text-align: left;">‚úì <strong>' + journalData.approval.hvlSignature.name + '</strong><br>K√Ω ng√†y: ' + new Date(journalData.approval.hvlSignature.timestamp).toLocaleString('vi-VN') + '<br>ID: ' + journalData.approval.hvlSignature.id + '</div>' : '<span style="color: red;">Ch∆∞a k√Ω</span>') + '</div><div style="width: 45%; text-align: center; border: 1px solid #000; padding: 20px; min-height: 120px;"><strong>L√ÉNH ƒê·∫†O ƒê∆†N V·ªä</strong><br><br>' + (journalData.approval?.leaderSignature ? '<div style="text-align: left;">‚úì <strong>' + journalData.approval.leaderSignature.name + '</strong><br>K√Ω ng√†y: ' + new Date(journalData.approval.leaderSignature.timestamp).toLocaleString('vi-VN') + '<br>Nh·∫≠n x√©t: ' + (journalData.approval.leaderComment || 'ƒê√£ duy·ªát') + '<br>Ch·ªØ k√Ω s·ªë: ' + journalData.approval.leaderSignature.digitalSignature + '<br>ID: ' + journalData.approval.leaderSignature.id + '</div>' : '<span style="color: orange;">Ch·ªù duy·ªát</span>') + '</div></div>' + (journalData.approval?.substituteSignature ? '<div style="width: 100%; text-align: center; border: 1px solid #000; padding: 20px; margin-top: 20px; min-height: 80px;"><strong>HLV TR·ª∞C THAY</strong><br><br><div style="text-align: left;">‚úì <strong>' + journalData.approval.substituteSignature.name + '</strong><br>K√Ω ng√†y: ' + new Date(journalData.approval.substituteSignature.timestamp).toLocaleString('vi-VN') + '<br>√ù ki·∫øn: ' + journalData.approval.substituteSignature.comment + '<br>ID: ' + journalData.approval.substituteSignature.id + '</div></div>' : '') + '</div></div><div style="text-align: center; margin: 20px 0; background: white; padding: 20px;" class="no-print"><button onclick="window.print()" style="background: #4CAF50; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; margin: 0 10px;">üñ®Ô∏è In nh·∫≠t k√Ω</button><button onclick="returnToManagerView()" style="background: #2196F3; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; margin: 0 10px;">üìã Quay l·∫°i danh s√°ch</button><button onclick="window.close()" style="background: #f44336; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; margin: 0 10px;">‚ùå ƒê√≥ng</button></div>' +
'<style>@media print { .no-print { display: none !important; } body { margin: 0; padding: 0; } .a4-journal-view { max-width: none !important; margin: 0 !important; padding: 15mm !important; box-shadow: none !important; font-size: 12px !important; } } @media screen { .a4-journal-view { background: white; max-width: 210mm; margin: 20px auto; padding: 20mm; font-family: "Times New Roman", serif; font-size: 14px; line-height: 1.4; box-shadow: 0 0 20px rgba(0,0,0,0.1); min-height: 297mm; } }</style>';
    console.log('‚úÖ PURE A4 PDF VIEW MODE COMPLETED');
}

// S·ª¨A: Helper function ƒë·ªÉ quay l·∫°i journal list
// S·ª¨A: Helper function ƒë·ªÉ quay l·∫°i journal list
function returnToJournalList() {
    console.log('üîÑ Returning to journal list...');
    
    // S·ª¨A: Kh√¥i ph·ª•c l·∫°i t·∫•t c·∫£ web navigation elements
    const elementsToShow = [
        'toggleReadButton',
        '.header', 
        '.sidebar'
    ];
    
    elementsToShow.forEach(selector => {
        const element = selector.startsWith('.') || selector.startsWith('#')
            ? document.querySelector(selector)
            : document.getElementById(selector);
        if (element) {
            element.style.display = '';
            console.log('‚úÖ Restored:', selector);
        }
    });
    
    // S·ª¨A: Reset content container v·ªÅ tr·∫°ng th√°i b√¨nh th∆∞·ªùng
    const content = document.getElementById('content');
    if (content) {
        content.style.cssText = 'display: block; margin: 0; padding: 20px; width: auto; max-width: none; height: auto; overflow-y: auto; background: white; position: relative; z-index: 1;';
    }
    
    // S·ª¨A: Reset title
    const title = document.getElementById('title');
    if (title) {
        title.style.display = 'block';
    }
    
    // S·ª¨A: Quay v·ªÅ manager view thay v√¨ journal edit form
    if (currentUserRole === 'MANAGER') {
        console.log('üè¢ Returning to manager pending journals view');
        showAllPendingJournalsForManager();
    } else {
        // Cho TRAINER/ADMIN quay v·ªÅ journal edit form
        showJournalEditForm(currentDogForJournal);
    }
    
    console.log('‚úÖ Successfully returned to journal list');
}

// Helper functions for rendering journal sections
function renderTrainingBlocks(blocks) {
    if (!blocks || blocks.length === 0) return '<p>Kh√¥ng c√≥ ho·∫°t ƒë·ªông hu·∫•n luy·ªán.</p>';
    
    return blocks.map((block, index) => '<div class="training-block-display" style="border: 1px solid #ccc; padding: 15px; margin: 10px 0;"><p><strong>Ca ' + (index + 1) + ':</strong> ' + (block.fromTime || '') + ' - ' + (block.toTime || '') + '</p><p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ' + (block.location || 'S√¢n t·∫≠p') + '</p><p><strong>N·ªôi dung:</strong> ' + renderTrainingContent(block) + '</p>' + (block.drugDetection ? '<p><strong>Ph√°t hi·ªán ma t√∫y:</strong> ' + renderDrugDetection(block.drugDetection) + '</p>' : '') + '</div>').join('');
}

function renderTrainingContent(block) {
    const content = [];
    if (block.advancedTraining) content.push('HL n√¢ng cao');
    if (block.basicTraining) content.push('HL ƒë·ªông t√°c c∆° b·∫£n');
    if (block.physicalTraining) content.push('HL th·ªÉ l·ª±c');
    if (block.otherTraining) content.push(block.otherTraining);
    return content.join(', ') || 'Ch∆∞a ghi';
}

function renderDrugDetection(detection) {
    if (!detection || detection.length === 0) return 'Kh√¥ng c√≥';
    return detection.map((attempt, index) => 'L·∫ßn ' + (index + 1) + ': ' + (attempt.selectedDrugs?.join(', ') || 'Ch∆∞a ghi') + ' - ' + (attempt.manifestation?.join(', ') || 'Ch∆∞a ghi')).join('; ');
}

function renderCareActivities(care) {
    const activities = [];
    if (care.bath) activities.push('T·∫Øm r·ª≠a');
    if (care.brush) activities.push('Ch·∫£i l√¥ng');
    if (care.wipe) activities.push('Lau l√¥ng');
    return activities.join(', ') || 'Ch∆∞a c√≥ ho·∫°t ƒë·ªông chƒÉm s√≥c';
}

function renderOperationBlocks(blocks) {
    if (!blocks || blocks.length === 0) return '<p>Kh√¥ng c√≥ ho·∫°t ƒë·ªông t√°c nghi·ªáp.</p>';
    
    return blocks.map((block, index) => '<div class="operation-block-display" style="border: 1px solid #ccc; padding: 15px; margin: 10px 0;"><p><strong>Ca ' + (index + 1) + ':</strong> ' + (block.fromTime || '') + ' - ' + (block.toTime || '') + '</p><p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ' + (block.selectedLocations?.join(', ') || 'Ch∆∞a ghi') + '</p><p><strong>N·ªôi dung:</strong> ' + renderOperationContent(block) + '</p>' + (block.otherIssues ? '<p><strong>V·∫•n ƒë·ªÅ kh√°c:</strong> ' + block.otherIssues + '</p>' : '') + '</div>').join('');
}

function renderOperationContent(block) {
    const content = [];
    if (block.checkGoods) content.push('Ki·ªÉm tra h√†ng h√≥a XNK');
    if (block.checkLuggage) content.push('Ki·ªÉm tra h√†nh l√Ω, ph∆∞∆°ng ti·ªán XNC');
    if (block.fieldTraining) content.push('HL n√¢ng cao t·∫°i hi·ªán tr∆∞·ªùng');
    if (block.patrol) content.push('Tu·∫ßn tra ki·ªÉm so√°t');
    if (block.otherOperation1) content.push(block.otherOperation1);
    if (block.otherOperation2) content.push(block.otherOperation2);
    return content.join(', ') || 'Ch∆∞a ghi';
}

// Function to load journal data - UPDATED TO USE DATABASE
async function loadJournalData(dogName, date, createNew = false) {
    try {
        // Use the database manager
        const journalData = await window.journalDBManager.loadJournalData(dogName, date, createNew);
        
        if (journalData) {
            // Convert database format to localStorage format for compatibility
            const localStorageFormat = convertDatabaseToLocalStorageFormat(journalData);
            populateJournalForm(localStorageFormat);
        } else {
            // No journal found, create new
            addTrainingBlock();
            addOperationBlock();
        }
    } catch (error) {
        console.error('Error loading journal data:', error);
        // Fallback to localStorage if database fails
    const journalKey = 'journal_' + dogName + '_' + date;
    const existingData = localStorage.getItem(journalKey);
    
    if (existingData && !createNew) {
        const data = JSON.parse(existingData);
        populateJournalForm(data);
    } else {
        addTrainingBlock();
        addOperationBlock();
        }
    }
}

// Function to convert database journal format to localStorage format
function convertDatabaseToLocalStorageFormat(dbJournal) {
    return {
        generalInfo: {
            dogName: dbJournal.dog_name,
            date: dbJournal.journal_date,
            hlv: dbJournal.trainer_name
        },
        trainingBlocks: dbJournal.training_activities ? 
            dbJournal.training_activities.split(';').map(activity => ({ content: activity.trim() })) : [],
        operationBlocks: dbJournal.operation_activities ? 
            dbJournal.operation_activities.split(';').map(activity => ({ content: activity.trim() })) : [],
        care: convertCareActivitiesToLocalStorage(dbJournal.care_activities),
        health: {
            status: dbJournal.health_status || 'T·ªët',
            weather: dbJournal.weather_conditions || ''
        },
        hlvComment: dbJournal.behavior_notes || '',
        otherIssues: dbJournal.challenges || '',
        approval: {
            status: dbJournal.approval_status,
            leaderStatus: dbJournal.approval_status === 'APPROVED' ? 'ƒê√£ duy·ªát' : 
                         dbJournal.approval_status === 'REJECTED' ? 'T·ª´ ch·ªëi' : 'Ch·ªù duy·ªát',
            leaderComment: dbJournal.rejection_reason || '',
            approvedBy: dbJournal.approver_name || '',
            approvedAt: dbJournal.approved_at || ''
        },
        lastModified: dbJournal.updated_at || dbJournal.created_at
    };
}

// Function to convert care activities from database format to localStorage format
function convertCareActivitiesToLocalStorage(careActivities) {
    const care = { morning: '', afternoon: '', evening: '' };
    
    if (careActivities) {
        const activities = careActivities.split(';').filter(a => a.trim());
        
        activities.forEach(activity => {
            if (activity.includes('S√°ng:')) {
                care.morning = activity.replace('S√°ng:', '').trim();
            } else if (activity.includes('Chi·ªÅu:')) {
                care.afternoon = activity.replace('Chi·ªÅu:', '').trim();
            } else if (activity.includes('T·ªëi:')) {
                care.evening = activity.replace('T·ªëi:', '').trim();
            }
        });
    }
    
    return care;
}

// Function to populate journal form with existing data
function populateJournalForm(data) {
    // Populate general info
    if (data.generalInfo) {
        const dateField = document.getElementById('journal_date');
        const hlvField = document.getElementById('journal_hlv');
        const dogField = document.getElementById('journal_dog_name');
        
        if (dateField) dateField.value = data.generalInfo.date || '';
        if (hlvField) hlvField.value = data.generalInfo.hlv || '';
        if (dogField) dogField.value = data.generalInfo.dogName || '';
    }
    
    // Populate training blocks
    if (data.trainingBlocks && data.trainingBlocks.length > 0) {
        data.trainingBlocks.forEach(blockData => {
            addTrainingBlock(blockData);
        });
    } else {
        addTrainingBlock();
    }
    
    // Populate operation blocks
    if (data.operationBlocks && data.operationBlocks.length > 0) {
        data.operationBlocks.forEach(blockData => {
            addOperationBlock(blockData);
        });
    } else {
        addOperationBlock();
    }
    
    // Populate meals, care, health data
    if (data.meals) populateMealData(data.meals);
    if (data.care) populateCareData(data.care);
    if (data.health) populateHealthData(data.health);
    
    // Populate comments
    const hlvCommentField = document.getElementById('journal_hlv_comment');
    const otherIssuesField = document.getElementById('journal_other_issues');
    
    if (hlvCommentField) hlvCommentField.value = data.hlvComment || '';
    if (otherIssuesField) otherIssuesField.value = data.otherIssues || '';
    
    // Load approval and signature data
    if (data.approval) {
        loadApprovalData(data.approval);
    }
}

// Helper functions for populating form data
function populateMealData(meals) {
    if (meals.lunch) {
        const lunchTimeField = document.getElementById('lunchTime');
        const lunchAmountField = document.getElementById('lunchAmount');
        const lunchFoodOtherField = document.getElementById('lunchFoodOther');
        
        if (lunchTimeField) lunchTimeField.value = meals.lunch.time || '11:00';
        if (lunchAmountField) lunchAmountField.value = meals.lunch.amount || 'ƒÇn h·∫øt';
        if (lunchFoodOtherField) lunchFoodOtherField.value = meals.lunch.foodOther || '';
    }
    
    if (meals.dinner) {
        const dinnerTimeField = document.getElementById('dinnerTime');
        const dinnerAmountField = document.getElementById('dinnerAmount');
        const dinnerFoodOtherField = document.getElementById('dinnerFoodOther');
        
        if (dinnerTimeField) dinnerTimeField.value = meals.dinner.time || '17:00';
        if (dinnerAmountField) dinnerAmountField.value = meals.dinner.amount || 'ƒÇn h·∫øt';
        if (dinnerFoodOtherField) dinnerFoodOtherField.value = meals.dinner.foodOther || '';
    }
}

function populateCareData(care) {
    const bathField = document.getElementById('care_bath');
    const brushField = document.getElementById('care_brush');
    const wipeField = document.getElementById('care_wipe');
    
    if (bathField) bathField.checked = care.bath || false;
    if (brushField) brushField.checked = care.brush || false;
    if (wipeField) wipeField.checked = care.wipe || false;
}

function populateHealthData(health) {
    const healthRadios = document.querySelectorAll('input[name="health_status"]');
    const healthOtherField = document.getElementById('health_other_text');
    
    healthRadios.forEach(radio => {
        if (radio.value === health.status) {
            radio.checked = true;
        }
    });
    
    if (healthOtherField) healthOtherField.value = health.other || '';
}

// Function to setup form event listeners
function setupFormEventListeners() {
    // Health status change listener
    document.querySelectorAll('input[name="health_status"]').forEach(radio => {
        radio.addEventListener('change', () => {
            const healthOtherField = document.getElementById('health_other_text');
            if (healthOtherField) {
                if (radio.checked && (radio.dataset.healthType === 'abnormal' || radio.dataset.healthType === 'sick')) {
                    healthOtherField.classList.remove('hidden');
                } else {
                    healthOtherField.classList.add('hidden');
                    healthOtherField.value = '';
                }
            }
        });
    });
    
    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.custom-dropdown-trigger')) {
            document.querySelectorAll('.custom-dropdown-options').forEach(dropdown => {
                dropdown.classList.add('hidden');
            });
        }
    });
}

// S·ª¨A CH·ªÆ K√ù TH·ª∞C: Electronic signature functions - S·ª¨A HO√ÄN TO√ÄN V·ªöI CH·ªÆ K√ù TH·ª∞C V√Ä WORKFLOW MANAGER
async function submitHvlSignature() {
    console.log('üñäÔ∏è HLV Signature function called');
    
    const hvlSignatureDisplay = document.getElementById('hvl-signature-display');
    const submissionStatus = document.querySelector('.submission-status');
    const submitBtn = document.querySelector('.btn-submit-hvl');
    
    if (!hvlSignatureDisplay || !submissionStatus) {
        console.error('‚ùå Required elements not found for HLV signature');
        console.log('Available elements:', {
            hvlDisplay: !!hvlSignatureDisplay,
            status: !!submissionStatus,
            allStatusElements: document.querySelectorAll('.submission-status').length
        });
        alert('L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªØ k√Ω! Vui l√≤ng th·ª≠ l·∫°i.');
        return;
    }
    
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k√Ω nh·∫≠t k√Ω n√†y? Sau khi k√Ω, nh·∫≠t k√Ω s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho Manager duy·ªát.')) {
        try {
            const currentTime = new Date().toISOString();
            const signerName = currentUserName || hlvInfo.name;
            const signerRole = currentUserRole || 'TRAINER';
            
            console.log('üîë Signing with:', { signerName, signerRole });
            
            // L·∫•y ch·ªØ k√Ω th·ª±c t·ª´ database ch·ªØ k√Ω
            const signatureData = getUserSignature(signerName, signerRole);
            console.log('üìã Retrieved signature data:', signatureData);
            
            // T·∫°o hash an to√†n v·ªõi Unicode
            let hashString = '';
            try {
                hashString = btoa(unescape(encodeURIComponent(signerName + '_HLV_' + currentTime)));
            } catch (error) {
                console.warn('Hash encoding error, using fallback:', error);
                hashString = 'HASH_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }
            
            const fullSignatureData = {
                name: signerName,
                role: signerRole,
                timestamp: currentTime,
                id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                hash: hashString,
                verified: true,
                digitalSignature: generateDigitalSignature(signerName, signerRole, currentTime)
            };
            
            console.log('üíæ Full signature data prepared:', fullSignatureData);
            
            // Update UI NGAY L·∫¨P T·ª®C v·ªõi ch·ªØ k√Ω th·ª±c
            const signatureHTML = await generateSignatureHTML(signatureData, currentTime);
            console.log('üé® Generated signature HTML');
            
            hvlSignatureDisplay.innerHTML = signatureHTML;
            submissionStatus.innerHTML = '<strong style="color: green;">‚úÖ ƒê√£ k√Ω th√†nh c√¥ng</strong>';
            
            // ·∫®n n√∫t k√Ω sau khi ƒë√£ k√Ω
            if (submitBtn) {
                submitBtn.style.display = 'none';
            }
            
            console.log('‚úÖ HLV signature UI updated successfully');
            
            // S·ª¨A: L∆ØU CH·ªÆ K√ù V√Ä CHUY·ªÇN CHO MANAGER - WORKFLOW HO√ÄN CH·ªàNH
            saveSignatureToJournal('hvlSignature', fullSignatureData);
            
            // S·ª¨A: TH√äM V√ÄO DANH S√ÅCH CH·ªú DUY·ªÜT C·ª¶A MANAGER
            addJournalToPendingManagerApproval();
            
            // Notify dashboard v·ªÅ journal update
            notifyDashboardUpdate();
            
            // S·ª¨A: TH√îNG B√ÅO CHUY·ªÇN CHO MANAGER
            alert('üéâ ƒê√£ k√Ω nh·∫≠t k√Ω th√†nh c√¥ng!\n\n' +
                  'üìã Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho Manager duy·ªát\n' +
                  '‚è≥ Manager s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o\n' +
                  'üëÄ B·∫°n c√≥ th·ªÉ theo d√µi tr·∫°ng th√°i trong "Xem nh·∫≠t k√Ω c≈©"');
            
            console.log('‚úÖ HLV signature completed successfully and sent to Manager');
            
        } catch (error) {
            console.error('‚ùå Error in submitHvlSignature:', error);
            alert('C√≥ l·ªói khi k√Ω nh·∫≠t k√Ω: ' + error.message);
        }
    }
}

// S·ª¨A: Function TH√äM V√ÄO DANH S√ÅCH CH·ªú DUY·ªÜT C·ª¶A MANAGER
function addJournalToPendingManagerApproval() {
    const dogName = document.getElementById('journal_dog_name').value;
    const date = document.getElementById('journal_date').value;
    const journalKey = 'journal_' + dogName + '_' + date;
    
    console.log('üìù Adding journal to pending manager approval:', journalKey);
    
    // S·ª¨A: C·∫¨P NH·∫¨T JOURNAL STATUS
    let journalData = JSON.parse(localStorage.getItem(journalKey)) || {};
    if (!journalData.approval) {
        journalData.approval = {};
    }
    
    // Set tr·∫°ng th√°i ch·ªù duy·ªát
    journalData.approval.status = 'PENDING_MANAGER_APPROVAL';
    journalData.approval.submittedAt = new Date().toISOString();
    journalData.approval.submittedBy = currentUserName;
    journalData.approval.requiresManagerApproval = true; // S·ª¨A: TH√äM FLAG ƒê·∫∂C BI·ªÜT
    
    localStorage.setItem(journalKey, JSON.stringify(journalData));
    console.log('‚úÖ Updated journal status to PENDING_MANAGER_APPROVAL');
    
    // S·ª¨A: TH√äM V√ÄO DANH S√ÅCH PENDING JOURNALS RI√äNG
    const pendingJournals = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
    
    // Ki·ªÉm tra n·∫øu journal ƒë√£ c√≥ trong danh s√°ch ch·ªù duy·ªát
    const existingIndex = pendingJournals.findIndex(j => j.key === journalKey);
    
    const journalEntry = {
        key: journalKey,
        dogName: dogName,
        date: date,
        trainer: currentUserName,
        submittedAt: new Date().toISOString(),
        status: 'PENDING',
        requiresAction: true // S·ª¨A: FLAG MANAGER C·∫¶N X·ª¨ L√ù
    };
    
    if (existingIndex === -1) {
        pendingJournals.push(journalEntry);
        console.log('‚úÖ Added new journal to pending manager approvals');
    } else {
        pendingJournals[existingIndex] = journalEntry;
        console.log('‚úÖ Updated existing journal in pending manager approvals');
    }
    
    localStorage.setItem('pending_manager_approvals', JSON.stringify(pendingJournals));
    
    // S·ª¨A: T·∫†O NOTIFICATION CHO MANAGER
    createManagerNotification(journalEntry);
    
    console.log('üìä Current pending journals for manager:', pendingJournals.length);
}

// S·ª¨A: Function T·∫†O NOTIFICATION CHO MANAGER
function createManagerNotification(journalEntry) {
    const notifications = JSON.parse(localStorage.getItem('manager_notifications')) || [];
    
    const notification = {
        id: 'notif_' + Date.now(),
        type: 'JOURNAL_APPROVAL_REQUIRED',
        title: 'Nh·∫≠t k√Ω m·ªõi c·∫ßn duy·ªát',
        message: `HLV ${journalEntry.trainer} ƒë√£ g·ª≠i nh·∫≠t k√Ω CNV ${journalEntry.dogName} (${journalEntry.date}) ƒë·ªÉ duy·ªát`,
        journalKey: journalEntry.key,
        createdAt: new Date().toISOString(),
        read: false,
        urgent: true
    };
    
    notifications.unshift(notification); // Th√™m v√†o ƒë·∫ßu danh s√°ch
    
    // Gi·ªõi h·∫°n s·ªë notification (gi·ªØ l·∫°i 50 notification g·∫ßn nh·∫•t)
    if (notifications.length > 50) {
        notifications.splice(50);
    }
    
    localStorage.setItem('manager_notifications', JSON.stringify(notifications));
    console.log('üì¢ Created manager notification:', notification.id);
}

// S·ª¨A: Function ƒë·∫∑t tr·∫°ng th√°i nh·∫≠t k√Ω ch·ªù Manager duy·ªát
function setJournalPendingForManagerApproval() {
    const dogName = document.getElementById('journal_dog_name').value;
    const date = document.getElementById('journal_date').value;
    const journalKey = 'journal_' + dogName + '_' + date;
    
    let journalData = JSON.parse(localStorage.getItem(journalKey)) || {};
    
    if (!journalData.approval) {
        journalData.approval = {};
    }
    
    // Set tr·∫°ng th√°i ch·ªù duy·ªát
    journalData.approval.status = 'PENDING_MANAGER_APPROVAL';
    journalData.approval.submittedAt = new Date().toISOString();
    journalData.approval.submittedBy = currentUserName;
    
    localStorage.setItem(journalKey, JSON.stringify(journalData));
    console.log('‚úÖ Set journal pending for manager approval:', journalKey);
    
    // Th√™m v√†o danh s√°ch journals ch·ªù duy·ªát
    const pendingJournals = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
    const existingIndex = pendingJournals.findIndex(j => j.key === journalKey);
    
    if (existingIndex === -1) {
        pendingJournals.push({
            key: journalKey,
            dogName: dogName,
            date: date,
            trainer: currentUserName,
            submittedAt: new Date().toISOString()
        });
        localStorage.setItem('pending_manager_approvals', JSON.stringify(pendingJournals));
        console.log('‚úÖ Added journal to pending manager approvals');
    }
}

async function approveJournal() {
    console.log('üñäÔ∏è Leader approval function called');
    
    if (currentUserRole !== 'ADMIN' && currentUserRole !== 'MANAGER') {
        alert('B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát nh·∫≠t k√Ω!');
        return;
    }
    
    const leaderSignatureDisplay = document.getElementById('leader-signature-display');
    const approvalStatus = document.querySelector('.approval-status');
    const approveBtn = document.querySelector('.btn-approve');
    
    if (!leaderSignatureDisplay || !approvalStatus) {
        console.error('‚ùå Required elements not found for leader approval');
        console.log('Available elements:', {
            leaderDisplay: !!leaderSignatureDisplay,
            status: !!approvalStatus
        });
        alert('L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªØ k√Ω l√£nh ƒë·∫°o! Vui l√≤ng th·ª≠ l·∫°i.');
        return;
    }
    
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát nh·∫≠t k√Ω n√†y?')) {
        try {
            const currentTime = new Date().toISOString();
            
            console.log('üîë Manager approving with:', currentUserName, currentUserRole);
            
            // S·ª¨A: L·∫•y ch·ªØ k√Ω th·ª±c t·ª´ database ch·ªØ k√Ω cho Manager
            const signatureData = getUserSignature(currentUserName, currentUserRole);
            console.log('üìã Retrieved manager signature data:', signatureData);
            
            // S·ª¨A: T·∫°o hash an to√†n v·ªõi Unicode
            let hashString = '';
            try {
                hashString = btoa(unescape(encodeURIComponent(currentUserName + '_LEADER_' + currentTime)));
            } catch (error) {
                console.warn('Hash encoding error, using fallback:', error);
                hashString = 'HASH_LEADER_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }
            
            const fullSignatureData = {
                name: currentUserName,
                role: currentUserRole,
                timestamp: currentTime,
                id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                hash: hashString,
                verified: true,
                digitalSignature: generateDigitalSignature(currentUserName, currentUserRole, currentTime)
            };
            
            // S·ª¨A: Update UI NGAY L·∫¨P T·ª®C v·ªõi ch·ªØ k√Ω th·ª±c
            const signatureHTML = await generateSignatureHTML(signatureData, currentTime);
            leaderSignatureDisplay.innerHTML = signatureHTML;
            approvalStatus.innerHTML = '<strong style="color: green;">‚úÖ ƒê√£ duy·ªát</strong>';
            
            // ·∫®n n√∫t duy·ªát sau khi ƒë√£ duy·ªát
            if (approveBtn) {
                approveBtn.style.display = 'none';
            }
            
            console.log('‚úÖ Leader approval UI updated successfully');
            
            // Save signature and approval status
            const leaderComment = document.getElementById('leader_comment').value;
            saveSignatureToJournal('leaderSignature', fullSignatureData);
            saveApprovalData({
                leaderComment: leaderComment,
                leaderStatus: 'ƒê√£ duy·ªát',
                leaderApprovalTime: currentTime,
                status: 'APPROVED'
            });
            
            // S·ª¨A: Remove t·ª´ danh s√°ch ch·ªù duy·ªát
            removeFromPendingApprovals();
            
            // Notify dashboard v·ªÅ journal approval
            notifyDashboardUpdate();
            
            alert('ƒê√£ duy·ªát nh·∫≠t k√Ω th√†nh c√¥ng!\nCh·ªØ k√Ω Manager ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ.\nNh·∫≠t k√Ω ƒë√£ ho√†n th√†nh quy tr√¨nh.');
            
            console.log('‚úÖ Leader approval completed successfully');
            
        } catch (error) {
            console.error('‚ùå Error in approveJournal:', error);
            alert('C√≥ l·ªói khi duy·ªát nh·∫≠t k√Ω: ' + error.message);
        }
    }
}

// Function remove journal t·ª´ pending approvals
function removeFromPendingApprovals() {
    const dogName = document.getElementById('journal_dog_name').value;
    const date = document.getElementById('journal_date').value;
    const journalKey = 'journal_' + dogName + '_' + date;
    
    const pendingJournals = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
    const filteredJournals = pendingJournals.filter(j => j.key !== journalKey);
    
    localStorage.setItem('pending_manager_approvals', JSON.stringify(filteredJournals));
    console.log('‚úÖ Removed journal from pending approvals');
}

// Function t·∫°o ch·ªØ k√Ω s·ªë - S·ª¨A: H·ªó tr·ª£ Unicode (ti·∫øng Vi·ªát)
function generateDigitalSignature(userName, role, timestamp) {
    // T·∫°o m·ªôt chu·ªói d·ªØ li·ªáu ƒë·ªÉ k√Ω
    const dataToSign = userName + '|' + role + '|' + timestamp + '|' + Date.now();
    
    // T·∫°o hash t·ª´ d·ªØ li·ªáu (gi·∫£ l·∫≠p thu·∫≠t to√°n bƒÉm)
    let hash = 0;
    for (let i = 0; i < dataToSign.length; i++) {
        const char = dataToSign.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    
    // S·ª¨A: S·ª≠ d·ª•ng encodeURIComponent ƒë·ªÉ h·ªó tr·ª£ Unicode
    const safeString = 'DS_' + Math.abs(hash) + '_' + encodeURIComponent(userName.replace(/\s/g, '')) + '_' + role + '_' + new Date().getTime();
    
    try {
        // Encode an to√†n cho Unicode
        const signature = btoa(unescape(encodeURIComponent(safeString)));
        // R√∫t g·ªçn ch·ªØ k√Ω ƒë·ªÉ hi·ªÉn th·ªã
        return signature.substring(0, 32) + '...';
    } catch (error) {
        console.warn('btoa encoding error, using fallback:', error);
        // Fallback: ch·ªâ d√πng hash s·ªë
        return 'DS_' + Math.abs(hash).toString().substring(0, 16) + '...';
    }
}

async function substituteHvlApprove() {
    console.log('üñäÔ∏è Substitute HLV signature function called');
    
    const substituteName = document.getElementById('substitute_hvl_name').value;
    const substituteComment = document.getElementById('substitute_hvl_comment').value;
    
    if (!substituteName.trim()) {
        alert('Vui l√≤ng nh·∫≠p h·ªç t√™n HLV tr·ª±c thay!');
        return;
    }
    
    const substituteSignatureDisplay = document.getElementById('substitute-signature-display');
    const substituteStatus = document.querySelector('.substitute-hvl-status');
    const substituteBtn = document.querySelector('.btn-substitute-hvl-approve');
    
    if (!substituteSignatureDisplay || !substituteStatus) {
        console.error('‚ùå Required elements not found for substitute signature');
        console.log('Available elements:', {
            substituteDisplay: !!substituteSignatureDisplay,
            status: !!substituteStatus
        });
        alert('L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªØ k√Ω HLV tr·ª±c thay! Vui l√≤ng th·ª≠ l·∫°i.');
        return;
    }
    
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k√Ω thay v·ªõi t√™n "' + substituteName + '"?')) {
        try {
            const currentTime = new Date().toISOString();
            
            // S·ª¨A: L·∫•y ch·ªØ k√Ω th·ª±c cho HLV tr·ª±c thay
            const signatureData = getUserSignature(substituteName, 'TRAINER');
            
            // S·ª¨A: T·∫°o hash an to√†n v·ªõi Unicode
            let hashString = '';
            try {
                hashString = btoa(unescape(encodeURIComponent(substituteName + '_SUBSTITUTE_' + currentTime)));
            } catch (error) {
                console.warn('Hash encoding error, using fallback:', error);
                hashString = 'HASH_SUBSTITUTE_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }
            
            const fullSignatureData = {
                name: substituteName,
                role: 'SUBSTITUTE_HLV',
                timestamp: currentTime,
                id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                hash: hashString,
                verified: true,
                comment: substituteComment,
                digitalSignature: generateDigitalSignature(substituteName, 'SUBSTITUTE_HLV', currentTime)
            };
            
            // S·ª¨A: Update UI NGAY L·∫¨P T·ª®C v·ªõi ch·ªØ k√Ω th·ª±c
            const signatureHTML = await generateSignatureHTML(signatureData, currentTime);
            substituteSignatureDisplay.innerHTML = signatureHTML;
            substituteStatus.innerHTML = '<strong style="color: green;">‚úÖ ƒê√£ k√Ω</strong>';
            
            // ·∫®n n√∫t k√Ω sau khi ƒë√£ k√Ω
            if (substituteBtn) {
                substituteBtn.style.display = 'none';
            }
            
            console.log('‚úÖ Substitute HLV signature UI updated successfully');
            
            // Save signature
            saveSignatureToJournal('substituteSignature', fullSignatureData);
            
            // Notify dashboard v·ªÅ substitute signature
            notifyDashboardUpdate();
            
            alert('HLV tr·ª±c thay ƒë√£ k√Ω th√†nh c√¥ng!\nCh·ªØ k√Ω ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ.');
            
            console.log('‚úÖ Substitute HLV signature completed successfully');
            
        } catch (error) {
            console.error('‚ùå Error in substituteHvlApprove:', error);
            alert('C√≥ l·ªói khi k√Ω thay: ' + error.message);
        }
    }
}

// Function notify dashboard update
function notifyDashboardUpdate() {
    // Notify dashboard v·ªÅ changes
    if (window.opener) {
        window.opener.postMessage({
            type: 'JOURNAL_SIGNATURE_UPDATE',
            timestamp: new Date().toISOString()
        }, '*');
    }
    
    // Trigger storage event ƒë·ªÉ ƒë·ªìng b·ªô
    localStorage.setItem('dashboard_refresh_trigger', Date.now().toString());
}

// UPDATED: Function to save signature to journal data - NOW USES DATABASE
async function saveSignatureToJournal(signatureType, signatureData) {
    try {
        // Save to database if journal exists
        if (window.journalDBManager.currentJournalId) {
            // Update journal with signature data
            const updateData = {
                [`${signatureType}_signature`]: JSON.stringify(signatureData),
                [`${signatureType}_timestamp`]: new Date().toISOString()
            };
            
            await window.journalDBManager.updateJournal(window.journalDBManager.currentJournalId, updateData);
            console.log('‚úÖ Saved ' + signatureType + ' signature to database');
        }
        
        // Also save to localStorage for backup
    const dogName = document.getElementById('journal_dog_name').value;
    const date = document.getElementById('journal_date').value;
    const journalKey = 'journal_' + dogName + '_' + date;
    
    let journalData = JSON.parse(localStorage.getItem(journalKey)) || {};
    
    if (!journalData.approval) {
        journalData.approval = {};
    }
    
    journalData.approval[signatureType] = signatureData;
    localStorage.setItem(journalKey, JSON.stringify(journalData));
    
        console.log('‚úÖ Saved ' + signatureType + ' signature to localStorage backup');
        
    } catch (error) {
        console.error('Error saving signature:', error);
        
        // Fallback to localStorage only
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const journalKey = 'journal_' + dogName + '_' + date;
        
        let journalData = JSON.parse(localStorage.getItem(journalKey)) || {};
        
        if (!journalData.approval) {
            journalData.approval = {};
        }
        
        journalData.approval[signatureType] = signatureData;
        localStorage.setItem(journalKey, JSON.stringify(journalData));
        
        console.log('‚úÖ Saved ' + signatureType + ' signature to localStorage fallback');
    }
}

// UPDATED: Function to save approval data - NOW USES DATABASE
async function saveApprovalData(approvalData) {
    try {
        // Save to database if journal exists
        if (window.journalDBManager.currentJournalId) {
            const updateData = {
                approval_status: approvalData.status || 'PENDING',
                approved_by: approvalData.approverId || null,
                approved_at: approvalData.approvedAt || null,
                rejection_reason: approvalData.rejectionReason || null
            };
            
            await window.journalDBManager.updateJournal(window.journalDBManager.currentJournalId, updateData);
            console.log('‚úÖ Saved approval data to database');
        }
        
        // Also save to localStorage for backup
    const dogName = document.getElementById('journal_dog_name').value;
    const date = document.getElementById('journal_date').value;
    const journalKey = 'journal_' + dogName + '_' + date;
    
    let journalData = JSON.parse(localStorage.getItem(journalKey)) || {};
    
    if (!journalData.approval) {
        journalData.approval = {};
    }
    
    Object.assign(journalData.approval, approvalData);
    localStorage.setItem(journalKey, JSON.stringify(journalData));
    
        console.log('‚úÖ Saved approval data to localStorage backup');
        
    } catch (error) {
        console.error('Error saving approval data:', error);
        
        // Fallback to localStorage only
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const journalKey = 'journal_' + dogName + '_' + date;
        
        let journalData = JSON.parse(localStorage.getItem(journalKey)) || {};
        
        if (!journalData.approval) {
            journalData.approval = {};
        }
        
        Object.assign(journalData.approval, approvalData);
        localStorage.setItem(journalKey, JSON.stringify(journalData));
        
        console.log('‚úÖ Saved approval data to localStorage fallback');
    }
}

// Functions to remove blocks
function removeLastTrainingBlock() {
    const container = document.getElementById('training-blocks-container');
    const blocks = container.querySelectorAll('.training-block');
    
    if (blocks.length > 1) {
        container.removeChild(blocks[blocks.length - 1]);
        trainingSessionCounter--;
    } else {
        alert('Ph·∫£i c√≥ √≠t nh·∫•t 1 ca hu·∫•n luy·ªán!');
    }
}

function removeLastOperationBlock() {
    const container = document.getElementById('operation-blocks-container');
    const blocks = container.querySelectorAll('.operation-block');
    
    if (blocks.length > 0) {
        container.removeChild(blocks[blocks.length - 1]);
        operationSessionCounter--;
    }
}

// UPDATED: Function to save journal data - NOW USES DATABASE
async function saveJournalData() {
    try {
        // Use the database manager to save
        await window.journalDBManager.saveJournalData();
        
        // Also save to localStorage for backup/compatibility
    const dogName = document.getElementById('journal_dog_name').value;
    const date = document.getElementById('journal_date').value;
    const journalKey = 'journal_' + dogName + '_' + date;
    
    const journalData = {
        generalInfo: {
            dogName: dogName,
            date: date,
            hlv: document.getElementById('journal_hlv').value
        },
        trainingBlocks: collectTrainingBlocksData(),
        operationBlocks: collectOperationBlocksData(),
        meals: collectMealsData(),
        care: collectCareData(),
        health: collectHealthData(),
        hlvComment: document.getElementById('journal_hlv_comment').value,
        otherIssues: document.getElementById('journal_other_issues').value,
        lastModified: new Date().toISOString()
    };
    
    // Preserve existing approval data
    const existingData = localStorage.getItem(journalKey);
    if (existingData) {
        const existing = JSON.parse(existingData);
        if (existing.approval) {
            journalData.approval = existing.approval;
        }
    }
    
        // Check if journal has HLV signature for manager approval
    if (journalData.approval?.hvlSignature && !journalData.approval?.leaderSignature) {
        journalData.approval.status = 'PENDING_MANAGER_APPROVAL';
        console.log('‚úÖ Journal has HLV signature, set for manager approval');
    }
    
    localStorage.setItem(journalKey, JSON.stringify(journalData));
    
        // Notify dashboard about journal save
    notifyDashboardUpdate();
    
        console.log('‚úÖ Journal saved successfully to both database and localStorage:', journalKey);
        
    } catch (error) {
        console.error('Error saving journal:', error);
        
        // Fallback to localStorage only if database fails
        const dogName = document.getElementById('journal_dog_name').value;
        const date = document.getElementById('journal_date').value;
        const journalKey = 'journal_' + dogName + '_' + date;
        
        const journalData = {
            generalInfo: {
                dogName: dogName,
                date: date,
                hlv: document.getElementById('journal_hlv').value
            },
            trainingBlocks: collectTrainingBlocksData(),
            operationBlocks: collectOperationBlocksData(),
            meals: collectMealsData(),
            care: collectCareData(),
            health: collectHealthData(),
            hlvComment: document.getElementById('journal_hlv_comment').value,
            otherIssues: document.getElementById('journal_other_issues').value,
            lastModified: new Date().toISOString()
        };
        
        // Preserve existing approval data
        const existingData = localStorage.getItem(journalKey);
        if (existingData) {
            const existing = JSON.parse(existingData);
            if (existing.approval) {
                journalData.approval = existing.approval;
            }
        }
        
        localStorage.setItem(journalKey, JSON.stringify(journalData));
        notifyDashboardUpdate();
        
        alert('Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o localStorage (database kh√¥ng kh·∫£ d·ª•ng). ' + 
              'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.');
        
        console.log('‚úÖ Journal saved to localStorage as fallback:', journalKey);
    }
}

// Data collection functions
function collectTrainingBlocksData() {
    const blocks = [];
    const trainingBlocks = document.querySelectorAll('.training-block');
    
    trainingBlocks.forEach((block, index) => {
        const blockId = block.getAttribute('data-block-id');
        
        const blockData = {
            fromTime: document.getElementById('trainingFromTime-' + blockId).value,
            toTime: document.getElementById('trainingToTime-' + blockId).value,
            locationType: getSelectedRadioValue('training-location-group-' + blockId),
            locationOther: document.getElementById('trainingLocationOther-' + blockId).value,
            advancedTraining: document.getElementById('hlNangCaoCheckbox-' + blockId).checked,
            basicTraining: document.getElementById('hlCoBanCheckbox-' + blockId).checked,
            physicalTraining: document.getElementById('hlTheLucCheckbox-' + blockId).checked,
            otherTraining: document.getElementById('hlKhacCheckbox-' + blockId).checked ? 
                          document.getElementById('hlKhacText-' + blockId).value : null,
            drugDetection: []
        };
        
        // Collect drug detection data for 3 attempts
        for (let i = 1; i <= 3; i++) {
            const selectedDrugs = getSelectedCheckboxValues('drugTypeOptions-' + blockId + '-' + i, 'data-drug-value');
            const manifestation = getSelectedCheckboxValues('.detection-manifestation-' + i, 'value');
            const drugTypeOther = document.getElementById('drugTypeOther-' + blockId + '-' + i).value;
            const manifestationOther = document.getElementById('manifestationOther-' + blockId + '-' + i).value;
            
            blockData.drugDetection.push({
                selectedDrugs: selectedDrugs,
                drugTypeOther: drugTypeOther,
                manifestation: manifestation,
                manifestationOther: manifestationOther
            });
        }
        
        blocks.push(blockData);
    });
    
    return blocks;
}

function collectOperationBlocksData() {
    const blocks = [];
    const operationBlocks = document.querySelectorAll('.operation-block');
    
    operationBlocks.forEach((block, index) => {
        const blockId = block.getAttribute('data-block-id');
        
        const blockData = {
            fromTime: document.getElementById('operationFromTime-' + blockId).value,
            toTime: document.getElementById('operationToTime-' + blockId).value,
            selectedLocations: getSelectedCheckboxValues('operationLocationOptions-' + blockId, 'data-location-value'),
            locationKhoText: document.getElementById('operationLocationKho-' + blockId).value,
            locationOtherText: document.getElementById('operationLocationOther-' + blockId).value,
            checkGoods: document.getElementById('checkGoods-' + blockId).checked,
            checkLuggage: document.getElementById('checkLuggage-' + blockId).checked,
            fieldTraining: document.getElementById('fieldTraining-' + blockId).checked,
            patrol: document.getElementById('patrol-' + blockId).checked,
            otherOperation1: document.getElementById('opKhacCheckbox1-' + blockId).checked ? 
                           document.getElementById('opKhacText1-' + blockId).value : null,
            otherOperation2: document.getElementById('opKhacCheckbox2-' + blockId).checked ? 
                           document.getElementById('opKhacText2-' + blockId).value : null,
            otherIssues: document.getElementById('operation_other_issues_' + blockId).value
        };
        
        blocks.push(blockData);
    });
    
    return blocks;
}

function collectMealsData() {
    return {
        lunch: {
            time: document.getElementById('lunchTime').value,
            amount: document.getElementById('lunchAmount').value,
            food: getSelectedCheckboxValues('lunchFoodOptions', 'data-food-value').join(', '),
            foodOther: document.getElementById('lunchFoodOther').value
        },
        dinner: {
            time: document.getElementById('dinnerTime').value,
            amount: document.getElementById('dinnerAmount').value,
            food: getSelectedCheckboxValues('dinnerFoodOptions', 'data-food-value').join(', '),
            foodOther: document.getElementById('dinnerFoodOther').value
        }
    };
}

function collectCareData() {
    return {
        bath: document.getElementById('care_bath').checked,
        brush: document.getElementById('care_brush').checked,
        wipe: document.getElementById('care_wipe').checked
    };
}

function collectHealthData() {
    return {
        status: getSelectedRadioValue('health_status'),
        other: document.getElementById('health_other_text').value
    };
}

// Helper functions for data collection
function getSelectedRadioValue(name) {
    const radio = document.querySelector('input[name="' + name + '"]:checked');
    return radio ? radio.value : '';
}

function getSelectedCheckboxValues(containerId, attribute) {
    const container = document.getElementById(containerId) || document.querySelector(containerId);
    if (!container) return [];
    
    const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
    return Array.from(checkboxes).map(cb => cb.getAttribute(attribute) || cb.value);
}

// Helper functions cho journal actions
function createNewJournal() {
    if (confirm('T·∫°o nh·∫≠t k√Ω m·ªõi? D·ªØ li·ªáu hi·ªán t·∫°i s·∫Ω b·ªã x√≥a.')) {
        showJournalEditForm(currentDogForJournal);
    }
}

// S·ª¨A: Function viewOldJournals - CHUY·ªÇN SANG PDF VIEW ƒê√öNG C√ÅCH
function viewOldJournals() {
    // T√¨m t·∫•t c·∫£ journal c·ªßa ch√≥ hi·ªán t·∫°i
    const dogJournals = [];
    
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('journal_' + currentDogForJournal + '_')) {
            try {
                const journalData = JSON.parse(localStorage.getItem(key));
                if (journalData && journalData.generalInfo) {
                    dogJournals.push({
                        key: key,
                        date: journalData.generalInfo.date,
                        data: journalData
                    });
                }
            } catch (e) {
                console.error('Error parsing journal:', e);
            }
        }
    }
    
    if (dogJournals.length === 0) {
        alert('Kh√¥ng c√≥ nh·∫≠t k√Ω c≈© n√†o cho CNV ' + currentDogForJournal);
        return;
    }
    
    // S·∫Øp x·∫øp theo ng√†y gi·∫£m d·∫ßn
    dogJournals.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    // T·∫°o danh s√°ch ch·ªçn ng√†y
    let dateOptions = '<option value="">Ch·ªçn ng√†y xem nh·∫≠t k√Ω</option>';
    dogJournals.forEach(journal => {
        dateOptions += '<option value="' + journal.date + '">' + journal.date + '</option>';
    });
    
    // Hi·ªÉn th·ªã modal ch·ªçn ng√†y ƒë·ªÉ xem A4 PDF
    const modalHtml = '<div id="viewOldJournalModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; display: flex; align-items: center; justify-content: center;"><div style="background: white; padding: 30px; border-radius: 10px; max-width: 500px; width: 90%;"><h3 style="margin-top: 0;">üìã XEM NH·∫¨T K√ù C≈® - CNV ' + currentDogForJournal + '</h3><p>T√¨m th·∫•y ' + dogJournals.length + ' nh·∫≠t k√Ω. Ch·ªçn ng√†y ƒë·ªÉ xem b·∫£n PDF A4:</p><select id="oldJournalDateSelect" style="width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;">' + dateOptions + '</select><div style="text-align: right; margin-top: 20px;"><button onclick="closeOldJournalModal()" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 5px; margin-right: 10px; cursor: pointer;">H·ªßy</button><button onclick="viewSelectedOldJournal()" style="background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">üìÑ Xem PDF A4</button></div></div></div>';
    
    // Th√™m modal v√†o DOM
    document.body.insertAdjacentHTML('beforeend', modalHtml);
}

// Helper functions cho view old journals
function closeOldJournalModal() {
    const modal = document.getElementById('viewOldJournalModal');
    if (modal) {
        modal.remove();
    }
}

function viewSelectedOldJournal() {
    const selectedDate = document.getElementById('oldJournalDateSelect').value;
    if (!selectedDate) {
        alert('Vui l√≤ng ch·ªçn ng√†y ƒë·ªÉ xem nh·∫≠t k√Ω!');
        return;
    }
    
    // ƒê√≥ng modal
    closeOldJournalModal();
    
    // S·ª¨A: CHUY·ªÇN TR·ª∞C TI·∫æP SANG PDF VIEW TRONG C√ôNG TAB
    showPureA4JournalView(currentDogForJournal, selectedDate);
}

function resetJournal() {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën t·∫£i l·∫°i form? T·∫•t c·∫£ d·ªØ li·ªáu ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t.')) {
        showJournalEditForm(currentDogForJournal);
    }
}

// Function to export journal to PDF
function exportJournalToPDF(dogName, date) {
    alert('üöß Ch·ª©c nƒÉng xu·∫•t PDF ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\nHi·ªán t·∫°i b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng In (Ctrl+P) ƒë·ªÉ l∆∞u th√†nh PDF.');
}

// Functions for viewing journal for approval (Manager mode) - S·ª¨A: FIX MANAGER WORKFLOW
function viewJournalForApproval(journalKey) {
    console.log('üëÄ Manager viewing journal for approval:', journalKey);
    
    // S·ª¨A: Chuy·ªÉn sang PDF view ƒë·ªÉ Manager c√≥ th·ªÉ xem v√† duy·ªát
    showA4JournalViewFromKey(journalKey);
}

function approveJournalAsManager(journalKey) {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát nh·∫≠t k√Ω n√†y?\n\nSau khi duy·ªát, nh·∫≠t k√Ω s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh v√† HLV s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o.')) {
        try {
            const journalData = JSON.parse(localStorage.getItem(journalKey));
            
            if (journalData) {
                const currentTime = new Date().toISOString();
                
                if (!journalData.approval) journalData.approval = {};
                
                // S·ª¨A: TH√äM CH·ªÆ K√ù MANAGER V·ªöI CH·ªÆ K√ù TH·ª∞C
                const signatureData = getUserSignature(currentUserName, currentUserRole);
                
                journalData.approval.leaderComment = 'ƒê√£ duy·ªát b·ªüi ' + currentUserName;
                journalData.approval.leaderStatus = 'ƒê√£ duy·ªát';
                journalData.approval.leaderApprovalTime = currentTime;
                journalData.approval.status = 'APPROVED';
                journalData.approval.approvedBy = currentUserName;
                
                // Add manager signature v·ªõi ch·ªØ k√Ω th·ª±c
                journalData.approval.leaderSignature = {
                    name: currentUserName,
                    role: currentUserRole,
                    timestamp: currentTime,
                    id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                    hash: btoa(unescape(encodeURIComponent(currentUserName + '_MANAGER_' + currentTime))),
                    verified: true,
                    digitalSignature: generateDigitalSignature(currentUserName, currentUserRole, currentTime)
                };
                
                localStorage.setItem(journalKey, JSON.stringify(journalData));
                
                // S·ª¨A: REMOVE T·ª™ PENDING APPROVALS
                const pendingJournals = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
                const filteredJournals = pendingJournals.filter(j => j.key !== journalKey);
                localStorage.setItem('pending_manager_approvals', JSON.stringify(filteredJournals));
                
                // S·ª¨A: T·∫†O NOTIFICATION CHO HLV
                createTrainerNotification(journalData, 'APPROVED');
                
                // Notify dashboard v·ªÅ manager approval
                notifyDashboardUpdate();
                
                alert('üéâ Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!\n\n' +
                      '‚úÖ Ch·ªØ k√Ω Manager ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ\n' +
                      'üì¢ HLV ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o\n' +
                      'üìä Dashboard s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');
                
                console.log('‚úÖ Manager approval completed for:', journalKey);
                
                // Refresh manager view
                showAllPendingJournalsForManager();
            }
        } catch (error) {
            console.error('‚ùå Error in approveJournalAsManager:', error);
            alert('C√≥ l·ªói khi duy·ªát nh·∫≠t k√Ω: ' + error.message);
        }
    }
}

// S·ª¨A: Function T·∫†O NOTIFICATION CHO TRAINER
function createTrainerNotification(journalData, action) {
    const trainerNotifications = JSON.parse(localStorage.getItem('trainer_notifications')) || [];
    
    const notification = {
        id: 'notif_trainer_' + Date.now(),
        type: 'JOURNAL_STATUS_UPDATE',
        title: action === 'APPROVED' ? 'Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c duy·ªát' : 'Nh·∫≠t k√Ω b·ªã t·ª´ ch·ªëi',
        message: `Nh·∫≠t k√Ω CNV ${journalData.generalInfo.dogName} (${journalData.generalInfo.date}) ƒë√£ ƒë∆∞·ª£c ${action === 'APPROVED' ? 'duy·ªát' : 't·ª´ ch·ªëi'} b·ªüi Manager`,
        journalKey: 'journal_' + journalData.generalInfo.dogName + '_' + journalData.generalInfo.date,
        action: action,
        approver: currentUserName,
        createdAt: new Date().toISOString(),
        read: false,
        forTrainer: journalData.generalInfo.hlv
    };
    
    trainerNotifications.unshift(notification);
    
    // Gi·ªõi h·∫°n s·ªë notification
    if (trainerNotifications.length > 100) {
        trainerNotifications.splice(100);
    }
    
    localStorage.setItem('trainer_notifications', JSON.stringify(trainerNotifications));
    console.log('üì¢ Created trainer notification:', notification.id);
}

// S·ª¨A CH·ªÆ K√ù TH·ª∞C: Load approval data - S·ª¨A: Hi·ªÉn th·ªã ch·ªØ k√Ω th·ª±c khi load l·∫°i
function loadApprovalData(approval) {
    // Load HLV signature
    if (approval.hvlSignature) {
        // S·ª¨A: ƒê·ª¢I DOM READY TR∆Ø·ªöC KHI THAO T√ÅC
        setTimeout(async () => {
            const hvlSignatureDisplay = document.getElementById('hvl-signature-display');
            const submissionStatus = document.querySelector('.submission-status');
            
            if (hvlSignatureDisplay) {
                // S·ª¨A: S·ª≠ d·ª•ng ch·ªØ k√Ω th·ª±c t·ª´ th∆∞ m·ª•c signatures
                const signatureData = getUserSignature(approval.hvlSignature.name, approval.hvlSignature.role);
                const signatureHTML = await generateSignatureHTML(signatureData, approval.hvlSignature.timestamp);
                hvlSignatureDisplay.innerHTML = signatureHTML;
            }
            
            if (submissionStatus) {
                submissionStatus.textContent = '‚úÖ ƒê√£ k√Ω';
                submissionStatus.style.color = 'green';
            }
        }, 300);
    }
    
    // Load leader signature
    if (approval.leaderSignature) {
        setTimeout(async () => {
            const leaderSignatureDisplay = document.getElementById('leader-signature-display');
            const approvalStatus = document.querySelector('.approval-status');
            
            if (leaderSignatureDisplay) {
                // S·ª¨A: S·ª≠ d·ª•ng ch·ªØ k√Ω th·ª±c t·ª´ th∆∞ m·ª•c signatures
                const signatureData = getUserSignature(approval.leaderSignature.name, approval.leaderSignature.role);
                const signatureHTML = await generateSignatureHTML(signatureData, approval.leaderSignature.timestamp);
                leaderSignatureDisplay.innerHTML = signatureHTML;
            }
            
            if (approvalStatus) {
                approvalStatus.textContent = '‚úÖ ƒê√£ duy·ªát';
                approvalStatus.style.color = 'green';
            }
        }, 300);
    }
    
    // Load substitute signature
    if (approval.substituteSignature) {
        setTimeout(async () => {
            const substituteSignatureDisplay = document.getElementById('substitute-signature-display');
            const substituteStatus = document.querySelector('.substitute-hvl-status');
            
            if (substituteSignatureDisplay) {
                // S·ª¨A: S·ª≠ d·ª•ng ch·ªØ k√Ω th·ª±c t·ª´ th∆∞ m·ª•c signatures
                const signatureData = getUserSignature(approval.substituteSignature.name, approval.substituteSignature.role);
                const signatureHTML = await generateSignatureHTML(signatureData, approval.substituteSignature.timestamp);
                substituteSignatureDisplay.innerHTML = signatureHTML;
            }
            
            if (substituteStatus) {
                substituteStatus.textContent = '‚úÖ ƒê√£ k√Ω';
                substituteStatus.style.color = 'green';
            }
        }, 300);
    }
    
    // Load leader comment
    setTimeout(() => {
        const leaderCommentField = document.getElementById('leader_comment');
        if (leaderCommentField && approval.leaderComment) {
            leaderCommentField.value = approval.leaderComment;
        }
    }, 300);
}

// TH√äM FUNCTION DEBUG CHO NG∆Ø·ªúI D√ôNG
function debugSignatureSystem() {
    console.log('üîç DEBUG SIGNATURE SYSTEM:');
    console.log('Current User:', currentUserName, currentUserRole);
    console.log('HLV Info:', hlvInfo);
    
    // Check DOM elements
    const hvlDisplay = document.getElementById('hvl-signature-display');
    const submissionStatus = document.querySelector('.submission-status');
    const submitBtn = document.querySelector('.btn-submit-hvl');
    
    console.log('DOM Elements Check:', {
        hvlDisplay: !!hvlDisplay,
        submissionStatus: !!submissionStatus,
        submitBtn: !!submitBtn,
        allSubmissionStatus: document.querySelectorAll('.submission-status').length
    });
    
    // Check signature database
    const signatures = JSON.parse(localStorage.getItem(SIGNATURE_STORAGE_KEY)) || [];
    console.log('Available signatures:', signatures.length);
    
    // Test getUserSignature
    try {
        const testSig = getUserSignature(currentUserName || 'Test User', currentUserRole || 'TRAINER');
        console.log('Test signature:', testSig);
    } catch (error) {
        console.error('Error getting signature:', error);
    }
    
    alert('Debug info ƒë√£ ƒë∆∞·ª£c ghi v√†o Console. B·∫•m F12 ƒë·ªÉ xem chi ti·∫øt.');
}

// Test function cho n√∫t K√Ω
function testHvlSignature() {
    console.log('üß™ TEST: submitHvlSignature called');
    console.log('Current state:', {
        userRole: currentUserRole,
        userName: currentUserName,
        hlvInfo: hlvInfo
    });
    
    // G·ªçi function th·ª±c
    submitHvlSignature();
}

console.log("‚úÖ Script.js ƒë√£ ƒë∆∞·ª£c t·∫£i ho√†n t·∫•t v·ªõi ch·ªØ k√Ω th·ª±c v√† workflow Manager ho√†n ch·ªânh!");

// ===== T√ìM T·∫ÆT C√ÅC S·ª¨A ƒê·ªîI CH√çNH =====
console.log(`

üîß C√ÅC V·∫§N ƒê·ªÄ ƒê√É ƒê∆Ø·ª¢C S·ª¨A:

‚úÖ 1. T√äN HI·ªÇN TH·ªä:
- ƒê√£ s·ª≠a t·ª´ "Ph·∫°m Th·ªã Qu·ª≥nh" ‚Üí "Ho√†ng Tr·ªçng Qu·ª≥nh"
- C·∫≠p nh·∫≠t trong t·∫•t c·∫£ functions: login, updateUserDisplay, getUserSignature
- Fix mapping trong initializeDefaultUsers v√† initializeSignatureDatabase

‚úÖ 2. H·ªÜ TH·ªêNG CH·ªÆ K√ù:
- submitHvlSignature(): ƒê√£ th√™m error handling v√† logging chi ti·∫øt
- generateSignatureHTML(): H·ªó tr·ª£ c·∫£ ·∫£nh v√† text fallback
- getUserSignature(): Fix mapping t√™n ch√≠nh x√°c
- K·∫øt n·ªëi v·ªõi th∆∞ m·ª•c signatures/ ƒë·ªÉ l·∫•y ·∫£nh ch·ªØ k√Ω th·ª±c

‚úÖ 3. MANAGER WORKFLOW:
- showAllPendingJournalsForManager(): T√¨m t·∫•t c·∫£ journals ƒë√£ k√Ω HLV, ch∆∞a duy·ªát Manager
- viewJournalForApproval(): Manager c√≥ th·ªÉ xem journal PDF ƒë·ªÉ duy·ªát
- approveJournalAsManager(): Manager c√≥ th·ªÉ k√Ω duy·ªát v·ªõi ch·ªØ k√Ω th·ª±c
- setJournalPendingForManagerApproval(): Auto chuy·ªÉn journal cho Manager sau khi HLV k√Ω

‚úÖ 4. L∆ØU NH·∫¨T K√ù:
- saveJournalData(): Th√™m workflow chuy·ªÉn cho Manager khi c√≥ ch·ªØ k√Ω HLV
- Th√¥ng b√°o cho user khi nh·∫≠t k√Ω s·∫µn s√†ng cho Manager duy·ªát
- ƒê·ªìng b·ªô v·ªõi Dashboard th√¥ng qua notifyDashboardUpdate()

‚úÖ 5. S·ª¨A L·ªñI LOGOUT:
- closeAllDropdowns(): ƒê√≥ng t·∫•t c·∫£ dropdown khi logout
- logout(): Reset ho√†n to√†n UI, ·∫©n user display, clear data
- S·ª≠a v·∫•n ƒë·ªÅ user dropdown v·∫´n hi·ªÉn th·ªã sau khi ƒëƒÉng xu·∫•t

‚úÖ 6. S·ª¨A Z-INDEX:
- showContent(): ƒê·∫∑t position: relative, z-index: 1 cho content
- showDogProfileForm(): ƒê·∫£m b·∫£o form kh√¥ng ƒë√® l√™n navigation
- showJournalEditForm(): ƒê·∫£m b·∫£o journal form kh√¥ng ƒë√® l√™n thanh navigation
- showAllPendingJournalsForManager(): ƒê·∫∑t z-index ƒë√∫ng cho manager view

üìù C√ÅCH S·ª¨ D·ª§NG:
1. ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n: Quynh/123456 (Ho√†ng Tr·ªçng Qu·ª≥nh - MANAGER)
2. T·∫°o nh·∫≠t k√Ω ‚Üí K√Ω (ch·ªØ k√Ω s·∫Ω ƒë∆∞·ª£c ch√®n t·ª´ th∆∞ m·ª•c signatures/)
3. L∆∞u nh·∫≠t k√Ω ‚Üí T·ª± ƒë·ªông chuy·ªÉn cho Manager
4. Manager v√†o "Duy·ªát nh·∫≠t k√Ω ch·ªù ph√™ duy·ªát" ƒë·ªÉ xem v√† k√Ω duy·ªát

`);

// ===== KI·ªÇM TRA T√çNH NƒÇNG HO·∫†T ƒê·ªòNG =====
function checkSystemHealth() {
    const issues = [];
    
    // Ki·ªÉm tra signature database
    const signatures = JSON.parse(localStorage.getItem(SIGNATURE_STORAGE_KEY)) || [];
    if (signatures.length === 0) {
        issues.push('‚ùå Signature database tr·ªëng');
    }
    
    // Ki·ªÉm tra users database
    const users = JSON.parse(localStorage.getItem('k9_users')) || [];
    const quynhUser = users.find(u => u.username === 'Quynh');
    
    if (!quynhUser) {
        issues.push('‚ùå User Quynh kh√¥ng t·ªìn t·∫°i');
    } else if (quynhUser.name !== 'Ho√†ng Tr·ªçng Qu·ª≥nh') {
        issues.push('‚ùå T√™n user Quynh ch∆∞a ƒë√∫ng: ' + quynhUser.name);
    }
    
    // Ki·ªÉm tra DOM elements quan tr·ªçng
    if (!document.getElementById('hvl-signature-display')) {
        issues.push('‚ùå Signature display element kh√¥ng t·ªìn t·∫°i');
    }
    
    if (issues.length === 0) {
        console.log('‚úÖ System Health Check: T·∫§T C·∫¢ T√çNH NƒÇNG HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG');
    } else {
        console.warn('‚ö†Ô∏è System Health Issues:', issues);
    }
    
    return issues.length === 0;
}

// Ch·∫°y ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng sau khi load xong
setTimeout(() => {
    checkSystemHealth();
}, 2000);

// DEBUG FUNCTION cho Manager
function debugManagerSystem() {
    console.log('üîß DEBUGGING MANAGER SYSTEM...');
    
    let allJournals = 0;
    let signedJournals = 0;
    let approvedJournals = 0;
    let pendingDetails = [];
    
    // Ki·ªÉm tra t·∫•t c·∫£ journals
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('journal_')) {
            allJournals++;
            try {
                const data = JSON.parse(localStorage.getItem(key));
                console.log('üìÑ Journal:', key, {
                    hasHvlSignature: !!data.approval?.hvlSignature,
                    hasLeaderSignature: !!data.approval?.leaderSignature,
                    status: data.approval?.status
                });
                
                if (data.approval?.hvlSignature) {
                    signedJournals++;
                    if (!data.approval?.leaderSignature) {
                        pendingDetails.push({
                            key: key,
                            dogName: data.generalInfo?.dogName,
                            date: data.generalInfo?.date,
                            trainer: data.generalInfo?.hlv
                        });
                    }
                }
                if (data.approval?.leaderSignature) {
                    approvedJournals++;
                }
            } catch (e) {
                console.error('Error parsing:', key, e);
            }
        }
    }
    
    const pendingList = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
    
    console.log('üìä SYSTEM STATUS:', {
        currentUser: currentUserName,
        currentRole: currentUserRole,
        totalJournals: allJournals,
        signedJournals: signedJournals,
        approvedJournals: approvedJournals,
        pendingApproval: pendingDetails.length,
        pendingList: pendingList.length
    });
    
    console.log('üìã PENDING JOURNALS DETAILS:', pendingDetails);
    
    alert(`üîß MANAGER SYSTEM DEBUG\n\n` +
          `üë§ User: ${currentUserName} (${currentUserRole})\n` +
          `üìÑ Total journals: ${allJournals}\n` +
          `‚úÖ Signed by HLV: ${signedJournals}\n` +
          `üè¢ Approved by Manager: ${approvedJournals}\n` +
          `‚è≥ Pending approval: ${pendingDetails.length}\n` +
          `üìã Pending list: ${pendingList.length}\n\n` +
          `Check console (F12) for detailed logs`);
    
    // Force refresh menu
    refreshDynamicMenus();
}

// S·ª¨A: Function ri√™ng ƒë·ªÉ update journal menu cho Manager
function updateJournalSubMenuForManager() {
    const journalMenu = document.getElementById('journal-sub-menu');
    if (!journalMenu) {
        console.error('‚ùå journal-sub-menu element not found');
        return;
    }
    
    console.log('üîß Creating manager journal menu...');
    
    // ƒê·∫øm s·ªë journal pending th·ª±c t·∫ø
    let actualPendingCount = 0;
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('journal_')) {
            try {
                const journalData = JSON.parse(localStorage.getItem(key));
                if (journalData?.approval?.hvlSignature && !journalData?.approval?.leaderSignature) {
                    actualPendingCount++;
                }
            } catch (e) {
                console.error('Error checking journal:', key, e);
            }
        }
    }
    
    console.log('üìä Found pending journals:', actualPendingCount);
    
    // S·ª¨A: T·∫°o HTML tr·ª±c ti·∫øp cho Manager menu
    journalMenu.innerHTML = `
        <li class="sub-item manager-approval" onclick="showAllPendingJournalsForManager()" style="color: #ff9800; font-weight: bold; cursor: pointer; padding: 12px; border-radius: 5px; background: linear-gradient(135deg, #fff3e0, #ffe0b2); border: 1px solid #ff9800; margin: 5px 0; display: block;">
            üìã Duy·ªát nh·∫≠t k√Ω ch·ªù ph√™ duy·ªát (${actualPendingCount})
        </li>
        <li class="sub-item manager-stats" onclick="showManagerStatistics()" style="color: #9c27b0; cursor: pointer; padding: 10px; border-radius: 5px; background: #f3e5f5; border: 1px solid #9c27b0; margin: 5px 0; display: block;">
            üìä Th·ªëng k√™ t·ªïng quan
        </li>
        <li class="sub-item debug-btn" onclick="debugManagerSystem()" style="color: #f44336; cursor: pointer; padding: 10px; border-radius: 5px; background: #ffebee; border: 1px solid #f44336; margin: 5px 0; display: block;">
            üîß DEBUG - Ki·ªÉm tra h·ªá th·ªëng
        </li>
    `;
    
    console.log('‚úÖ Manager journal menu created successfully');
}

console.log("‚úÖ Script.js ƒë√£ ƒë∆∞·ª£c t·∫£i ho√†n t·∫•t v·ªõi ch·ªØ k√Ω th·ª±c v√† workflow Manager ho√†n ch·ªânh!");

// S·ª¨A: TH√äM DEBUG FUNCTION CHO MANAGER
function debugManagerSystem() {
    console.log('üîß DEBUGGING MANAGER SYSTEM...');
    console.log('üë§ Current user:', currentUserName, currentUserRole);
    
    let allJournals = 0;
    let signedJournals = 0;
    let approvedJournals = 0;
    let pendingDetails = [];
    
    // Ki·ªÉm tra t·∫•t c·∫£ journals
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('journal_')) {
            allJournals++;
            try {
                const data = JSON.parse(localStorage.getItem(key));
                
                if (data.approval?.hvlSignature) {
                    signedJournals++;
                    if (!data.approval?.leaderSignature) {
                        pendingDetails.push({
                            key: key,
                            dogName: data.generalInfo?.dogName,
                            date: data.generalInfo?.date,
                            trainer: data.generalInfo?.hlv
                        });
                    }
                }
                if (data.approval?.leaderSignature) {
                    approvedJournals++;
                }
            } catch (e) {
                console.error('Error parsing:', key, e);
            }
        }
    }
    
    console.log('üìä SYSTEM STATUS:', {
        totalJournals: allJournals,
        signedJournals: signedJournals,
        approvedJournals: approvedJournals,
        pendingApproval: pendingDetails.length
    });
    
    alert(`üîß MANAGER SYSTEM DEBUG\n\n` +
          `üë§ User: ${currentUserName} (${currentUserRole})\n` +
          `üìÑ Total journals: ${allJournals}\n` +
          `‚úÖ Signed by HLV: ${signedJournals}\n` +
          `üè¢ Approved by Manager: ${approvedJournals}\n` +
          `‚è≥ Pending approval: ${pendingDetails.length}\n\n` +
          `Pending journals:\n${pendingDetails.map(p => `- ${p.dogName} (${p.date})`).join('\n')}\n\n` +
          `Check console (F12) for detailed logs`);
    
    // Force refresh menu
    updateJournalSubMenuForManager();
}

// S·ª¨A: Function kh√¥i ph·ª•c layout ho√†n to√†n
function restoreNormalLayout() {
    console.log('üîß Restoring normal layout...');
    
    // Kh√¥i ph·ª•c t·∫•t c·∫£ elements c√≥ th·ªÉ b·ªã ·∫©n
    const elementsToRestore = [
        '#toggleReadButton',
        '.header',
        '.sidebar', 
        '#dashboardBanner',
        '.journal-header-actions',
        '.journal-action-buttons'
    ];
    
    elementsToRestore.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
            element.style.display = '';
            element.style.visibility = '';
            element.style.opacity = '';
        }
    });
    
    // Reset content container
    const content = document.getElementById('content');
    if (content) {
        content.style.cssText = '';
        content.style.display = 'block';
        content.style.position = 'relative';
        content.style.zIndex = '1';
        content.style.width = 'auto';
        content.style.height = 'auto';
        content.style.margin = '0';
        content.style.padding = '20px';
        content.style.overflow = 'visible';
    }
    
    // Reset title
    const title = document.getElementById('title');
    if (title) {
        title.style.display = 'block';
    }
    
    console.log('‚úÖ Layout restored successfully');
}

// S·ª¨A: Function quay l·∫°i Manager view
function returnToManagerView() {
    console.log('üîÑ Returning to Manager view...');
    
    // Kh√¥i ph·ª•c layout ho√†n to√†n
    restoreNormalLayout();
    
    // Quay v·ªÅ manager pending journals view
    setTimeout(() => {
        if (currentUserRole === 'MANAGER') {
            showAllPendingJournalsForManager();
        } else {
            returnToJournalList();
        }
    }, 100);
}

// S·ª¨A: Function k√Ω duy·ªát v·ªõi nh·∫≠n x√©t v√† ch·ªØ k√Ω th·ª±c
async function approveJournalWithComment(journalKey) {
    // L·∫•y nh·∫≠n x√©t t·ª´ textarea
    const commentTextarea = document.getElementById(`managerComment_${journalKey}`);
    const managerComment = commentTextarea ? commentTextarea.value.trim() : '';
    
    if (!managerComment) {
        alert('Vui l√≤ng nh·∫≠p nh·∫≠n x√©t tr∆∞·ªõc khi k√Ω duy·ªát!');
        return;
    }
    
    if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën k√Ω duy·ªát nh·∫≠t k√Ω n√†y?\n\nNh·∫≠n x√©t: "${managerComment}"\n\nSau khi k√Ω, nh·∫≠t k√Ω s·∫Ω ƒë∆∞·ª£c ho√†n th√†nh v√† HLV s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o.`)) {
        try {
            const journalData = JSON.parse(localStorage.getItem(journalKey));
            
            if (journalData) {
                const currentTime = new Date().toISOString();
                
                if (!journalData.approval) journalData.approval = {};
                
                // S·ª¨A: L·∫•y ch·ªØ k√Ω th·ª±c c·ªßa Manager
                const signatureData = getUserSignature(currentUserName, currentUserRole);
                console.log('üìã Manager signature data:', signatureData);
                
                // T·∫°o hash an to√†n cho Manager
                let hashString = '';
                try {
                    hashString = btoa(unescape(encodeURIComponent(currentUserName + '_MANAGER_' + currentTime)));
                } catch (error) {
                    console.warn('Hash encoding error, using fallback:', error);
                    hashString = 'HASH_MANAGER_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                }
                
                // C·∫≠p nh·∫≠t th√¥ng tin duy·ªát
                journalData.approval.leaderComment = managerComment; // S·ª¨A: S·ª≠ d·ª•ng nh·∫≠n x√©t th·ª±c t·∫ø
                journalData.approval.leaderStatus = 'ƒê√£ duy·ªát';
                journalData.approval.leaderApprovalTime = currentTime;
                journalData.approval.status = 'APPROVED';
                journalData.approval.approvedBy = currentUserName;
                
                // S·ª¨A: T·∫°o ch·ªØ k√Ω Manager v·ªõi CH·ªÆ K√ù TH·ª∞C
                journalData.approval.leaderSignature = {
                    name: currentUserName,
                    role: currentUserRole,
                    timestamp: currentTime,
                    id: 'SIG_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                    hash: hashString,
                    verified: true,
                    digitalSignature: generateDigitalSignature(currentUserName, currentUserRole, currentTime),
                    comment: managerComment // S·ª¨A: L∆∞u nh·∫≠n x√©t v√†o ch·ªØ k√Ω
                };
                
                localStorage.setItem(journalKey, JSON.stringify(journalData));
                
                // Remove t·ª´ pending approvals
                const pendingJournals = JSON.parse(localStorage.getItem('pending_manager_approvals')) || [];
                const filteredJournals = pendingJournals.filter(j => j.key !== journalKey);
                localStorage.setItem('pending_manager_approvals', JSON.stringify(filteredJournals));
                
                // T·∫°o notification cho HLV
                createTrainerNotification(journalData, 'APPROVED');
                
                // Notify dashboard
                notifyDashboardUpdate();
                
                alert('üéâ Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c k√Ω duy·ªát th√†nh c√¥ng!\n\n' +
                      '‚úÖ Ch·ªØ k√Ω Manager ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ\n' +
                      `üí¨ Nh·∫≠n x√©t: "${managerComment}"\n` +
                      'üì¢ HLV ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o\n' +
                      'üìä Dashboard s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');
                
                console.log('‚úÖ Manager approval with comment completed for:', journalKey);
                
                // Refresh manager view
                showAllPendingJournalsForManager();
            }
        } catch (error) {
            console.error('‚ùå Error in approveJournalWithComment:', error);
            alert('C√≥ l·ªói khi k√Ω duy·ªát nh·∫≠t k√Ω: ' + error.message);
        }
    }
}